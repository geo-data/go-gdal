/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ../include/gdalconst.i

#define SWIGMODULE constant

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static void Swig_free(void* p) {
  free(p);
}


#include "gdal.h"
#include "gdalwarper.h"
#include "cpl_string.h"
#include "cpl_minixml.h"

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_constant_fc36a418d2ea2afb(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


intgo _wrap_GDT_Unknown_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_Unknown;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GDT_Byte_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_Byte;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GDT_UInt16_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_UInt16;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GDT_Int16_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_Int16;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GDT_UInt32_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_UInt32;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GDT_Int32_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_Int32;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GDT_Float32_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_Float32;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GDT_Float64_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_Float64;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GDT_CInt16_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_CInt16;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GDT_CInt32_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_CInt32;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GDT_CFloat32_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_CFloat32;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GDT_CFloat64_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_CFloat64;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GDT_TypeCount_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GDT_TypeCount;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GA_ReadOnly_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GA_ReadOnly;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GA_Update_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GA_Update;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GF_Read_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GF_Read;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GF_Write_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GF_Write;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRIORA_NearestNeighbour_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRIORA_NearestNeighbour;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRIORA_Bilinear_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRIORA_Bilinear;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRIORA_Cubic_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRIORA_Cubic;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRIORA_CubicSpline_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRIORA_CubicSpline;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRIORA_Lanczos_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRIORA_Lanczos;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRIORA_Average_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRIORA_Average;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRIORA_Mode_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRIORA_Mode;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRIORA_Gauss_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRIORA_Gauss;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_Undefined_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_Undefined;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_GrayIndex_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_GrayIndex;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_PaletteIndex_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_PaletteIndex;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_RedBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_RedBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_GreenBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_GreenBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_BlueBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_BlueBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_AlphaBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_AlphaBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_HueBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_HueBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_SaturationBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_SaturationBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_LightnessBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_LightnessBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_CyanBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_CyanBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_MagentaBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_MagentaBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_YellowBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_YellowBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_BlackBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_BlackBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_YCbCr_YBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_YCbCr_YBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_YCbCr_CrBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_YCbCr_CrBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GCI_YCbCr_CbBand_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GCI_YCbCr_CbBand;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRA_NearestNeighbour_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRA_NearestNeighbour;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRA_Bilinear_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRA_Bilinear;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRA_Cubic_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRA_Cubic;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRA_CubicSpline_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRA_CubicSpline;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRA_Lanczos_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRA_Lanczos;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRA_Average_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRA_Average;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GRA_Mode_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GRA_Mode;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GPI_Gray_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GPI_Gray;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GPI_RGB_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GPI_RGB;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GPI_CMYK_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GPI_CMYK;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GPI_HLS_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GPI_HLS;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CXT_Element_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CXT_Element;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CXT_Text_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CXT_Text;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CXT_Attribute_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CXT_Attribute;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CXT_Comment_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CXT_Comment;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CXT_Literal_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CXT_Literal;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CE_None_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CE_None;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CE_Debug_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CE_Debug;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CE_Warning_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CE_Warning;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CE_Failure_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CE_Failure;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CE_Fatal_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CE_Fatal;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLE_None_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLE_None;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLE_AppDefined_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLE_AppDefined;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLE_OutOfMemory_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLE_OutOfMemory;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLE_FileIO_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLE_FileIO;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLE_OpenFailed_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLE_OpenFailed;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLE_IllegalArg_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLE_IllegalArg;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLE_NotSupported_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLE_NotSupported;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLE_AssertionFailed_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLE_AssertionFailed;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLE_NoWriteAccess_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLE_NoWriteAccess;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLE_UserInterrupt_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLE_UserInterrupt;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_OF_ALL_constant_fc36a418d2ea2afb() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = GDAL_OF_ALL;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_OF_RASTER_constant_fc36a418d2ea2afb() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = GDAL_OF_RASTER;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_OF_VECTOR_constant_fc36a418d2ea2afb() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = GDAL_OF_VECTOR;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_OF_GNM_constant_fc36a418d2ea2afb() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = GDAL_OF_GNM;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_OF_READONLY_constant_fc36a418d2ea2afb() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = GDAL_OF_READONLY;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_OF_UPDATE_constant_fc36a418d2ea2afb() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = GDAL_OF_UPDATE;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_OF_SHARED_constant_fc36a418d2ea2afb() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = GDAL_OF_SHARED;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_OF_VERBOSE_ERROR_constant_fc36a418d2ea2afb() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = GDAL_OF_VERBOSE_ERROR;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLES_BackslashQuotable_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLES_BackslashQuotable;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLES_XML_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLES_XML;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLES_URL_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLES_URL;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLES_SQL_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLES_SQL;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_CPLES_CSV_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = CPLES_CSV;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFT_Integer_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFT_Integer;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFT_Real_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFT_Real;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFT_String_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFT_String;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_Generic_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_Generic;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_PixelCount_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_PixelCount;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_Name_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_Name;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_Min_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_Min;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_Max_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_Max;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_MinMax_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_MinMax;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_Red_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_Red;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_Green_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_Green;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_Blue_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_Blue;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_Alpha_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_Alpha;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_RedMin_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_RedMin;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_GreenMin_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_GreenMin;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_BlueMin_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_BlueMin;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_AlphaMin_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_AlphaMin;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_RedMax_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_RedMax;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_GreenMax_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_GreenMax;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_BlueMax_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_BlueMax;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_AlphaMax_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_AlphaMax;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GFU_MaxCount_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GFU_MaxCount;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GARIO_PENDING_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GARIO_PENDING;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GARIO_UPDATE_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GARIO_UPDATE;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GARIO_ERROR_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GARIO_ERROR;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GARIO_COMPLETE_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GARIO_COMPLETE;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GTO_TIP_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GTO_TIP;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GTO_BIT_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GTO_BIT;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GTO_BSQ_constant_fc36a418d2ea2afb() {
  int result;
  intgo _swig_go_result;
  
  
  result = GTO_BSQ;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

