/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ../include/ogr.i

#define SWIGMODULE github.com/geo-data/go-gdal/gdal/swig/go/gdal/ogr

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


#define SWIG_exception(code, msg) _swig_gopanic(msg)


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}


typedef char retStringAndCPLFree;


#include <iostream>
using namespace std;

#include "gdal.h"
#include "ogr_api.h"
#include "ogr_p.h"
#include "ogr_core.h"
#include "cpl_port.h"
#include "cpl_string.h"
#include "ogr_srs_api.h"

typedef void GDALMajorObjectShadow;

#ifdef DEBUG 
typedef struct OGRSpatialReferenceHS OSRSpatialReferenceShadow;
#ifndef SWIGPERL
typedef struct OGRDriverHS OGRDriverShadow;
typedef struct OGRDataSourceHS OGRDataSourceShadow;
#endif
typedef struct OGRLayerHS OGRLayerShadow;
typedef struct OGRFeatureHS OGRFeatureShadow;
typedef struct OGRFeatureDefnHS OGRFeatureDefnShadow;
typedef struct OGRGeometryHS OGRGeometryShadow;
typedef struct OGRCoordinateTransformationHS OSRCoordinateTransformationShadow;
typedef struct OGRCoordinateTransformationHS OGRCoordinateTransformationShadow;
typedef struct OGRFieldDefnHS OGRFieldDefnShadow;
#else
typedef void OSRSpatialReferenceShadow;
#ifndef SWIGPERL
typedef void OGRDriverShadow;
typedef void OGRDataSourceShadow;
#endif
typedef void OGRLayerShadow;
typedef void OGRFeatureShadow;
typedef void OGRFeatureDefnShadow;
typedef void OGRGeometryShadow;
typedef void OSRCoordinateTransformationShadow;
typedef void OGRFieldDefnShadow;
#endif
typedef struct OGRStyleTableHS OGRStyleTableShadow;
typedef struct OGRGeomFieldDefnHS OGRGeomFieldDefnShadow;



#include "ogr_core.h"
static char const *
OGRErrMessages( int rc ) {
  switch( rc ) {
  case OGRERR_NONE:
    return "OGR Error: None";
  case OGRERR_NOT_ENOUGH_DATA:
    return "OGR Error: Not enough data to deserialize";
  case OGRERR_NOT_ENOUGH_MEMORY:
    return "OGR Error: Not enough memory";
  case OGRERR_UNSUPPORTED_GEOMETRY_TYPE:
    return "OGR Error: Unsupported geometry type";
  case OGRERR_UNSUPPORTED_OPERATION:
    return "OGR Error: Unsupported operation";
  case OGRERR_CORRUPT_DATA:
    return "OGR Error: Corrupt data";
  case OGRERR_FAILURE:
    return "OGR Error: General Error";
  case OGRERR_UNSUPPORTED_SRS:
    return "OGR Error: Unsupported SRS";
  case OGRERR_INVALID_HANDLE:
    return "OGR Error: Invalid handle";
  case OGRERR_NON_EXISTING_FEATURE:
    return "OGR Error: Non existing feature";
  default:
    return "OGR Error: Unknown";
  }
}


#include "gdal.h"

SWIGINTERN char const *GDALMajorObjectShadow_GetDescription(GDALMajorObjectShadow *self){
    return GDALGetDescription( self );
  }
SWIGINTERN void GDALMajorObjectShadow_SetDescription(GDALMajorObjectShadow *self,char const *pszNewDesc){
    GDALSetDescription( self, pszNewDesc );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadataDomainList(GDALMajorObjectShadow *self){
    return GDALGetMetadataDomainList( self );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadata_Dict(GDALMajorObjectShadow *self,char const *pszDomain=""){
    return GDALGetMetadata( self, pszDomain );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadata_List(GDALMajorObjectShadow *self,char const *pszDomain=""){
    return GDALGetMetadata( self, pszDomain );
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadata__SWIG_0(GDALMajorObjectShadow *self,char **papszMetadata,char const *pszDomain=""){
    return GDALSetMetadata( self, papszMetadata, pszDomain );
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadata__SWIG_1(GDALMajorObjectShadow *self,char *pszMetadataString,char const *pszDomain=""){
    char *tmpList[2];
    tmpList[0] = pszMetadataString;
    tmpList[1] = 0;
    return GDALSetMetadata( self, tmpList, pszDomain );
  }
SWIGINTERN char const *GDALMajorObjectShadow_GetMetadataItem(GDALMajorObjectShadow *self,char const *pszName,char const *pszDomain=""){
    return GDALGetMetadataItem( self, pszName, pszDomain);
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadataItem(GDALMajorObjectShadow *self,char const *pszName,char const *pszValue,char const *pszDomain=""){
    return GDALSetMetadataItem( self, pszName, pszValue, pszDomain);
  }
SWIGINTERN OGRStyleTableShadow *new_OGRStyleTableShadow(){
        return (OGRStyleTableShadow*) OGR_STBL_Create();
   }
SWIGINTERN void delete_OGRStyleTableShadow(OGRStyleTableShadow *self){
        OGR_STBL_Destroy( (OGRStyleTableH) self );
   }
SWIGINTERN int OGRStyleTableShadow_AddStyle(OGRStyleTableShadow *self,char const *pszName,char const *pszStyleString){
        return OGR_STBL_AddStyle( (OGRStyleTableH) self, pszName, pszStyleString);
   }
SWIGINTERN int OGRStyleTableShadow_LoadStyleTable(OGRStyleTableShadow *self,char const *utf8_path){
        return OGR_STBL_LoadStyleTable( (OGRStyleTableH) self, utf8_path );
   }
SWIGINTERN int OGRStyleTableShadow_SaveStyleTable(OGRStyleTableShadow *self,char const *utf8_path){
        return OGR_STBL_SaveStyleTable( (OGRStyleTableH) self, utf8_path );
   }
SWIGINTERN char const *OGRStyleTableShadow_Find(OGRStyleTableShadow *self,char const *pszName){
        return OGR_STBL_Find( (OGRStyleTableH) self, pszName );
   }
SWIGINTERN void OGRStyleTableShadow_ResetStyleStringReading(OGRStyleTableShadow *self){
        OGR_STBL_ResetStyleStringReading( (OGRStyleTableH) self );
   }
SWIGINTERN char const *OGRStyleTableShadow_GetNextStyle(OGRStyleTableShadow *self){
        return OGR_STBL_GetNextStyle( (OGRStyleTableH) self );
   }
SWIGINTERN char const *OGRStyleTableShadow_GetLastStyleName(OGRStyleTableShadow *self){
        return OGR_STBL_GetLastStyleName( (OGRStyleTableH) self );
   }
SWIGINTERN OGRDataSourceShadow *OGRDriverShadow_CreateDataSource(OGRDriverShadow *self,char const *utf8_path,char **options=0){
    OGRDataSourceShadow *ds = (OGRDataSourceShadow*) OGR_Dr_CreateDataSource( self, utf8_path, options);
    return ds;
  }
SWIGINTERN OGRDataSourceShadow *OGRDriverShadow_CopyDataSource(OGRDriverShadow *self,OGRDataSourceShadow *copy_ds,char const *utf8_path,char **options=0){
    OGRDataSourceShadow *ds = (OGRDataSourceShadow*) OGR_Dr_CopyDataSource(self, copy_ds, utf8_path, options);
    return ds;
  }
SWIGINTERN OGRDataSourceShadow *OGRDriverShadow_Open(OGRDriverShadow *self,char const *utf8_path,int update=0){
    CPLErrorReset();
    OGRDataSourceShadow* ds = (OGRDataSourceShadow*) OGR_Dr_Open(self, utf8_path, update);
    if( CPLGetLastErrorType() == CE_Failure && ds != NULL )
    {
        CPLDebug(
            "SWIG",
            "OGR_Dr_Open() succeeded, but an error is posted, so we destroy"
            " the datasource and fail at swig level.\nError:%s",
            CPLGetLastErrorMsg() );
        OGRReleaseDataSource(ds);
        ds = NULL;
    }
    return ds;
  }
SWIGINTERN int OGRDriverShadow_DeleteDataSource(OGRDriverShadow *self,char const *utf8_path){

    return OGR_Dr_DeleteDataSource( self, utf8_path );
  }
SWIGINTERN bool OGRDriverShadow_TestCapability(OGRDriverShadow *self,char const *cap){
    return (OGR_Dr_TestCapability(self, cap) > 0);
  }
SWIGINTERN void OGRDriverShadow_Register(OGRDriverShadow *self){
    OGRRegisterDriver( self );
  }
SWIGINTERN void OGRDriverShadow_Deregister(OGRDriverShadow *self){
    OGRDeregisterDriver( self );
  }
SWIGINTERN void delete_OGRDataSourceShadow(OGRDataSourceShadow *self){
    OGRReleaseDataSource(self);
  }
SWIGINTERN int OGRDataSourceShadow_GetRefCount(OGRDataSourceShadow *self){
    return OGR_DS_GetRefCount(self);
  }
SWIGINTERN int OGRDataSourceShadow_GetSummaryRefCount(OGRDataSourceShadow *self){
    return OGR_DS_GetSummaryRefCount(self);
  }
SWIGINTERN int OGRDataSourceShadow_GetLayerCount(OGRDataSourceShadow *self){
    return OGR_DS_GetLayerCount(self);
  }
SWIGINTERN OGRDriverShadow *OGRDataSourceShadow_GetDriver(OGRDataSourceShadow *self){
    return (OGRDriverShadow *) OGR_DS_GetDriver( self );
  }
SWIGINTERN OGRErr OGRDataSourceShadow_DeleteLayer(OGRDataSourceShadow *self,int index){
    return OGR_DS_DeleteLayer(self, index);
  }
SWIGINTERN OGRErr OGRDataSourceShadow_SyncToDisk(OGRDataSourceShadow *self){
    return OGR_DS_SyncToDisk(self);
  }
SWIGINTERN void OGRDataSourceShadow_FlushCache(OGRDataSourceShadow *self){
    GDALFlushCache( self );
  }
SWIGINTERN OGRLayerShadow *OGRDataSourceShadow_CreateLayer(OGRDataSourceShadow *self,char const *name,OSRSpatialReferenceShadow *srs=NULL,OGRwkbGeometryType geom_type=wkbUnknown,char **options=0){
    OGRLayerShadow* layer = (OGRLayerShadow*) OGR_DS_CreateLayer( self,
								  name,
								  srs,
								  geom_type,
								  options);
    return layer;
  }
SWIGINTERN OGRLayerShadow *OGRDataSourceShadow_CopyLayer(OGRDataSourceShadow *self,OGRLayerShadow *src_layer,char const *new_name,char **options=0){
    OGRLayerShadow* layer = (OGRLayerShadow*) OGR_DS_CopyLayer( self,
                                                      src_layer,
                                                      new_name,
                                                      options);
    return layer;
  }
SWIGINTERN OGRLayerShadow *OGRDataSourceShadow_GetLayerByIndex(OGRDataSourceShadow *self,int index=0){

    OGRLayerShadow* layer = (OGRLayerShadow*) OGR_DS_GetLayer(self, index);
    return layer;
  }
SWIGINTERN OGRLayerShadow *OGRDataSourceShadow_GetLayerByName(OGRDataSourceShadow *self,char const *layer_name){
    OGRLayerShadow* layer = (OGRLayerShadow*) OGR_DS_GetLayerByName(self, layer_name);
    return layer;
  }
SWIGINTERN bool OGRDataSourceShadow_TestCapability(OGRDataSourceShadow *self,char const *cap){
    return (OGR_DS_TestCapability(self, cap) > 0);
  }
SWIGINTERN OGRLayerShadow *OGRDataSourceShadow_ExecuteSQL(OGRDataSourceShadow *self,char const *statement,OGRGeometryShadow *spatialFilter=NULL,char const *dialect=""){
    OGRLayerShadow* layer = (OGRLayerShadow*) OGR_DS_ExecuteSQL((OGRDataSourceShadow*)self,
                                                      statement,
                                                      spatialFilter,
                                                      dialect);
    return layer;
  }
SWIGINTERN void OGRDataSourceShadow_ReleaseResultSet(OGRDataSourceShadow *self,OGRLayerShadow *layer){
    OGR_DS_ReleaseResultSet(self, layer);
  }
SWIGINTERN OGRStyleTableShadow *OGRDataSourceShadow_GetStyleTable(OGRDataSourceShadow *self){
    return (OGRStyleTableShadow*) OGR_DS_GetStyleTable(self);
  }
SWIGINTERN void OGRDataSourceShadow_SetStyleTable(OGRDataSourceShadow *self,OGRStyleTableShadow *table){
    if( table != NULL )
        OGR_DS_SetStyleTable(self, (OGRStyleTableH) table);
  }
SWIGINTERN OGRErr OGRDataSourceShadow_StartTransaction(OGRDataSourceShadow *self,int force=FALSE){
    return GDALDatasetStartTransaction(self, force);
  }
SWIGINTERN OGRErr OGRDataSourceShadow_CommitTransaction(OGRDataSourceShadow *self){
    return GDALDatasetCommitTransaction(self);
  }
SWIGINTERN OGRErr OGRDataSourceShadow_RollbackTransaction(OGRDataSourceShadow *self){
    return GDALDatasetRollbackTransaction(self);
  }
SWIGINTERN int OGRLayerShadow_GetRefCount(OGRLayerShadow *self){
    return OGR_L_GetRefCount(self);
  }
SWIGINTERN void OGRLayerShadow_SetSpatialFilter__SWIG_0(OGRLayerShadow *self,OGRGeometryShadow *filter){
    OGR_L_SetSpatialFilter (self, filter);
  }
SWIGINTERN void OGRLayerShadow_SetSpatialFilterRect__SWIG_0(OGRLayerShadow *self,double minx,double miny,double maxx,double maxy){
    OGR_L_SetSpatialFilterRect(self, minx, miny, maxx, maxy);
  }
SWIGINTERN void OGRLayerShadow_SetSpatialFilter__SWIG_1(OGRLayerShadow *self,int iGeomField,OGRGeometryShadow *filter){
    OGR_L_SetSpatialFilterEx (self, iGeomField, filter);
  }
SWIGINTERN void OGRLayerShadow_SetSpatialFilterRect__SWIG_1(OGRLayerShadow *self,int iGeomField,double minx,double miny,double maxx,double maxy){
    OGR_L_SetSpatialFilterRectEx(self, iGeomField, minx, miny, maxx, maxy);
  }
SWIGINTERN OGRGeometryShadow *OGRLayerShadow_GetSpatialFilter(OGRLayerShadow *self){
    return (OGRGeometryShadow *) OGR_L_GetSpatialFilter(self);
  }
SWIGINTERN OGRErr OGRLayerShadow_SetAttributeFilter(OGRLayerShadow *self,char *filter_string){
    return OGR_L_SetAttributeFilter((OGRLayerShadow*)self, filter_string);
  }
SWIGINTERN void OGRLayerShadow_ResetReading(OGRLayerShadow *self){
    OGR_L_ResetReading(self);
  }
SWIGINTERN char const *OGRLayerShadow_GetName(OGRLayerShadow *self){
    return OGR_L_GetName(self);
  }
SWIGINTERN OGRwkbGeometryType OGRLayerShadow_GetGeomType(OGRLayerShadow *self){
    return (OGRwkbGeometryType) OGR_L_GetGeomType(self);
  }
SWIGINTERN char const *OGRLayerShadow_GetGeometryColumn(OGRLayerShadow *self){
    return OGR_L_GetGeometryColumn(self);
  }
SWIGINTERN char const *OGRLayerShadow_GetFIDColumn(OGRLayerShadow *self){
    return OGR_L_GetFIDColumn(self);
  }
SWIGINTERN OGRFeatureShadow *OGRLayerShadow_GetFeature(OGRLayerShadow *self,GIntBig fid){
    return (OGRFeatureShadow*) OGR_L_GetFeature(self, fid);
  }
SWIGINTERN OGRFeatureShadow *OGRLayerShadow_GetNextFeature(OGRLayerShadow *self){
    return (OGRFeatureShadow*) OGR_L_GetNextFeature(self);
  }
SWIGINTERN OGRErr OGRLayerShadow_SetNextByIndex(OGRLayerShadow *self,GIntBig new_index){
    return OGR_L_SetNextByIndex(self, new_index);
  }
SWIGINTERN OGRErr OGRLayerShadow_SetFeature(OGRLayerShadow *self,OGRFeatureShadow *feature){
    return OGR_L_SetFeature(self, feature);
  }
SWIGINTERN OGRErr OGRLayerShadow_CreateFeature(OGRLayerShadow *self,OGRFeatureShadow *feature){
    return OGR_L_CreateFeature(self, feature);
  }
SWIGINTERN OGRErr OGRLayerShadow_DeleteFeature(OGRLayerShadow *self,GIntBig fid){
    return OGR_L_DeleteFeature(self, fid);
  }
SWIGINTERN OGRErr OGRLayerShadow_SyncToDisk(OGRLayerShadow *self){
    return OGR_L_SyncToDisk(self);
  }
SWIGINTERN OGRFeatureDefnShadow *OGRLayerShadow_GetLayerDefn(OGRLayerShadow *self){
    return (OGRFeatureDefnShadow*) OGR_L_GetLayerDefn(self);
  }
SWIGINTERN GIntBig OGRLayerShadow_GetFeatureCount(OGRLayerShadow *self,int force=1){
    return OGR_L_GetFeatureCount(self, force);
  }
SWIGINTERN OGRErr OGRLayerShadow_GetExtent(OGRLayerShadow *self,double argout[4],int force=1){



    return OGR_L_GetExtent(self, (OGREnvelope*)argout, force);
  }
SWIGINTERN bool OGRLayerShadow_TestCapability(OGRLayerShadow *self,char const *cap){
    return (OGR_L_TestCapability(self, cap) > 0);
  }
SWIGINTERN OGRErr OGRLayerShadow_CreateField(OGRLayerShadow *self,OGRFieldDefnShadow *field_def,int approx_ok=1){
    return OGR_L_CreateField(self, field_def, approx_ok);
  }
SWIGINTERN OGRErr OGRLayerShadow_DeleteField(OGRLayerShadow *self,int iField){
    return OGR_L_DeleteField(self, iField);
  }
SWIGINTERN OGRErr OGRLayerShadow_ReorderField(OGRLayerShadow *self,int iOldFieldPos,int iNewFieldPos){
    return OGR_L_ReorderField(self, iOldFieldPos, iNewFieldPos);
  }
SWIGINTERN OGRErr OGRLayerShadow_ReorderFields(OGRLayerShadow *self,int nList,int *pList){
    if (nList != OGR_FD_GetFieldCount(OGR_L_GetLayerDefn(self)))
    {
      CPLError(CE_Failure, CPLE_IllegalArg,
               "List should have %d elements",
               OGR_FD_GetFieldCount(OGR_L_GetLayerDefn(self)));
      return OGRERR_FAILURE;
    }
    return OGR_L_ReorderFields(self, pList);
  }
SWIGINTERN OGRErr OGRLayerShadow_AlterFieldDefn(OGRLayerShadow *self,int iField,OGRFieldDefnShadow *field_def,int nFlags){
    return OGR_L_AlterFieldDefn(self, iField, field_def, nFlags);
  }
SWIGINTERN OGRErr OGRLayerShadow_CreateGeomField(OGRLayerShadow *self,OGRGeomFieldDefnShadow *field_def,int approx_ok=1){
    return OGR_L_CreateGeomField(self, field_def, approx_ok);
  }
SWIGINTERN OGRErr OGRLayerShadow_StartTransaction(OGRLayerShadow *self){
    return OGR_L_StartTransaction(self);
  }
SWIGINTERN OGRErr OGRLayerShadow_CommitTransaction(OGRLayerShadow *self){
    return OGR_L_CommitTransaction(self);
  }
SWIGINTERN OGRErr OGRLayerShadow_RollbackTransaction(OGRLayerShadow *self){
    return OGR_L_RollbackTransaction(self);
  }
SWIGINTERN int OGRLayerShadow_FindFieldIndex(OGRLayerShadow *self,char const *pszFieldName,int bExactMatch){
    return OGR_L_FindFieldIndex(self, pszFieldName, bExactMatch );
  }
SWIGINTERN OSRSpatialReferenceShadow *OGRLayerShadow_GetSpatialRef(OGRLayerShadow *self){
    OGRSpatialReferenceH ref =  OGR_L_GetSpatialRef(self);
    if( ref )
        OSRReference(ref);
    return (OSRSpatialReferenceShadow*) ref;
  }
SWIGINTERN GIntBig OGRLayerShadow_GetFeaturesRead(OGRLayerShadow *self){
    return OGR_L_GetFeaturesRead(self);
  }
SWIGINTERN OGRErr OGRLayerShadow_SetIgnoredFields(OGRLayerShadow *self,char const **options){
    return OGR_L_SetIgnoredFields( self, options );
  }
SWIGINTERN OGRErr OGRLayerShadow_Intersection(OGRLayerShadow *self,OGRLayerShadow *method_layer,OGRLayerShadow *result_layer,char **options=NULL,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return OGR_L_Intersection( self, method_layer, result_layer, options, callback, callback_data );
  }
SWIGINTERN OGRErr OGRLayerShadow_Union(OGRLayerShadow *self,OGRLayerShadow *method_layer,OGRLayerShadow *result_layer,char **options=NULL,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return OGR_L_Union( self, method_layer, result_layer, options, callback, callback_data );
  }
SWIGINTERN OGRErr OGRLayerShadow_SymDifference(OGRLayerShadow *self,OGRLayerShadow *method_layer,OGRLayerShadow *result_layer,char **options=NULL,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return OGR_L_SymDifference( self, method_layer, result_layer, options, callback, callback_data );
  }
SWIGINTERN OGRErr OGRLayerShadow_Identity(OGRLayerShadow *self,OGRLayerShadow *method_layer,OGRLayerShadow *result_layer,char **options=NULL,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return OGR_L_Identity( self, method_layer, result_layer, options, callback, callback_data );
  }
SWIGINTERN OGRErr OGRLayerShadow_Update(OGRLayerShadow *self,OGRLayerShadow *method_layer,OGRLayerShadow *result_layer,char **options=NULL,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return OGR_L_Update( self, method_layer, result_layer, options, callback, callback_data );
  }
SWIGINTERN OGRErr OGRLayerShadow_Clip(OGRLayerShadow *self,OGRLayerShadow *method_layer,OGRLayerShadow *result_layer,char **options=NULL,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return OGR_L_Clip( self, method_layer, result_layer, options, callback, callback_data );
  }
SWIGINTERN OGRErr OGRLayerShadow_Erase(OGRLayerShadow *self,OGRLayerShadow *method_layer,OGRLayerShadow *result_layer,char **options=NULL,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return OGR_L_Erase( self, method_layer, result_layer, options, callback, callback_data );
  }
SWIGINTERN OGRStyleTableShadow *OGRLayerShadow_GetStyleTable(OGRLayerShadow *self){
    return (OGRStyleTableShadow*) OGR_L_GetStyleTable(self);
  }
SWIGINTERN void OGRLayerShadow_SetStyleTable(OGRLayerShadow *self,OGRStyleTableShadow *table){
    if( table != NULL )
        OGR_L_SetStyleTable(self, (OGRStyleTableH) table);
  }
SWIGINTERN void delete_OGRFeatureShadow(OGRFeatureShadow *self){
    OGR_F_Destroy(self);
  }
SWIGINTERN OGRFeatureShadow *new_OGRFeatureShadow(OGRFeatureDefnShadow *feature_def){
      return (OGRFeatureShadow*) OGR_F_Create( feature_def );
  }
SWIGINTERN OGRFeatureDefnShadow *OGRFeatureShadow_GetDefnRef(OGRFeatureShadow *self){
    return (OGRFeatureDefnShadow*) OGR_F_GetDefnRef(self);
  }
SWIGINTERN OGRErr OGRFeatureShadow_SetGeometry(OGRFeatureShadow *self,OGRGeometryShadow *geom){
    return OGR_F_SetGeometry(self, geom);
  }
SWIGINTERN OGRErr OGRFeatureShadow_SetGeometryDirectly(OGRFeatureShadow *self,OGRGeometryShadow *geom){
    return OGR_F_SetGeometryDirectly(self, geom);
  }
SWIGINTERN OGRGeometryShadow *OGRFeatureShadow_GetGeometryRef(OGRFeatureShadow *self){
    return (OGRGeometryShadow*) OGR_F_GetGeometryRef(self);
  }
SWIGINTERN OGRErr OGRFeatureShadow_SetGeomField__SWIG_0(OGRFeatureShadow *self,int iField,OGRGeometryShadow *geom){
    return OGR_F_SetGeomField(self, iField, geom);
  }
SWIGINTERN OGRErr OGRFeatureShadow_SetGeomField__SWIG_1(OGRFeatureShadow *self,char const *name,OGRGeometryShadow *geom){
      int iField = OGR_F_GetGeomFieldIndex(self, name);
      if (iField == -1)
      {
        CPLError(CE_Failure, 1, "No such field: '%s'", name);
        return OGRERR_FAILURE;
      }
      else
        return OGR_F_SetGeomField(self, iField, geom);
  }
SWIGINTERN OGRErr OGRFeatureShadow_SetGeomFieldDirectly__SWIG_0(OGRFeatureShadow *self,int iField,OGRGeometryShadow *geom){
    return OGR_F_SetGeomFieldDirectly(self, iField, geom);
  }
SWIGINTERN OGRErr OGRFeatureShadow_SetGeomFieldDirectly__SWIG_1(OGRFeatureShadow *self,char const *name,OGRGeometryShadow *geom){
      int iField = OGR_F_GetGeomFieldIndex(self, name);
      if (iField == -1)
      {
        CPLError(CE_Failure, 1, "No such field: '%s'", name);
        return OGRERR_FAILURE;
      }
      else
        return OGR_F_SetGeomFieldDirectly(self, iField, geom);
  }
SWIGINTERN OGRGeometryShadow *OGRFeatureShadow_GetGeomFieldRef__SWIG_0(OGRFeatureShadow *self,int iField){
    return (OGRGeometryShadow*) OGR_F_GetGeomFieldRef(self, iField);
  }
SWIGINTERN OGRGeometryShadow *OGRFeatureShadow_GetGeomFieldRef__SWIG_1(OGRFeatureShadow *self,char const *name){
    int i = OGR_F_GetGeomFieldIndex(self, name);
    if (i == -1)
    {
      CPLError(CE_Failure, 1, "No such field: '%s'", name);
      return NULL;
    }
    else
      return (OGRGeometryShadow*) OGR_F_GetGeomFieldRef(self, i);
  }
SWIGINTERN OGRFeatureShadow *OGRFeatureShadow_Clone(OGRFeatureShadow *self){
    return (OGRFeatureShadow*) OGR_F_Clone(self);
  }
SWIGINTERN bool OGRFeatureShadow_Equal(OGRFeatureShadow *self,OGRFeatureShadow *feature){
    return (OGR_F_Equal(self, feature) > 0);
  }
SWIGINTERN int OGRFeatureShadow_GetFieldCount(OGRFeatureShadow *self){
    return OGR_F_GetFieldCount(self);
  }
SWIGINTERN OGRFieldDefnShadow *OGRFeatureShadow_GetFieldDefnRef__SWIG_0(OGRFeatureShadow *self,int id){
    return (OGRFieldDefnShadow *) OGR_F_GetFieldDefnRef(self, id);
  }
SWIGINTERN OGRFieldDefnShadow *OGRFeatureShadow_GetFieldDefnRef__SWIG_1(OGRFeatureShadow *self,char const *name){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1)
	  CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
	  return (OGRFieldDefnShadow *) OGR_F_GetFieldDefnRef(self, i);
      return NULL;
  }
SWIGINTERN int OGRFeatureShadow_GetGeomFieldCount(OGRFeatureShadow *self){
    return OGR_F_GetGeomFieldCount(self);
  }
SWIGINTERN OGRGeomFieldDefnShadow *OGRFeatureShadow_GetGeomFieldDefnRef__SWIG_0(OGRFeatureShadow *self,int id){
    return (OGRGeomFieldDefnShadow *) OGR_F_GetGeomFieldDefnRef(self, id);
  }
SWIGINTERN OGRGeomFieldDefnShadow *OGRFeatureShadow_GetGeomFieldDefnRef__SWIG_1(OGRFeatureShadow *self,char const *name){
      int i = OGR_F_GetGeomFieldIndex(self, name);
      if (i == -1)
      CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
      return (OGRGeomFieldDefnShadow *) OGR_F_GetGeomFieldDefnRef(self, i);
      return NULL;
  }
SWIGINTERN char const *OGRFeatureShadow_GetFieldAsString__SWIG_0(OGRFeatureShadow *self,int id){
    return (const char *) OGR_F_GetFieldAsString(self, id);
  }
SWIGINTERN char const *OGRFeatureShadow_GetFieldAsString__SWIG_1(OGRFeatureShadow *self,char const *name){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1)
	  CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
	  return (const char *) OGR_F_GetFieldAsString(self, i);
      return NULL;
  }
SWIGINTERN int OGRFeatureShadow_GetFieldAsInteger__SWIG_0(OGRFeatureShadow *self,int id){
    return OGR_F_GetFieldAsInteger(self, id);
  }
SWIGINTERN int OGRFeatureShadow_GetFieldAsInteger__SWIG_1(OGRFeatureShadow *self,char const *name){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1)
	  CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
	  return OGR_F_GetFieldAsInteger(self, i);
      return 0;
  }
SWIGINTERN GIntBig OGRFeatureShadow_GetFieldAsInteger64__SWIG_0(OGRFeatureShadow *self,int id){
    return OGR_F_GetFieldAsInteger64(self, id);
  }
SWIGINTERN GIntBig OGRFeatureShadow_GetFieldAsInteger64__SWIG_1(OGRFeatureShadow *self,char const *name){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1)
      CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
      return OGR_F_GetFieldAsInteger64(self, i);
      return 0;
  }
SWIGINTERN double OGRFeatureShadow_GetFieldAsDouble__SWIG_0(OGRFeatureShadow *self,int id){
    return OGR_F_GetFieldAsDouble(self, id);
  }
SWIGINTERN double OGRFeatureShadow_GetFieldAsDouble__SWIG_1(OGRFeatureShadow *self,char const *name){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1)
	  CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
	  return OGR_F_GetFieldAsDouble(self, i);
      return 0;
  }
SWIGINTERN void OGRFeatureShadow_GetFieldAsDateTime(OGRFeatureShadow *self,int id,int *pnYear,int *pnMonth,int *pnDay,int *pnHour,int *pnMinute,float *pfSecond,int *pnTZFlag){
      OGR_F_GetFieldAsDateTimeEx(self, id, pnYear, pnMonth, pnDay,
			       pnHour, pnMinute, pfSecond,
			       pnTZFlag);
  }
SWIGINTERN void OGRFeatureShadow_GetFieldAsIntegerList(OGRFeatureShadow *self,int id,int *nLen,int const **pList){
      *pList = OGR_F_GetFieldAsIntegerList(self, id, nLen);
  }
SWIGINTERN void OGRFeatureShadow_GetFieldAsDoubleList(OGRFeatureShadow *self,int id,int *nLen,double const **pList){
      *pList = OGR_F_GetFieldAsDoubleList(self, id, nLen);
  }
SWIGINTERN void OGRFeatureShadow_GetFieldAsStringList(OGRFeatureShadow *self,int id,char ***pList){
      *pList = OGR_F_GetFieldAsStringList(self, id);
  }
SWIGINTERN OGRErr OGRFeatureShadow_GetFieldAsBinary__SWIG_0(OGRFeatureShadow *self,int id,int *nLen,char **pBuf){
    GByte* pabyBlob = OGR_F_GetFieldAsBinary(self, id, nLen);
    *pBuf = (char*)malloc(*nLen);
    memcpy(*pBuf, pabyBlob, *nLen);
    return OGRERR_NONE;
  }
SWIGINTERN OGRErr OGRFeatureShadow_GetFieldAsBinary__SWIG_1(OGRFeatureShadow *self,char const *name,int *nLen,char **pBuf){
      int id = OGR_F_GetFieldIndex(self, name);
      if (id == -1)
      {
        CPLError(CE_Failure, 1, "No such field: '%s'", name);
        return OGRERR_FAILURE;
      }
      else
      {
        GByte* pabyBlob = OGR_F_GetFieldAsBinary(self, id, nLen);
        *pBuf = (char*)malloc(*nLen);
        memcpy(*pBuf, pabyBlob, *nLen);
        return OGRERR_NONE;
      }
  }
SWIGINTERN bool OGRFeatureShadow_IsFieldSet__SWIG_0(OGRFeatureShadow *self,int id){
    return (OGR_F_IsFieldSet(self, id) > 0);
  }
SWIGINTERN bool OGRFeatureShadow_IsFieldSet__SWIG_1(OGRFeatureShadow *self,char const *name){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1)
	  CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
	  return (OGR_F_IsFieldSet(self, i) > 0);
      return false;
  }
SWIGINTERN int OGRFeatureShadow_GetFieldIndex(OGRFeatureShadow *self,char const *name){
      return OGR_F_GetFieldIndex(self, name);
  }
SWIGINTERN int OGRFeatureShadow_GetGeomFieldIndex(OGRFeatureShadow *self,char const *name){
      return OGR_F_GetGeomFieldIndex(self, name);
  }
SWIGINTERN GIntBig OGRFeatureShadow_GetFID(OGRFeatureShadow *self){
    return OGR_F_GetFID(self);
  }
SWIGINTERN OGRErr OGRFeatureShadow_SetFID(OGRFeatureShadow *self,GIntBig fid){
    return OGR_F_SetFID(self, fid);
  }
SWIGINTERN void OGRFeatureShadow_DumpReadable(OGRFeatureShadow *self){
    OGR_F_DumpReadable(self, NULL);
  }
SWIGINTERN void OGRFeatureShadow_UnsetField__SWIG_0(OGRFeatureShadow *self,int id){
    OGR_F_UnsetField(self, id);
  }
SWIGINTERN void OGRFeatureShadow_UnsetField__SWIG_1(OGRFeatureShadow *self,char const *name){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1)
	  CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
	  OGR_F_UnsetField(self, i);
  }
SWIGINTERN void OGRFeatureShadow_SetField__SWIG_0(OGRFeatureShadow *self,int id,char const *value){
    OGR_F_SetFieldString(self, id, value);
  }
SWIGINTERN void OGRFeatureShadow_SetField__SWIG_1(OGRFeatureShadow *self,char const *name,char const *value){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1)
	  CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
	  OGR_F_SetFieldString(self, i, value);
  }
SWIGINTERN void OGRFeatureShadow_SetFieldInteger64(OGRFeatureShadow *self,int id,GIntBig value){
    OGR_F_SetFieldInteger64(self, id, value);
  }
SWIGINTERN void OGRFeatureShadow_SetField__SWIG_2(OGRFeatureShadow *self,int id,int value){
    OGR_F_SetFieldInteger(self, id, value);
  }
SWIGINTERN void OGRFeatureShadow_SetField__SWIG_3(OGRFeatureShadow *self,char const *name,int value){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1)
	  CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
	  OGR_F_SetFieldInteger(self, i, value);
  }
SWIGINTERN void OGRFeatureShadow_SetField__SWIG_4(OGRFeatureShadow *self,int id,double value){
    OGR_F_SetFieldDouble(self, id, value);
  }
SWIGINTERN void OGRFeatureShadow_SetField__SWIG_5(OGRFeatureShadow *self,char const *name,double value){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1)
	  CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
	  OGR_F_SetFieldDouble(self, i, value);
  }
SWIGINTERN void OGRFeatureShadow_SetField__SWIG_6(OGRFeatureShadow *self,int id,int year,int month,int day,int hour,int minute,float second,int tzflag){
    OGR_F_SetFieldDateTimeEx(self, id, year, month, day,
                             hour, minute, second, 
                             tzflag);
  }
SWIGINTERN void OGRFeatureShadow_SetField__SWIG_7(OGRFeatureShadow *self,char const *name,int year,int month,int day,int hour,int minute,float second,int tzflag){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1)
	  CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
	  OGR_F_SetFieldDateTimeEx(self, i, year, month, day,
				 hour, minute, second, 
				 tzflag);
  }
SWIGINTERN void OGRFeatureShadow_SetFieldIntegerList(OGRFeatureShadow *self,int id,int nList,int *pList){
      OGR_F_SetFieldIntegerList(self, id, nList, pList);
  }
SWIGINTERN void OGRFeatureShadow_SetFieldDoubleList(OGRFeatureShadow *self,int id,int nList,double *pList){
      OGR_F_SetFieldDoubleList(self, id, nList, pList);
  }
SWIGINTERN void OGRFeatureShadow_SetFieldStringList(OGRFeatureShadow *self,int id,char **pList){
      OGR_F_SetFieldStringList(self, id, pList);
  }
SWIGINTERN void OGRFeatureShadow_SetFieldBinaryFromHexString__SWIG_0(OGRFeatureShadow *self,int id,char const *pszValue){
     int nBytes;
     GByte* pabyBuf = CPLHexToBinary(pszValue, &nBytes );
     OGR_F_SetFieldBinary(self, id, nBytes, pabyBuf);
     CPLFree(pabyBuf);
  }
SWIGINTERN void OGRFeatureShadow_SetFieldBinaryFromHexString__SWIG_1(OGRFeatureShadow *self,char const *name,char const *pszValue){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1)
        CPLError(CE_Failure, 1, "No such field: '%s'", name);
      else
      {
        int nBytes;
        GByte* pabyBuf = CPLHexToBinary(pszValue, &nBytes );
        OGR_F_SetFieldBinary(self, i, nBytes, pabyBuf);
        CPLFree(pabyBuf);
      }
  }
SWIGINTERN OGRErr OGRFeatureShadow_SetFrom(OGRFeatureShadow *self,OGRFeatureShadow *other,int forgiving=1){
    return OGR_F_SetFrom(self, other, forgiving);
  }
SWIGINTERN OGRErr OGRFeatureShadow_SetFromWithMap(OGRFeatureShadow *self,OGRFeatureShadow *other,int forgiving,int nList,int *pList){
    if (nList != OGR_F_GetFieldCount(other))
    {
        CPLError(CE_Failure, CPLE_AppDefined,
                 "The size of map doesn't match with the field count of the source feature");
        return OGRERR_FAILURE;
    }
    return OGR_F_SetFromWithMap(self, other, forgiving, pList);
  }
SWIGINTERN char const *OGRFeatureShadow_GetStyleString(OGRFeatureShadow *self){
    return (const char*) OGR_F_GetStyleString(self);
  }
SWIGINTERN void OGRFeatureShadow_SetStyleString(OGRFeatureShadow *self,char const *the_string){
    OGR_F_SetStyleString(self, the_string);
  }
SWIGINTERN OGRFieldType OGRFeatureShadow_GetFieldType__SWIG_0(OGRFeatureShadow *self,int id){
      OGRFieldDefnH fd = OGR_F_GetFieldDefnRef( self,  id );
      if (fd)
          return (OGRFieldType) OGR_Fld_GetType( fd );
      else
          return (OGRFieldType)0;
  }
SWIGINTERN OGRFieldType OGRFeatureShadow_GetFieldType__SWIG_1(OGRFeatureShadow *self,char const *name){
      int i = OGR_F_GetFieldIndex(self, name);
      if (i == -1) {
          CPLError(CE_Failure, 1, "No such field: '%s'", name);
          return (OGRFieldType)0;
      } else
          return (OGRFieldType) OGR_Fld_GetType( OGR_F_GetFieldDefnRef( self, i ) );
  }
SWIGINTERN int OGRFeatureShadow_Validate(OGRFeatureShadow *self,int flags=OGR_F_VAL_ALL,int bEmitError=TRUE){
    return OGR_F_Validate(self, flags, bEmitError);
  }
SWIGINTERN void OGRFeatureShadow_FillUnsetWithDefault(OGRFeatureShadow *self,int bNotNullableOnly=FALSE,char **options=NULL){
    OGR_F_FillUnsetWithDefault(self, bNotNullableOnly, options );
  }
SWIGINTERN char const *OGRFeatureShadow_GetNativeData(OGRFeatureShadow *self){
    return OGR_F_GetNativeData(self);
  }
SWIGINTERN char const *OGRFeatureShadow_GetNativeMediaType(OGRFeatureShadow *self){
    return OGR_F_GetNativeMediaType(self);
  }
SWIGINTERN void OGRFeatureShadow_SetNativeData(OGRFeatureShadow *self,char const *nativeData){
    OGR_F_SetNativeData(self, nativeData);
  }
SWIGINTERN void OGRFeatureShadow_SetNativeMediaType(OGRFeatureShadow *self,char const *nativeMediaType){
    OGR_F_SetNativeMediaType(self, nativeMediaType);
  }

    static int ValidateOGRGeometryType(OGRwkbGeometryType field_type)
    {
        switch(field_type)
        {
            case wkbUnknown:
            case wkbPoint:
            case wkbLineString:
            case wkbPolygon:
            case wkbMultiPoint:
            case wkbMultiLineString:
            case wkbMultiPolygon:
            case wkbGeometryCollection:
            case wkbCircularString:
            case wkbCompoundCurve:
            case wkbCurvePolygon:
            case wkbMultiCurve:
            case wkbMultiSurface:
            case wkbNone:
            /*case wkbLinearRing:*/
            case wkbCircularStringZ:
            case wkbCompoundCurveZ:
            case wkbCurvePolygonZ:
            case wkbMultiCurveZ:
            case wkbMultiSurfaceZ:
            case wkbPoint25D:
            case wkbLineString25D:
            case wkbPolygon25D:
            case wkbMultiPoint25D:
            case wkbMultiLineString25D:
            case wkbMultiPolygon25D:
            case wkbGeometryCollection25D:
                return TRUE;
            default:
                CPLError(CE_Failure, CPLE_IllegalArg, "Illegal geometry type value");
                return FALSE;
        }
    }

SWIGINTERN void delete_OGRFeatureDefnShadow(OGRFeatureDefnShadow *self){
    /*OGR_FD_Destroy(self);*/
    OGR_FD_Release( OGRFeatureDefnH(self) );
  }
SWIGINTERN OGRFeatureDefnShadow *new_OGRFeatureDefnShadow(char const *name_null_ok=NULL){
    OGRFeatureDefnH h = OGR_FD_Create(name_null_ok);
    OGR_FD_Reference(h);
    return (OGRFeatureDefnShadow* )h;
  }
SWIGINTERN char const *OGRFeatureDefnShadow_GetName(OGRFeatureDefnShadow *self){
    return OGR_FD_GetName(self);
  }
SWIGINTERN int OGRFeatureDefnShadow_GetFieldCount(OGRFeatureDefnShadow *self){
    return OGR_FD_GetFieldCount(self);
  }
SWIGINTERN OGRFieldDefnShadow *OGRFeatureDefnShadow_GetFieldDefn(OGRFeatureDefnShadow *self,int i){
    return (OGRFieldDefnShadow*) OGR_FD_GetFieldDefn(self, i);
  }
SWIGINTERN int OGRFeatureDefnShadow_GetFieldIndex(OGRFeatureDefnShadow *self,char const *name){
      return OGR_FD_GetFieldIndex(self, name);
  }
SWIGINTERN void OGRFeatureDefnShadow_AddFieldDefn(OGRFeatureDefnShadow *self,OGRFieldDefnShadow *defn){
    OGR_FD_AddFieldDefn(self, defn);
  }
SWIGINTERN int OGRFeatureDefnShadow_GetGeomFieldCount(OGRFeatureDefnShadow *self){
    return OGR_FD_GetGeomFieldCount(self);
  }
SWIGINTERN OGRGeomFieldDefnShadow *OGRFeatureDefnShadow_GetGeomFieldDefn(OGRFeatureDefnShadow *self,int i){
    return (OGRGeomFieldDefnShadow*) OGR_FD_GetGeomFieldDefn(self, i);
  }
SWIGINTERN int OGRFeatureDefnShadow_GetGeomFieldIndex(OGRFeatureDefnShadow *self,char const *name){
      return OGR_FD_GetGeomFieldIndex(self, name);
  }
SWIGINTERN void OGRFeatureDefnShadow_AddGeomFieldDefn(OGRFeatureDefnShadow *self,OGRGeomFieldDefnShadow *defn){
    OGR_FD_AddGeomFieldDefn(self, defn);
  }
SWIGINTERN OGRErr OGRFeatureDefnShadow_DeleteGeomFieldDefn(OGRFeatureDefnShadow *self,int idx){
    return OGR_FD_DeleteGeomFieldDefn(self, idx);
  }
SWIGINTERN OGRwkbGeometryType OGRFeatureDefnShadow_GetGeomType(OGRFeatureDefnShadow *self){
    return (OGRwkbGeometryType) OGR_FD_GetGeomType(self);
  }
SWIGINTERN void OGRFeatureDefnShadow_SetGeomType(OGRFeatureDefnShadow *self,OGRwkbGeometryType geom_type){
    if( ValidateOGRGeometryType(geom_type) )
        OGR_FD_SetGeomType(self, geom_type);
  }
SWIGINTERN int OGRFeatureDefnShadow_GetReferenceCount(OGRFeatureDefnShadow *self){
    return OGR_FD_GetReferenceCount(self);
  }
SWIGINTERN int OGRFeatureDefnShadow_IsGeometryIgnored(OGRFeatureDefnShadow *self){
    return OGR_FD_IsGeometryIgnored(self);
  }
SWIGINTERN void OGRFeatureDefnShadow_SetGeometryIgnored(OGRFeatureDefnShadow *self,int bIgnored){
    return OGR_FD_SetGeometryIgnored(self,bIgnored);
  }
SWIGINTERN int OGRFeatureDefnShadow_IsStyleIgnored(OGRFeatureDefnShadow *self){
    return OGR_FD_IsStyleIgnored(self);
  }
SWIGINTERN void OGRFeatureDefnShadow_SetStyleIgnored(OGRFeatureDefnShadow *self,int bIgnored){
    return OGR_FD_SetStyleIgnored(self,bIgnored);
  }
SWIGINTERN int OGRFeatureDefnShadow_IsSame(OGRFeatureDefnShadow *self,OGRFeatureDefnShadow *other_defn){
    return OGR_FD_IsSame(self, other_defn);
  }

    static int ValidateOGRFieldType(OGRFieldType field_type)
    {
        switch(field_type)
        {
            case OFTInteger:
            case OFTIntegerList:
            case OFTReal:
            case OFTRealList:
            case OFTString:
            case OFTStringList:
            case OFTBinary:
            case OFTDate:
            case OFTTime:
            case OFTDateTime:
            case OFTInteger64:
            case OFTInteger64List:
                return TRUE;
            default:
                CPLError(CE_Failure, CPLE_IllegalArg, "Illegal field type value");
                return FALSE;
        }
    }


    static int ValidateOGRFieldSubType(OGRFieldSubType field_subtype)
    {
        switch(field_subtype)
        {
            case OFSTNone:
            case OFSTBoolean:
            case OFSTInt16:
            case OFSTFloat32:
                return TRUE;
            default:
                CPLError(CE_Failure, CPLE_IllegalArg, "Illegal field subtype value");
                return FALSE;
        }
    }

SWIGINTERN void delete_OGRFieldDefnShadow(OGRFieldDefnShadow *self){
    OGR_Fld_Destroy(self);
  }
SWIGINTERN OGRFieldDefnShadow *new_OGRFieldDefnShadow(char const *name_null_ok="unnamed",OGRFieldType field_type=OFTString){
    if (ValidateOGRFieldType(field_type))
        return (OGRFieldDefnShadow*) OGR_Fld_Create(name_null_ok, field_type);
    else
        return NULL;
  }
SWIGINTERN char const *OGRFieldDefnShadow_GetName(OGRFieldDefnShadow *self){
    return (const char *) OGR_Fld_GetNameRef(self);
  }
SWIGINTERN char const *OGRFieldDefnShadow_GetNameRef(OGRFieldDefnShadow *self){
    return (const char *) OGR_Fld_GetNameRef(self);
  }
SWIGINTERN void OGRFieldDefnShadow_SetName(OGRFieldDefnShadow *self,char const *name){
    OGR_Fld_SetName(self, name);
  }
SWIGINTERN OGRFieldType OGRFieldDefnShadow_GetType(OGRFieldDefnShadow *self){
    return OGR_Fld_GetType(self);
  }
SWIGINTERN void OGRFieldDefnShadow_SetType(OGRFieldDefnShadow *self,OGRFieldType type){
    if (ValidateOGRFieldType(type))
        OGR_Fld_SetType(self, type);
  }
SWIGINTERN OGRFieldSubType OGRFieldDefnShadow_GetSubType(OGRFieldDefnShadow *self){
    return OGR_Fld_GetSubType(self);
  }
SWIGINTERN void OGRFieldDefnShadow_SetSubType(OGRFieldDefnShadow *self,OGRFieldSubType type){
    if (ValidateOGRFieldSubType(type))
        OGR_Fld_SetSubType(self, type);
  }
SWIGINTERN OGRJustification OGRFieldDefnShadow_GetJustify(OGRFieldDefnShadow *self){
    return OGR_Fld_GetJustify(self);
  }
SWIGINTERN void OGRFieldDefnShadow_SetJustify(OGRFieldDefnShadow *self,OGRJustification justify){
    OGR_Fld_SetJustify(self, justify);
  }
SWIGINTERN int OGRFieldDefnShadow_GetWidth(OGRFieldDefnShadow *self){
    return OGR_Fld_GetWidth(self);
  }
SWIGINTERN void OGRFieldDefnShadow_SetWidth(OGRFieldDefnShadow *self,int width){
    OGR_Fld_SetWidth(self, width);
  }
SWIGINTERN int OGRFieldDefnShadow_GetPrecision(OGRFieldDefnShadow *self){
    return OGR_Fld_GetPrecision(self);
  }
SWIGINTERN void OGRFieldDefnShadow_SetPrecision(OGRFieldDefnShadow *self,int precision){
    OGR_Fld_SetPrecision(self, precision);
  }
SWIGINTERN char const *OGRFieldDefnShadow_GetTypeName(OGRFieldDefnShadow *self){
      return OGR_GetFieldTypeName(OGR_Fld_GetType(self));
  }
SWIGINTERN char const *OGRFieldDefnShadow_GetFieldTypeName(OGRFieldDefnShadow *self,OGRFieldType type){
    return OGR_GetFieldTypeName(type);
  }
SWIGINTERN int OGRFieldDefnShadow_IsIgnored(OGRFieldDefnShadow *self){
    return OGR_Fld_IsIgnored( self );
  }
SWIGINTERN void OGRFieldDefnShadow_SetIgnored(OGRFieldDefnShadow *self,int bIgnored){
    OGR_Fld_SetIgnored( self, bIgnored );
  }
SWIGINTERN int OGRFieldDefnShadow_IsNullable(OGRFieldDefnShadow *self){
    return OGR_Fld_IsNullable( self );
  }
SWIGINTERN void OGRFieldDefnShadow_SetNullable(OGRFieldDefnShadow *self,int bNullable){
    OGR_Fld_SetNullable( self, bNullable );
  }
SWIGINTERN char const *OGRFieldDefnShadow_GetDefault(OGRFieldDefnShadow *self){
    return OGR_Fld_GetDefault( self );
  }
SWIGINTERN void OGRFieldDefnShadow_SetDefault(OGRFieldDefnShadow *self,char const *pszValue){
    OGR_Fld_SetDefault( self, pszValue );
  }
SWIGINTERN int OGRFieldDefnShadow_IsDefaultDriverSpecific(OGRFieldDefnShadow *self){
    return OGR_Fld_IsDefaultDriverSpecific( self );
  }
SWIGINTERN void delete_OGRGeomFieldDefnShadow(OGRGeomFieldDefnShadow *self){
    OGR_GFld_Destroy(self);
  }
SWIGINTERN OGRGeomFieldDefnShadow *new_OGRGeomFieldDefnShadow(char const *name_null_ok="",OGRwkbGeometryType field_type=wkbUnknown){
    if( ValidateOGRGeometryType(field_type) )
        return (OGRGeomFieldDefnShadow*) OGR_GFld_Create(name_null_ok, field_type);
    else
        return NULL;
  }
SWIGINTERN char const *OGRGeomFieldDefnShadow_GetName(OGRGeomFieldDefnShadow *self){
    return (const char *) OGR_GFld_GetNameRef(self);
  }
SWIGINTERN char const *OGRGeomFieldDefnShadow_GetNameRef(OGRGeomFieldDefnShadow *self){
    return (const char *) OGR_GFld_GetNameRef(self);
  }
SWIGINTERN void OGRGeomFieldDefnShadow_SetName(OGRGeomFieldDefnShadow *self,char const *name){
    OGR_GFld_SetName(self, name);
  }
SWIGINTERN OGRwkbGeometryType OGRGeomFieldDefnShadow_GetType(OGRGeomFieldDefnShadow *self){
    return OGR_GFld_GetType(self);
  }
SWIGINTERN void OGRGeomFieldDefnShadow_SetType(OGRGeomFieldDefnShadow *self,OGRwkbGeometryType type){
    if( ValidateOGRGeometryType(type) )
        OGR_GFld_SetType(self, type);
  }
SWIGINTERN OSRSpatialReferenceShadow *OGRGeomFieldDefnShadow_GetSpatialRef(OGRGeomFieldDefnShadow *self){
    OGRSpatialReferenceH ref =  OGR_GFld_GetSpatialRef(self);
    if( ref )
        OSRReference(ref);
    return (OSRSpatialReferenceShadow*) ref;
  }
SWIGINTERN void OGRGeomFieldDefnShadow_SetSpatialRef(OGRGeomFieldDefnShadow *self,OSRSpatialReferenceShadow *srs){
     OGR_GFld_SetSpatialRef( self, (OGRSpatialReferenceH)srs );
  }
SWIGINTERN int OGRGeomFieldDefnShadow_IsIgnored(OGRGeomFieldDefnShadow *self){
    return OGR_GFld_IsIgnored( self );
  }
SWIGINTERN void OGRGeomFieldDefnShadow_SetIgnored(OGRGeomFieldDefnShadow *self,int bIgnored){
    OGR_GFld_SetIgnored( self, bIgnored );
  }
SWIGINTERN int OGRGeomFieldDefnShadow_IsNullable(OGRGeomFieldDefnShadow *self){
    return OGR_GFld_IsNullable( self );
  }
SWIGINTERN void OGRGeomFieldDefnShadow_SetNullable(OGRGeomFieldDefnShadow *self,int bNullable){
    return OGR_GFld_SetNullable( self, bNullable );
  }

  OGRGeometryShadow* CreateGeometryFromWkb( int len, char *bin_string, 
                                            OSRSpatialReferenceShadow *reference=NULL ) {
    OGRGeometryH geom = NULL;
    OGRErr err = OGR_G_CreateFromWkb( (unsigned char *) bin_string,
                                      reference,
                                      &geom,
                                      len );
    if (err != 0 ) {
       CPLError(CE_Failure, err, "%s", OGRErrMessages(err));
       return NULL;
    }
    return (OGRGeometryShadow*) geom;
  }
 


  OGRGeometryShadow* CreateGeometryFromWkt( char **val, 
                                      OSRSpatialReferenceShadow *reference=NULL ) {
    OGRGeometryH geom = NULL;
    OGRErr err = OGR_G_CreateFromWkt(val,
                                      reference,
                                      &geom);
    if (err != 0 ) {
       CPLError(CE_Failure, err, "%s", OGRErrMessages(err));
       return NULL;
    }
    return (OGRGeometryShadow*) geom;
  }
 


  OGRGeometryShadow *CreateGeometryFromGML( const char * input_string ) {
    OGRGeometryShadow* geom = (OGRGeometryShadow*)OGR_G_CreateFromGML(input_string);
    return geom;
  }
 


  OGRGeometryShadow *CreateGeometryFromJson( const char * input_string ) {
    OGRGeometryShadow* geom = (OGRGeometryShadow*)OGR_G_CreateGeometryFromJson(input_string);
    return geom;
  }
 


  OGRGeometryShadow* BuildPolygonFromEdges( OGRGeometryShadow*  hLineCollection,  
                                            int bBestEffort = 0, 
                                            int bAutoClose = 0, 
                                            double dfTolerance=0) {
  
  OGRGeometryH hPolygon = NULL;
  
  OGRErr eErr;

  hPolygon = OGRBuildPolygonFromEdges( hLineCollection, bBestEffort, 
                                       bAutoClose, dfTolerance, &eErr );

  if (eErr != OGRERR_NONE ) {
    CPLError(CE_Failure, eErr, "%s", OGRErrMessages(eErr));
    return NULL;
  }

  return (OGRGeometryShadow* )hPolygon;
  }


  OGRGeometryShadow* ApproximateArcAngles( 
        double dfCenterX, double dfCenterY, double dfZ,
  	double dfPrimaryRadius, double dfSecondaryAxis, double dfRotation, 
        double dfStartAngle, double dfEndAngle,
        double dfMaxAngleStepSizeDegrees ) {
  
  return (OGRGeometryShadow* )OGR_G_ApproximateArcAngles( 
             dfCenterX, dfCenterY, dfZ, 
             dfPrimaryRadius, dfSecondaryAxis, dfRotation,
             dfStartAngle, dfEndAngle, dfMaxAngleStepSizeDegrees );
  }


OGRGeometryShadow* ForceToPolygon( OGRGeometryShadow *geom_in ) {
 if (geom_in == NULL)
     return NULL;
 return (OGRGeometryShadow* )OGR_G_ForceToPolygon( OGR_G_Clone(geom_in) );
}


OGRGeometryShadow* ForceToLineString( OGRGeometryShadow *geom_in ) {
 if (geom_in == NULL)
     return NULL;
 return (OGRGeometryShadow* )OGR_G_ForceToLineString( OGR_G_Clone(geom_in) );
}


OGRGeometryShadow* ForceToMultiPolygon( OGRGeometryShadow *geom_in ) {
 if (geom_in == NULL)
     return NULL;
 return (OGRGeometryShadow* )OGR_G_ForceToMultiPolygon( OGR_G_Clone(geom_in) );
}


OGRGeometryShadow* ForceToMultiPoint( OGRGeometryShadow *geom_in ) {
 if (geom_in == NULL)
     return NULL;
 return (OGRGeometryShadow* )OGR_G_ForceToMultiPoint( OGR_G_Clone(geom_in) );
}


OGRGeometryShadow* ForceToMultiLineString( OGRGeometryShadow *geom_in ) {
 if (geom_in == NULL)
     return NULL;
 return (OGRGeometryShadow* )OGR_G_ForceToMultiLineString( OGR_G_Clone(geom_in) );
}


OGRGeometryShadow* ForceTo( OGRGeometryShadow *geom_in, OGRwkbGeometryType eTargetType, char** options = NULL ) {
 if (geom_in == NULL)
     return NULL;
 return (OGRGeometryShadow* )OGR_G_ForceTo( OGR_G_Clone(geom_in), eTargetType, options );
}

SWIGINTERN void delete_OGRGeometryShadow(OGRGeometryShadow *self){
    OGR_G_DestroyGeometry( self );
  }
SWIGINTERN OGRGeometryShadow *new_OGRGeometryShadow(OGRwkbGeometryType type=wkbUnknown,char *wkt=0,int wkb=0,char *wkb_buf=0,char *gml=0){
    if (type != wkbUnknown ) {
      return (OGRGeometryShadow*) OGR_G_CreateGeometry( type );
    }
    else if ( wkt != 0 ) {
      return CreateGeometryFromWkt( &wkt );
    }
    else if ( wkb != 0 ) {
      return CreateGeometryFromWkb( wkb, wkb_buf );
    }
    else if ( gml != 0 ) {
      return CreateGeometryFromGML( gml );
    }
    // throw?
    else {
        CPLError(CE_Failure, 1, "Empty geometries cannot be constructed");
        return NULL;}

  }
SWIGINTERN OGRErr OGRGeometryShadow_ExportToWkt(OGRGeometryShadow *self,char **argout){
    return OGR_G_ExportToWkt(self, argout);
  }
SWIGINTERN OGRErr OGRGeometryShadow_ExportToIsoWkt(OGRGeometryShadow *self,char **argout){
    return OGR_G_ExportToIsoWkt(self, argout);
  }
SWIGINTERN OGRErr OGRGeometryShadow_ExportToWkb(OGRGeometryShadow *self,int *nLen,char **pBuf,OGRwkbByteOrder byte_order=wkbXDR){
    *nLen = OGR_G_WkbSize( self );
    *pBuf = (char *) malloc( *nLen * sizeof(unsigned char) );
    return OGR_G_ExportToWkb(self, byte_order, (unsigned char*) *pBuf );
  }
SWIGINTERN OGRErr OGRGeometryShadow_ExportToIsoWkb(OGRGeometryShadow *self,int *nLen,char **pBuf,OGRwkbByteOrder byte_order=wkbXDR){
    *nLen = OGR_G_WkbSize( self );
    *pBuf = (char *) malloc( *nLen * sizeof(unsigned char) );
    return OGR_G_ExportToIsoWkb(self, byte_order, (unsigned char*) *pBuf );
  }
SWIGINTERN char const *OGRGeometryShadow_ExportToGML(OGRGeometryShadow *self){
    return (const char *) OGR_G_ExportToGML(self);
  }
SWIGINTERN char const *OGRGeometryShadow_ExportToKML(OGRGeometryShadow *self,char const *altitude_mode=NULL){
    return (const char *) OGR_G_ExportToKML(self, altitude_mode);
  }
SWIGINTERN char const *OGRGeometryShadow_ExportToJson(OGRGeometryShadow *self){
    return (const char *) OGR_G_ExportToJson(self);
  }
SWIGINTERN void OGRGeometryShadow_AddPoint(OGRGeometryShadow *self,double x,double y,double z=0){
    OGR_G_AddPoint( self, x, y, z );
  }
SWIGINTERN void OGRGeometryShadow_AddPoint_2D(OGRGeometryShadow *self,double x,double y){
    OGR_G_AddPoint_2D( self, x, y );
  }
SWIGINTERN OGRErr OGRGeometryShadow_AddGeometryDirectly(OGRGeometryShadow *self,OGRGeometryShadow *other_disown){
    return OGR_G_AddGeometryDirectly( self, other_disown );
  }
SWIGINTERN OGRErr OGRGeometryShadow_AddGeometry(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return OGR_G_AddGeometry( self, other );
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_Clone(OGRGeometryShadow *self){
    return (OGRGeometryShadow*) OGR_G_Clone(self);
  }
SWIGINTERN OGRwkbGeometryType OGRGeometryShadow_GetGeometryType(OGRGeometryShadow *self){
    return (OGRwkbGeometryType) OGR_G_GetGeometryType(self);
  }
SWIGINTERN char const *OGRGeometryShadow_GetGeometryName(OGRGeometryShadow *self){
    return (const char *) OGR_G_GetGeometryName(self);
  }
SWIGINTERN double OGRGeometryShadow_Length(OGRGeometryShadow *self){
    return OGR_G_Length(self);
  }
SWIGINTERN double OGRGeometryShadow_Area(OGRGeometryShadow *self){
    return OGR_G_Area(self);
  }
SWIGINTERN double OGRGeometryShadow_GetArea(OGRGeometryShadow *self){
    return OGR_G_Area(self);
  }
SWIGINTERN int OGRGeometryShadow_GetPointCount(OGRGeometryShadow *self){
    return OGR_G_GetPointCount(self);
  }
SWIGINTERN double OGRGeometryShadow_GetX(OGRGeometryShadow *self,int point=0){
    return OGR_G_GetX(self, point);
  }
SWIGINTERN double OGRGeometryShadow_GetY(OGRGeometryShadow *self,int point=0){
    return OGR_G_GetY(self, point);
  }
SWIGINTERN double OGRGeometryShadow_GetZ(OGRGeometryShadow *self,int point=0){
    return OGR_G_GetZ(self, point);
  }
SWIGINTERN void OGRGeometryShadow_GetPoint(OGRGeometryShadow *self,int iPoint=0,double argout[3]=NULL){

    OGR_G_GetPoint( self, iPoint, argout+0, argout+1, argout+2 );
  }
SWIGINTERN void OGRGeometryShadow_GetPoint_2D(OGRGeometryShadow *self,int iPoint=0,double argout[2]=NULL){

    OGR_G_GetPoint( self, iPoint, argout+0, argout+1, NULL );
  }
SWIGINTERN int OGRGeometryShadow_GetGeometryCount(OGRGeometryShadow *self){
    return OGR_G_GetGeometryCount(self);
  }
SWIGINTERN void OGRGeometryShadow_SetPoint(OGRGeometryShadow *self,int point,double x,double y,double z=0){
    OGR_G_SetPoint(self, point, x, y, z);
  }
SWIGINTERN void OGRGeometryShadow_SetPoint_2D(OGRGeometryShadow *self,int point,double x,double y){
    OGR_G_SetPoint_2D(self, point, x, y);
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_GetGeometryRef(OGRGeometryShadow *self,int geom){
    return (OGRGeometryShadow*) OGR_G_GetGeometryRef(self, geom);
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_Simplify(OGRGeometryShadow *self,double tolerance){
    return (OGRGeometryShadow*) OGR_G_Simplify(self, tolerance);
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_SimplifyPreserveTopology(OGRGeometryShadow *self,double tolerance){
    return (OGRGeometryShadow*) OGR_G_SimplifyPreserveTopology(self, tolerance);
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_DelaunayTriangulation(OGRGeometryShadow *self,double dfTolerance=0.0,int bOnlyEdges=FALSE){
    return (OGRGeometryShadow*) OGR_G_DelaunayTriangulation(self, dfTolerance, bOnlyEdges);
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_Boundary(OGRGeometryShadow *self){
    return (OGRGeometryShadow*) OGR_G_Boundary(self);
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_GetBoundary(OGRGeometryShadow *self){
    return (OGRGeometryShadow*) OGR_G_Boundary(self);
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_ConvexHull(OGRGeometryShadow *self){
    return (OGRGeometryShadow*) OGR_G_ConvexHull(self);
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_Buffer(OGRGeometryShadow *self,double distance,int quadsecs=30){
    return (OGRGeometryShadow*) OGR_G_Buffer( self, distance, quadsecs );
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_Intersection(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGRGeometryShadow*) OGR_G_Intersection( self, other );
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_Union(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGRGeometryShadow*) OGR_G_Union( self, other );
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_UnionCascaded(OGRGeometryShadow *self){
    return (OGRGeometryShadow*) OGR_G_UnionCascaded( self );
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_Difference(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGRGeometryShadow*) OGR_G_Difference( self, other );
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_SymDifference(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGRGeometryShadow*) OGR_G_SymDifference( self, other );
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_SymmetricDifference(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGRGeometryShadow*) OGR_G_SymDifference( self, other );
  }
SWIGINTERN double OGRGeometryShadow_Distance(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return OGR_G_Distance(self, other);
  }
SWIGINTERN void OGRGeometryShadow_Empty(OGRGeometryShadow *self){
    OGR_G_Empty(self);
  }
SWIGINTERN bool OGRGeometryShadow_IsEmpty(OGRGeometryShadow *self){
    return (OGR_G_IsEmpty(self) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_IsValid(OGRGeometryShadow *self){
    return (OGR_G_IsValid(self) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_IsSimple(OGRGeometryShadow *self){
    return (OGR_G_IsSimple(self) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_IsRing(OGRGeometryShadow *self){
    return (OGR_G_IsRing(self) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_Intersects(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGR_G_Intersects(self, other) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_Intersect(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGR_G_Intersects(self, other) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_Equals(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGR_G_Equals(self, other) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_Equal(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGR_G_Equals(self, other) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_Disjoint(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGR_G_Disjoint(self, other) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_Touches(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGR_G_Touches(self, other) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_Crosses(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGR_G_Crosses(self, other) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_Within(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGR_G_Within(self, other) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_Contains(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGR_G_Contains(self, other) > 0);
  }
SWIGINTERN bool OGRGeometryShadow_Overlaps(OGRGeometryShadow *self,OGRGeometryShadow *other){
    return (OGR_G_Overlaps(self, other) > 0);
  }
SWIGINTERN OGRErr OGRGeometryShadow_TransformTo(OGRGeometryShadow *self,OSRSpatialReferenceShadow *reference){
    return OGR_G_TransformTo(self, reference);
  }
SWIGINTERN OGRErr OGRGeometryShadow_Transform(OGRGeometryShadow *self,OSRCoordinateTransformationShadow *trans){
    return OGR_G_Transform(self, trans);
  }
SWIGINTERN OSRSpatialReferenceShadow *OGRGeometryShadow_GetSpatialReference(OGRGeometryShadow *self){
    OGRSpatialReferenceH ref =  OGR_G_GetSpatialReference(self);
    if( ref )
        OSRReference(ref);
    return (OSRSpatialReferenceShadow*) ref;
  }
SWIGINTERN void OGRGeometryShadow_AssignSpatialReference(OGRGeometryShadow *self,OSRSpatialReferenceShadow *reference){
    OGR_G_AssignSpatialReference(self, reference);
  }
SWIGINTERN void OGRGeometryShadow_CloseRings(OGRGeometryShadow *self){
    OGR_G_CloseRings(self);
  }
SWIGINTERN void OGRGeometryShadow_FlattenTo2D(OGRGeometryShadow *self){
    OGR_G_FlattenTo2D(self);
  }
SWIGINTERN void OGRGeometryShadow_Segmentize(OGRGeometryShadow *self,double dfMaxLength){
    OGR_G_Segmentize(self, dfMaxLength);
  }
SWIGINTERN void OGRGeometryShadow_GetEnvelope(OGRGeometryShadow *self,double argout[4]){
    OGR_G_GetEnvelope(self, (OGREnvelope*)argout);
  }
SWIGINTERN void OGRGeometryShadow_GetEnvelope3D(OGRGeometryShadow *self,double argout[6]){
    OGR_G_GetEnvelope3D(self, (OGREnvelope3D*)argout);
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_Centroid(OGRGeometryShadow *self){
    OGRGeometryShadow *pt = (OGRGeometryShadow*) OGR_G_CreateGeometry( wkbPoint );
    OGR_G_Centroid( self, pt );
    return pt;
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_PointOnSurface(OGRGeometryShadow *self){
    return (OGRGeometryShadow*) OGR_G_PointOnSurface( self );
  }
SWIGINTERN int OGRGeometryShadow_WkbSize(OGRGeometryShadow *self){
    return OGR_G_WkbSize(self);
  }
SWIGINTERN int OGRGeometryShadow_GetCoordinateDimension(OGRGeometryShadow *self){
    return OGR_G_GetCoordinateDimension(self);
  }
SWIGINTERN void OGRGeometryShadow_SetCoordinateDimension(OGRGeometryShadow *self,int dimension){
    OGR_G_SetCoordinateDimension(self, dimension);
  }
SWIGINTERN int OGRGeometryShadow_GetDimension(OGRGeometryShadow *self){
    return OGR_G_GetDimension(self);
  }
SWIGINTERN int OGRGeometryShadow_HasCurveGeometry(OGRGeometryShadow *self,int bLookForCircular=FALSE){
        return OGR_G_HasCurveGeometry(self, bLookForCircular);
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_GetLinearGeometry(OGRGeometryShadow *self,double dfMaxAngleStepSizeDegrees=0.0,char **options=NULL){
    return (OGRGeometryShadow* )OGR_G_GetLinearGeometry(self, dfMaxAngleStepSizeDegrees, options);
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_GetCurveGeometry(OGRGeometryShadow *self,char **options=NULL){
    return (OGRGeometryShadow* )OGR_G_GetCurveGeometry(self, options);
  }
SWIGINTERN OGRGeometryShadow *OGRGeometryShadow_Value(OGRGeometryShadow *self,double dfDistance){
    return OGR_G_Value(self, dfDistance);
  }

char const *OGRDriverShadow_get_name( OGRDriverShadow *h ) {
  return OGR_Dr_GetName( h );
}

char const *OGRDataSourceShadow_get_name( OGRDataSourceShadow *h ) {
  return OGR_DS_GetName( h );
}

char const *OGRDriverShadow_name_get( OGRDriverShadow *h ) {
  return OGR_Dr_GetName( h );
}

char const *OGRDataSourceShadow_name_get( OGRDataSourceShadow *h ) {
  return OGR_DS_GetName( h );
}


OGRwkbGeometryType GT_SetModifier( OGRwkbGeometryType eType, int bSetZ, int bSetM = FALSE)
{
    return OGR_GT_SetModifier(eType, bSetZ, bSetM);
}


  OGRDataSourceShadow* GetOpenDS(int ds_number) {
    OGRDataSourceShadow* layer = (OGRDataSourceShadow*) OGRGetOpenDS(ds_number);
    return layer;
  }


  OGRDataSourceShadow* Open( const char *utf8_path, int update =0 ) {
    CPLErrorReset();
    OGRDataSourceShadow* ds = (OGRDataSourceShadow*)OGROpen(utf8_path,update,NULL);
    if( CPLGetLastErrorType() == CE_Failure && ds != NULL )
    {
        CPLDebug( "SWIG", 
		  "OGROpen() succeeded, but an error is posted, so we destroy"
		  " the datasource and fail at swig level." );
        OGRReleaseDataSource(ds);
        ds = NULL;
    }
	
    return ds;
  }


  OGRDataSourceShadow* OpenShared( const char *utf8_path, int update =0 ) {
    CPLErrorReset();
    OGRDataSourceShadow* ds = (OGRDataSourceShadow*)OGROpenShared(utf8_path,update,NULL);
    if( CPLGetLastErrorType() == CE_Failure && ds != NULL )
    {
        OGRReleaseDataSource(ds);
        ds = NULL;
    }
	
    return ds;
  }

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_ogr_1f1edc2fb82ebe9e(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


_gostring_ _wrap_MajorObject_GetDescription_ogr_1f1edc2fb82ebe9e(GDALMajorObjectShadow *_swig_go_0) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  
  result = (char *)GDALMajorObjectShadow_GetDescription(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_MajorObject_SetDescription_ogr_1f1edc2fb82ebe9e(GDALMajorObjectShadow *_swig_go_0, _gostring_ _swig_go_1) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  GDALMajorObjectShadow_SetDescription(arg1,(char const *)arg2);
  
}


char **_wrap_MajorObject_GetMetadataDomainList_ogr_1f1edc2fb82ebe9e(GDALMajorObjectShadow *_swig_go_0) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char **result = 0 ;
  char **_swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  
  result = (char **)GDALMajorObjectShadow_GetMetadataDomainList(arg1);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


_gostring_* _wrap_MajorObject_GetMetadata_Dict_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, GDALMajorObjectShadow *_swig_go_0, _gostring_ _swig_go_1) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) "" ;
  char **result = 0 ;
  _gostring_* _swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (char *)_swig_go_1.p; 
  }
  
  result = (char **)GDALMajorObjectShadow_GetMetadata_Dict(arg1,(char const *)arg2);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


char **_wrap_MajorObject_GetMetadata_List_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, GDALMajorObjectShadow *_swig_go_0, _gostring_ _swig_go_1) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) "" ;
  char **result = 0 ;
  char **_swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (char *)_swig_go_1.p; 
  }
  
  result = (char **)GDALMajorObjectShadow_GetMetadata_List(arg1,(char const *)arg2);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


intgo _wrap_MajorObject_SetMetadata__SWIG_0_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, GDALMajorObjectShadow *_swig_go_0, _gostring_* _swig_go_1, _gostring_ _swig_go_2) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  char *arg3 = (char *) "" ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  arg2 = *(char ***)&_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (char *)_swig_go_2.p; 
  }
  
  result = (CPLErr)GDALMajorObjectShadow_SetMetadata__SWIG_0(arg1,arg2,(char const *)arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_MajorObject_SetMetadata__SWIG_1_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, GDALMajorObjectShadow *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) "" ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  if (_swig_optargc > 0) {
    arg3 = (char *)_swig_go_2.p; 
  }
  
  result = (CPLErr)GDALMajorObjectShadow_SetMetadata__SWIG_1(arg1,arg2,(char const *)arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_MajorObject_GetMetadataItem_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, GDALMajorObjectShadow *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) "" ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  if (_swig_optargc > 0) {
    arg3 = (char *)_swig_go_2.p; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (char *)GDALMajorObjectShadow_GetMetadataItem(arg1,(char const *)arg2,(char const *)arg3);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_MajorObject_SetMetadataItem_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, GDALMajorObjectShadow *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) "" ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (char *)_swig_go_2.p; 
  if (_swig_optargc > 0) {
    arg4 = (char *)_swig_go_3.p; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (CPLErr)GDALMajorObjectShadow_SetMetadataItem(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRStyleTableShadow *_wrap_new_StyleTable_ogr_1f1edc2fb82ebe9e() {
  OGRStyleTableShadow *result = 0 ;
  OGRStyleTableShadow *_swig_go_result;
  
  
  result = (OGRStyleTableShadow *)new_OGRStyleTableShadow();
  *(OGRStyleTableShadow **)&_swig_go_result = (OGRStyleTableShadow *)result; 
  return _swig_go_result;
}


void _wrap_delete_StyleTable_ogr_1f1edc2fb82ebe9e(OGRStyleTableShadow *_swig_go_0) {
  OGRStyleTableShadow *arg1 = (OGRStyleTableShadow *) 0 ;
  
  arg1 = *(OGRStyleTableShadow **)&_swig_go_0; 
  
  delete_OGRStyleTableShadow(arg1);
  
}


intgo _wrap_StyleTable_AddStyle_ogr_1f1edc2fb82ebe9e(OGRStyleTableShadow *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  OGRStyleTableShadow *arg1 = (OGRStyleTableShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRStyleTableShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (char *)_swig_go_2.p; 
  
  result = (int)OGRStyleTableShadow_AddStyle(arg1,(char const *)arg2,(char const *)arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_StyleTable_LoadStyleTable_ogr_1f1edc2fb82ebe9e(OGRStyleTableShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRStyleTableShadow *arg1 = (OGRStyleTableShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRStyleTableShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (int)OGRStyleTableShadow_LoadStyleTable(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_StyleTable_SaveStyleTable_ogr_1f1edc2fb82ebe9e(OGRStyleTableShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRStyleTableShadow *arg1 = (OGRStyleTableShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRStyleTableShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (int)OGRStyleTableShadow_SaveStyleTable(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_StyleTable_Find_ogr_1f1edc2fb82ebe9e(OGRStyleTableShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRStyleTableShadow *arg1 = (OGRStyleTableShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRStyleTableShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (char *)OGRStyleTableShadow_Find(arg1,(char const *)arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_StyleTable_ResetStyleStringReading_ogr_1f1edc2fb82ebe9e(OGRStyleTableShadow *_swig_go_0) {
  OGRStyleTableShadow *arg1 = (OGRStyleTableShadow *) 0 ;
  
  arg1 = *(OGRStyleTableShadow **)&_swig_go_0; 
  
  OGRStyleTableShadow_ResetStyleStringReading(arg1);
  
}


_gostring_ _wrap_StyleTable_GetNextStyle_ogr_1f1edc2fb82ebe9e(OGRStyleTableShadow *_swig_go_0) {
  OGRStyleTableShadow *arg1 = (OGRStyleTableShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRStyleTableShadow **)&_swig_go_0; 
  
  result = (char *)OGRStyleTableShadow_GetNextStyle(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_StyleTable_GetLastStyleName_ogr_1f1edc2fb82ebe9e(OGRStyleTableShadow *_swig_go_0) {
  OGRStyleTableShadow *arg1 = (OGRStyleTableShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRStyleTableShadow **)&_swig_go_0; 
  
  result = (char *)OGRStyleTableShadow_GetLastStyleName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_Driver_name_get_ogr_1f1edc2fb82ebe9e(OGRDriverShadow *_swig_go_0) {
  OGRDriverShadow *arg1 = (OGRDriverShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRDriverShadow **)&_swig_go_0; 
  
  result = (char *)OGRDriverShadow_name_get(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


OGRDataSourceShadow *_wrap_Driver_CreateDataSource_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRDriverShadow *_swig_go_0, _gostring_ _swig_go_1, char **_swig_go_2) {
  OGRDriverShadow *arg1 = (OGRDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  OGRDataSourceShadow *result = 0 ;
  OGRDataSourceShadow *_swig_go_result;
  
  arg1 = *(OGRDriverShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  if (_swig_optargc > 0) {
    arg3 = *(char ***)&_swig_go_2; 
  }
  
  result = (OGRDataSourceShadow *)OGRDriverShadow_CreateDataSource(arg1,(char const *)arg2,arg3);
  *(OGRDataSourceShadow **)&_swig_go_result = (OGRDataSourceShadow *)result; 
  return _swig_go_result;
}


OGRDataSourceShadow *_wrap_Driver_CopyDataSource_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRDriverShadow *_swig_go_0, OGRDataSourceShadow *_swig_go_1, _gostring_ _swig_go_2, char **_swig_go_3) {
  OGRDriverShadow *arg1 = (OGRDriverShadow *) 0 ;
  OGRDataSourceShadow *arg2 = (OGRDataSourceShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char **arg4 = (char **) 0 ;
  OGRDataSourceShadow *result = 0 ;
  OGRDataSourceShadow *_swig_go_result;
  
  arg1 = *(OGRDriverShadow **)&_swig_go_0; 
  arg2 = *(OGRDataSourceShadow **)&_swig_go_1; 
  arg3 = (char *)_swig_go_2.p; 
  if (_swig_optargc > 0) {
    arg4 = *(char ***)&_swig_go_3; 
  }
  
  result = (OGRDataSourceShadow *)OGRDriverShadow_CopyDataSource(arg1,arg2,(char const *)arg3,arg4);
  *(OGRDataSourceShadow **)&_swig_go_result = (OGRDataSourceShadow *)result; 
  return _swig_go_result;
}


OGRDataSourceShadow *_wrap_Driver_Open_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRDriverShadow *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  OGRDriverShadow *arg1 = (OGRDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 0 ;
  OGRDataSourceShadow *result = 0 ;
  OGRDataSourceShadow *_swig_go_result;
  
  arg1 = *(OGRDriverShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  if (_swig_optargc > 0) {
    arg3 = (int)_swig_go_2; 
  }
  
  result = (OGRDataSourceShadow *)OGRDriverShadow_Open(arg1,(char const *)arg2,arg3);
  *(OGRDataSourceShadow **)&_swig_go_result = (OGRDataSourceShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Driver_DeleteDataSource_ogr_1f1edc2fb82ebe9e(OGRDriverShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRDriverShadow *arg1 = (OGRDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRDriverShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (int)OGRDriverShadow_DeleteDataSource(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Driver_TestCapability_ogr_1f1edc2fb82ebe9e(OGRDriverShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRDriverShadow *arg1 = (OGRDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRDriverShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRDriverShadow_TestCapability(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Driver_Register_ogr_1f1edc2fb82ebe9e(OGRDriverShadow *_swig_go_0) {
  OGRDriverShadow *arg1 = (OGRDriverShadow *) 0 ;
  
  arg1 = *(OGRDriverShadow **)&_swig_go_0; 
  
  OGRDriverShadow_Register(arg1);
  
}


void _wrap_Driver_Deregister_ogr_1f1edc2fb82ebe9e(OGRDriverShadow *_swig_go_0) {
  OGRDriverShadow *arg1 = (OGRDriverShadow *) 0 ;
  
  arg1 = *(OGRDriverShadow **)&_swig_go_0; 
  
  OGRDriverShadow_Deregister(arg1);
  
}


_gostring_ _wrap_DataSource_name_get_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  
  result = (char *)OGRDataSourceShadow_name_get(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_delete_DataSource_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  
  delete_OGRDataSourceShadow(arg1);
  
}


intgo _wrap_DataSource_GetRefCount_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  
  result = (int)OGRDataSourceShadow_GetRefCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DataSource_GetSummaryRefCount_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  
  result = (int)OGRDataSourceShadow_GetSummaryRefCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DataSource_GetLayerCount_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  
  result = (int)OGRDataSourceShadow_GetLayerCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRDriverShadow *_wrap_DataSource_GetDriver_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  OGRDriverShadow *result = 0 ;
  OGRDriverShadow *_swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  
  result = (OGRDriverShadow *)OGRDataSourceShadow_GetDriver(arg1);
  *(OGRDriverShadow **)&_swig_go_result = (OGRDriverShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_DataSource_DeleteLayer_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0, intgo _swig_go_1) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  int arg2 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (OGRErr)OGRDataSourceShadow_DeleteLayer(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DataSource_SyncToDisk_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  
  result = (OGRErr)OGRDataSourceShadow_SyncToDisk(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DataSource_FlushCache_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  
  OGRDataSourceShadow_FlushCache(arg1);
  
}


OGRLayerShadow *_wrap_DataSource_CreateLayer_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRDataSourceShadow *_swig_go_0, _gostring_ _swig_go_1, OSRSpatialReferenceShadow *_swig_go_2, intgo _swig_go_3, char **_swig_go_4) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OSRSpatialReferenceShadow *arg3 = (OSRSpatialReferenceShadow *) NULL ;
  OGRwkbGeometryType arg4 = (OGRwkbGeometryType) wkbUnknown ;
  char **arg5 = (char **) 0 ;
  OGRLayerShadow *result = 0 ;
  OGRLayerShadow *_swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  if (_swig_optargc > 0) {
    arg3 = *(OSRSpatialReferenceShadow **)&_swig_go_2; 
  }
  if (_swig_optargc > 1) {
    arg4 = (OGRwkbGeometryType)_swig_go_3; 
  }
  if (_swig_optargc > 2) {
    arg5 = *(char ***)&_swig_go_4; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRLayerShadow *)OGRDataSourceShadow_CreateLayer(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(OGRLayerShadow **)&_swig_go_result = (OGRLayerShadow *)result; 
  return _swig_go_result;
}


OGRLayerShadow *_wrap_DataSource_CopyLayer_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRDataSourceShadow *_swig_go_0, OGRLayerShadow *_swig_go_1, _gostring_ _swig_go_2, char **_swig_go_3) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char **arg4 = (char **) 0 ;
  OGRLayerShadow *result = 0 ;
  OGRLayerShadow *_swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  arg2 = *(OGRLayerShadow **)&_swig_go_1; 
  arg3 = (char *)_swig_go_2.p; 
  if (_swig_optargc > 0) {
    arg4 = *(char ***)&_swig_go_3; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRLayerShadow *)OGRDataSourceShadow_CopyLayer(arg1,arg2,(char const *)arg3,arg4);
  *(OGRLayerShadow **)&_swig_go_result = (OGRLayerShadow *)result; 
  return _swig_go_result;
}


OGRLayerShadow *_wrap_DataSource_GetLayerByIndex_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRDataSourceShadow *_swig_go_0, intgo _swig_go_1) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  int arg2 = (int) 0 ;
  OGRLayerShadow *result = 0 ;
  OGRLayerShadow *_swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  
  result = (OGRLayerShadow *)OGRDataSourceShadow_GetLayerByIndex(arg1,arg2);
  *(OGRLayerShadow **)&_swig_go_result = (OGRLayerShadow *)result; 
  return _swig_go_result;
}


OGRLayerShadow *_wrap_DataSource_GetLayerByName_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRLayerShadow *result = 0 ;
  OGRLayerShadow *_swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (OGRLayerShadow *)OGRDataSourceShadow_GetLayerByName(arg1,(char const *)arg2);
  *(OGRLayerShadow **)&_swig_go_result = (OGRLayerShadow *)result; 
  return _swig_go_result;
}


bool _wrap_DataSource_TestCapability_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRDataSourceShadow_TestCapability(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRLayerShadow *_wrap_DataSource_ExecuteSQL_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRDataSourceShadow *_swig_go_0, _gostring_ _swig_go_1, OGRGeometryShadow *_swig_go_2, _gostring_ _swig_go_3) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRGeometryShadow *arg3 = (OGRGeometryShadow *) NULL ;
  char *arg4 = (char *) "" ;
  OGRLayerShadow *result = 0 ;
  OGRLayerShadow *_swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  if (_swig_optargc > 0) {
    arg3 = *(OGRGeometryShadow **)&_swig_go_2; 
  }
  if (_swig_optargc > 1) {
    arg4 = (char *)_swig_go_3.p; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRLayerShadow *)OGRDataSourceShadow_ExecuteSQL(arg1,(char const *)arg2,arg3,(char const *)arg4);
  *(OGRLayerShadow **)&_swig_go_result = (OGRLayerShadow *)result; 
  return _swig_go_result;
}


void _wrap_DataSource_ReleaseResultSet_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0, OGRLayerShadow *_swig_go_1) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  arg2 = *(OGRLayerShadow **)&_swig_go_1; 
  
  OGRDataSourceShadow_ReleaseResultSet(arg1,arg2);
  
}


OGRStyleTableShadow *_wrap_DataSource_GetStyleTable_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  OGRStyleTableShadow *result = 0 ;
  OGRStyleTableShadow *_swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  
  result = (OGRStyleTableShadow *)OGRDataSourceShadow_GetStyleTable(arg1);
  *(OGRStyleTableShadow **)&_swig_go_result = (OGRStyleTableShadow *)result; 
  return _swig_go_result;
}


void _wrap_DataSource_SetStyleTable_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0, OGRStyleTableShadow *_swig_go_1) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  OGRStyleTableShadow *arg2 = (OGRStyleTableShadow *) 0 ;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  arg2 = *(OGRStyleTableShadow **)&_swig_go_1; 
  
  OGRDataSourceShadow_SetStyleTable(arg1,arg2);
  
}


intgo _wrap_DataSource_StartTransaction_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRDataSourceShadow *_swig_go_0, intgo _swig_go_1) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  int arg2 = (int) FALSE ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  
  result = (OGRErr)OGRDataSourceShadow_StartTransaction(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DataSource_CommitTransaction_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  
  result = (OGRErr)OGRDataSourceShadow_CommitTransaction(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DataSource_RollbackTransaction_ogr_1f1edc2fb82ebe9e(OGRDataSourceShadow *_swig_go_0) {
  OGRDataSourceShadow *arg1 = (OGRDataSourceShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRDataSourceShadow **)&_swig_go_0; 
  
  result = (OGRErr)OGRDataSourceShadow_RollbackTransaction(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_GetRefCount_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (int)OGRLayerShadow_GetRefCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Layer_SetSpatialFilter__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  OGRLayerShadow_SetSpatialFilter__SWIG_0(arg1,arg2);
  
}


void _wrap_Layer_SetSpatialFilterRect__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3, double _swig_go_4) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  arg5 = (double)_swig_go_4; 
  
  OGRLayerShadow_SetSpatialFilterRect__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  
}


void _wrap_Layer_SetSpatialFilter__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, intgo _swig_go_1, OGRGeometryShadow *_swig_go_2) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  int arg2 ;
  OGRGeometryShadow *arg3 = (OGRGeometryShadow *) 0 ;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(OGRGeometryShadow **)&_swig_go_2; 
  
  OGRLayerShadow_SetSpatialFilter__SWIG_1(arg1,arg2,arg3);
  
}


void _wrap_Layer_SetSpatialFilterRect__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, intgo _swig_go_1, double _swig_go_2, double _swig_go_3, double _swig_go_4, double _swig_go_5) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  arg5 = (double)_swig_go_4; 
  arg6 = (double)_swig_go_5; 
  
  OGRLayerShadow_SetSpatialFilterRect__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6);
  
}


OGRGeometryShadow *_wrap_Layer_GetSpatialFilter_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)OGRLayerShadow_GetSpatialFilter(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Layer_SetAttributeFilter_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (OGRErr)OGRLayerShadow_SetAttributeFilter(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Layer_ResetReading_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  OGRLayerShadow_ResetReading(arg1);
  
}


_gostring_ _wrap_Layer_GetName_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (char *)OGRLayerShadow_GetName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_Layer_GetGeomType_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRwkbGeometryType result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (OGRwkbGeometryType)OGRLayerShadow_GetGeomType(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Layer_GetGeometryColumn_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (char *)OGRLayerShadow_GetGeometryColumn(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_Layer_GetFIDColumn_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (char *)OGRLayerShadow_GetFIDColumn(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


OGRFeatureShadow *_wrap_Layer_GetFeature_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, GIntBig *_swig_go_1) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  GIntBig arg2 ;
  GIntBig *argp2 ;
  OGRFeatureShadow *result = 0 ;
  OGRFeatureShadow *_swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  argp2 = (GIntBig *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null GIntBig");
  }
  arg2 = (GIntBig)*argp2;
  
  
  result = (OGRFeatureShadow *)OGRLayerShadow_GetFeature(arg1,arg2);
  *(OGRFeatureShadow **)&_swig_go_result = (OGRFeatureShadow *)result; 
  return _swig_go_result;
}


OGRFeatureShadow *_wrap_Layer_GetNextFeature_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRFeatureShadow *result = 0 ;
  OGRFeatureShadow *_swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (OGRFeatureShadow *)OGRLayerShadow_GetNextFeature(arg1);
  *(OGRFeatureShadow **)&_swig_go_result = (OGRFeatureShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Layer_SetNextByIndex_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, GIntBig *_swig_go_1) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  GIntBig arg2 ;
  GIntBig *argp2 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  argp2 = (GIntBig *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null GIntBig");
  }
  arg2 = (GIntBig)*argp2;
  
  
  result = (OGRErr)OGRLayerShadow_SetNextByIndex(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_SetFeature_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, OGRFeatureShadow *_swig_go_1) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRFeatureShadow *arg2 = (OGRFeatureShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRFeatureShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRLayerShadow_SetFeature(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_CreateFeature_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, OGRFeatureShadow *_swig_go_1) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRFeatureShadow *arg2 = (OGRFeatureShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRFeatureShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRLayerShadow_CreateFeature(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_DeleteFeature_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, GIntBig *_swig_go_1) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  GIntBig arg2 ;
  GIntBig *argp2 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  argp2 = (GIntBig *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null GIntBig");
  }
  arg2 = (GIntBig)*argp2;
  
  
  result = (OGRErr)OGRLayerShadow_DeleteFeature(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_SyncToDisk_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (OGRErr)OGRLayerShadow_SyncToDisk(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRFeatureDefnShadow *_wrap_Layer_GetLayerDefn_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRFeatureDefnShadow *result = 0 ;
  OGRFeatureDefnShadow *_swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (OGRFeatureDefnShadow *)OGRLayerShadow_GetLayerDefn(arg1);
  *(OGRFeatureDefnShadow **)&_swig_go_result = (OGRFeatureDefnShadow *)result; 
  return _swig_go_result;
}


GIntBig *_wrap_Layer_GetFeatureCount_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRLayerShadow *_swig_go_0, intgo _swig_go_1) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  int arg2 = (int) 1 ;
  GIntBig result;
  GIntBig *_swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  
  result = OGRLayerShadow_GetFeatureCount(arg1,arg2);
  *(GIntBig **)&_swig_go_result = new GIntBig(result); 
  return _swig_go_result;
}


intgo _wrap_Layer_GetExtent_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRLayerShadow *_swig_go_0, double *_swig_go_1, intgo _swig_go_2) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  double *arg2 ;
  int arg3 = (int) 1 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (int)_swig_go_2; 
  }
  
  result = (OGRErr)OGRLayerShadow_GetExtent(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Layer_TestCapability_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRLayerShadow_TestCapability(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_CreateField_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRLayerShadow *_swig_go_0, OGRFieldDefnShadow *_swig_go_1, intgo _swig_go_2) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRFieldDefnShadow *arg2 = (OGRFieldDefnShadow *) 0 ;
  int arg3 = (int) 1 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRFieldDefnShadow **)&_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (int)_swig_go_2; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRLayerShadow_CreateField(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_DeleteField_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, intgo _swig_go_1) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  int arg2 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (OGRErr)OGRLayerShadow_DeleteField(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_ReorderField_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (OGRErr)OGRLayerShadow_ReorderField(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_ReorderFields_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, intgo _swig_go_1, intgo *_swig_go_2) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(int **)&_swig_go_2; 
  
  result = (OGRErr)OGRLayerShadow_ReorderFields(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_AlterFieldDefn_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, intgo _swig_go_1, OGRFieldDefnShadow *_swig_go_2, intgo _swig_go_3) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  int arg2 ;
  OGRFieldDefnShadow *arg3 = (OGRFieldDefnShadow *) 0 ;
  int arg4 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(OGRFieldDefnShadow **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  {
    if (!arg3) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRLayerShadow_AlterFieldDefn(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_CreateGeomField_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRLayerShadow *_swig_go_0, OGRGeomFieldDefnShadow *_swig_go_1, intgo _swig_go_2) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRGeomFieldDefnShadow *arg2 = (OGRGeomFieldDefnShadow *) 0 ;
  int arg3 = (int) 1 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRGeomFieldDefnShadow **)&_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (int)_swig_go_2; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRLayerShadow_CreateGeomField(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_StartTransaction_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (OGRErr)OGRLayerShadow_StartTransaction(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_CommitTransaction_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (OGRErr)OGRLayerShadow_CommitTransaction(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_RollbackTransaction_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (OGRErr)OGRLayerShadow_RollbackTransaction(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_FindFieldIndex_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)OGRLayerShadow_FindFieldIndex(arg1,(char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


OSRSpatialReferenceShadow *_wrap_Layer_GetSpatialRef_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OSRSpatialReferenceShadow *result = 0 ;
  OSRSpatialReferenceShadow *_swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (OSRSpatialReferenceShadow *)OGRLayerShadow_GetSpatialRef(arg1);
  *(OSRSpatialReferenceShadow **)&_swig_go_result = (OSRSpatialReferenceShadow *)result; 
  return _swig_go_result;
}


GIntBig *_wrap_Layer_GetFeaturesRead_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  GIntBig result;
  GIntBig *_swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = OGRLayerShadow_GetFeaturesRead(arg1);
  *(GIntBig **)&_swig_go_result = new GIntBig(result); 
  return _swig_go_result;
}


intgo _wrap_Layer_SetIgnoredFields_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, char **_swig_go_1) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(char ***)&_swig_go_1; 
  
  result = (OGRErr)OGRLayerShadow_SetIgnoredFields(arg1,(char const **)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_Intersection_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRLayerShadow *_swig_go_0, OGRLayerShadow *_swig_go_1, OGRLayerShadow *_swig_go_2, char **_swig_go_3, GDALProgressFunc _swig_go_4, void *_swig_go_5) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  char **arg4 = (char **) NULL ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRLayerShadow **)&_swig_go_1; 
  arg3 = *(OGRLayerShadow **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = *(char ***)&_swig_go_3; 
  }
  if (_swig_optargc > 1) {
    {
      arg5 = _swig_go_4;
    }
  }
  if (_swig_optargc > 2) {
    arg6 = *(void **)&_swig_go_5; 
  }
  
  result = (OGRErr)OGRLayerShadow_Intersection(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_Union_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRLayerShadow *_swig_go_0, OGRLayerShadow *_swig_go_1, OGRLayerShadow *_swig_go_2, char **_swig_go_3, GDALProgressFunc _swig_go_4, void *_swig_go_5) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  char **arg4 = (char **) NULL ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRLayerShadow **)&_swig_go_1; 
  arg3 = *(OGRLayerShadow **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = *(char ***)&_swig_go_3; 
  }
  if (_swig_optargc > 1) {
    {
      arg5 = _swig_go_4;
    }
  }
  if (_swig_optargc > 2) {
    arg6 = *(void **)&_swig_go_5; 
  }
  
  result = (OGRErr)OGRLayerShadow_Union(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_SymDifference_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRLayerShadow *_swig_go_0, OGRLayerShadow *_swig_go_1, OGRLayerShadow *_swig_go_2, char **_swig_go_3, GDALProgressFunc _swig_go_4, void *_swig_go_5) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  char **arg4 = (char **) NULL ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRLayerShadow **)&_swig_go_1; 
  arg3 = *(OGRLayerShadow **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = *(char ***)&_swig_go_3; 
  }
  if (_swig_optargc > 1) {
    {
      arg5 = _swig_go_4;
    }
  }
  if (_swig_optargc > 2) {
    arg6 = *(void **)&_swig_go_5; 
  }
  
  result = (OGRErr)OGRLayerShadow_SymDifference(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_Identity_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRLayerShadow *_swig_go_0, OGRLayerShadow *_swig_go_1, OGRLayerShadow *_swig_go_2, char **_swig_go_3, GDALProgressFunc _swig_go_4, void *_swig_go_5) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  char **arg4 = (char **) NULL ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRLayerShadow **)&_swig_go_1; 
  arg3 = *(OGRLayerShadow **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = *(char ***)&_swig_go_3; 
  }
  if (_swig_optargc > 1) {
    {
      arg5 = _swig_go_4;
    }
  }
  if (_swig_optargc > 2) {
    arg6 = *(void **)&_swig_go_5; 
  }
  
  result = (OGRErr)OGRLayerShadow_Identity(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_Update_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRLayerShadow *_swig_go_0, OGRLayerShadow *_swig_go_1, OGRLayerShadow *_swig_go_2, char **_swig_go_3, GDALProgressFunc _swig_go_4, void *_swig_go_5) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  char **arg4 = (char **) NULL ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRLayerShadow **)&_swig_go_1; 
  arg3 = *(OGRLayerShadow **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = *(char ***)&_swig_go_3; 
  }
  if (_swig_optargc > 1) {
    {
      arg5 = _swig_go_4;
    }
  }
  if (_swig_optargc > 2) {
    arg6 = *(void **)&_swig_go_5; 
  }
  
  result = (OGRErr)OGRLayerShadow_Update(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_Clip_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRLayerShadow *_swig_go_0, OGRLayerShadow *_swig_go_1, OGRLayerShadow *_swig_go_2, char **_swig_go_3, GDALProgressFunc _swig_go_4, void *_swig_go_5) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  char **arg4 = (char **) NULL ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRLayerShadow **)&_swig_go_1; 
  arg3 = *(OGRLayerShadow **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = *(char ***)&_swig_go_3; 
  }
  if (_swig_optargc > 1) {
    {
      arg5 = _swig_go_4;
    }
  }
  if (_swig_optargc > 2) {
    arg6 = *(void **)&_swig_go_5; 
  }
  
  result = (OGRErr)OGRLayerShadow_Clip(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Layer_Erase_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRLayerShadow *_swig_go_0, OGRLayerShadow *_swig_go_1, OGRLayerShadow *_swig_go_2, char **_swig_go_3, GDALProgressFunc _swig_go_4, void *_swig_go_5) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  char **arg4 = (char **) NULL ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRLayerShadow **)&_swig_go_1; 
  arg3 = *(OGRLayerShadow **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = *(char ***)&_swig_go_3; 
  }
  if (_swig_optargc > 1) {
    {
      arg5 = _swig_go_4;
    }
  }
  if (_swig_optargc > 2) {
    arg6 = *(void **)&_swig_go_5; 
  }
  
  result = (OGRErr)OGRLayerShadow_Erase(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRStyleTableShadow *_wrap_Layer_GetStyleTable_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRStyleTableShadow *result = 0 ;
  OGRStyleTableShadow *_swig_go_result;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  
  result = (OGRStyleTableShadow *)OGRLayerShadow_GetStyleTable(arg1);
  *(OGRStyleTableShadow **)&_swig_go_result = (OGRStyleTableShadow *)result; 
  return _swig_go_result;
}


void _wrap_Layer_SetStyleTable_ogr_1f1edc2fb82ebe9e(OGRLayerShadow *_swig_go_0, OGRStyleTableShadow *_swig_go_1) {
  OGRLayerShadow *arg1 = (OGRLayerShadow *) 0 ;
  OGRStyleTableShadow *arg2 = (OGRStyleTableShadow *) 0 ;
  
  arg1 = *(OGRLayerShadow **)&_swig_go_0; 
  arg2 = *(OGRStyleTableShadow **)&_swig_go_1; 
  
  OGRLayerShadow_SetStyleTable(arg1,arg2);
  
}


void _wrap_delete_Feature_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  
  delete_OGRFeatureShadow(arg1);
  
}


OGRFeatureShadow *_wrap_new_Feature_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  OGRFeatureShadow *result = 0 ;
  OGRFeatureShadow *_swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRFeatureShadow *)new_OGRFeatureShadow(arg1);
  *(OGRFeatureShadow **)&_swig_go_result = (OGRFeatureShadow *)result; 
  return _swig_go_result;
}


OGRFeatureDefnShadow *_wrap_Feature_GetDefnRef_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  OGRFeatureDefnShadow *result = 0 ;
  OGRFeatureDefnShadow *_swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  
  result = (OGRFeatureDefnShadow *)OGRFeatureShadow_GetDefnRef(arg1);
  *(OGRFeatureDefnShadow **)&_swig_go_result = (OGRFeatureDefnShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Feature_SetGeometry_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  result = (OGRErr)OGRFeatureShadow_SetGeometry(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Feature_SetGeometryDirectly_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  result = (OGRErr)OGRFeatureShadow_SetGeometryDirectly(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Feature_GetGeometryRef_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)OGRFeatureShadow_GetGeometryRef(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Feature_SetGeomField__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, OGRGeometryShadow *_swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  OGRGeometryShadow *arg3 = (OGRGeometryShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(OGRGeometryShadow **)&_swig_go_2; 
  
  result = (OGRErr)OGRFeatureShadow_SetGeomField__SWIG_0(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Feature_SetGeomField__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1, OGRGeometryShadow *_swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRGeometryShadow *arg3 = (OGRGeometryShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = *(OGRGeometryShadow **)&_swig_go_2; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRFeatureShadow_SetGeomField__SWIG_1(arg1,(char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Feature_SetGeomFieldDirectly__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, OGRGeometryShadow *_swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  OGRGeometryShadow *arg3 = (OGRGeometryShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(OGRGeometryShadow **)&_swig_go_2; 
  
  result = (OGRErr)OGRFeatureShadow_SetGeomFieldDirectly__SWIG_0(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Feature_SetGeomFieldDirectly__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1, OGRGeometryShadow *_swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRGeometryShadow *arg3 = (OGRGeometryShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = *(OGRGeometryShadow **)&_swig_go_2; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRFeatureShadow_SetGeomFieldDirectly__SWIG_1(arg1,(char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Feature_GetGeomFieldRef__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (OGRGeometryShadow *)OGRFeatureShadow_GetGeomFieldRef__SWIG_0(arg1,arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Feature_GetGeomFieldRef__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRGeometryShadow *)OGRFeatureShadow_GetGeomFieldRef__SWIG_1(arg1,(char const *)arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRFeatureShadow *_wrap_Feature_Clone_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  OGRFeatureShadow *result = 0 ;
  OGRFeatureShadow *_swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  
  result = (OGRFeatureShadow *)OGRFeatureShadow_Clone(arg1);
  *(OGRFeatureShadow **)&_swig_go_result = (OGRFeatureShadow *)result; 
  return _swig_go_result;
}


bool _wrap_Feature_Equal_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, OGRFeatureShadow *_swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  OGRFeatureShadow *arg2 = (OGRFeatureShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = *(OGRFeatureShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRFeatureShadow_Equal(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Feature_GetFieldCount_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  
  result = (int)OGRFeatureShadow_GetFieldCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRFieldDefnShadow *_wrap_Feature_GetFieldDefnRef__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  OGRFieldDefnShadow *result = 0 ;
  OGRFieldDefnShadow *_swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (OGRFieldDefnShadow *)OGRFeatureShadow_GetFieldDefnRef__SWIG_0(arg1,arg2);
  *(OGRFieldDefnShadow **)&_swig_go_result = (OGRFieldDefnShadow *)result; 
  return _swig_go_result;
}


OGRFieldDefnShadow *_wrap_Feature_GetFieldDefnRef__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRFieldDefnShadow *result = 0 ;
  OGRFieldDefnShadow *_swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRFieldDefnShadow *)OGRFeatureShadow_GetFieldDefnRef__SWIG_1(arg1,(char const *)arg2);
  *(OGRFieldDefnShadow **)&_swig_go_result = (OGRFieldDefnShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Feature_GetGeomFieldCount_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  
  result = (int)OGRFeatureShadow_GetGeomFieldCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRGeomFieldDefnShadow *_wrap_Feature_GetGeomFieldDefnRef__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  OGRGeomFieldDefnShadow *result = 0 ;
  OGRGeomFieldDefnShadow *_swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (OGRGeomFieldDefnShadow *)OGRFeatureShadow_GetGeomFieldDefnRef__SWIG_0(arg1,arg2);
  *(OGRGeomFieldDefnShadow **)&_swig_go_result = (OGRGeomFieldDefnShadow *)result; 
  return _swig_go_result;
}


OGRGeomFieldDefnShadow *_wrap_Feature_GetGeomFieldDefnRef__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRGeomFieldDefnShadow *result = 0 ;
  OGRGeomFieldDefnShadow *_swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRGeomFieldDefnShadow *)OGRFeatureShadow_GetGeomFieldDefnRef__SWIG_1(arg1,(char const *)arg2);
  *(OGRGeomFieldDefnShadow **)&_swig_go_result = (OGRGeomFieldDefnShadow *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Feature_GetFieldAsString__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (char *)OGRFeatureShadow_GetFieldAsString__SWIG_0(arg1,arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_Feature_GetFieldAsString__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (char *)OGRFeatureShadow_GetFieldAsString__SWIG_1(arg1,(char const *)arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_Feature_GetFieldAsInteger__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)OGRFeatureShadow_GetFieldAsInteger__SWIG_0(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Feature_GetFieldAsInteger__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)OGRFeatureShadow_GetFieldAsInteger__SWIG_1(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


GIntBig *_wrap_Feature_GetFieldAsInteger64__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  GIntBig result;
  GIntBig *_swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = OGRFeatureShadow_GetFieldAsInteger64__SWIG_0(arg1,arg2);
  *(GIntBig **)&_swig_go_result = new GIntBig(result); 
  return _swig_go_result;
}


GIntBig *_wrap_Feature_GetFieldAsInteger64__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  GIntBig result;
  GIntBig *_swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = OGRFeatureShadow_GetFieldAsInteger64__SWIG_1(arg1,(char const *)arg2);
  *(GIntBig **)&_swig_go_result = new GIntBig(result); 
  return _swig_go_result;
}


double _wrap_Feature_GetFieldAsDouble__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (double)OGRFeatureShadow_GetFieldAsDouble__SWIG_0(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Feature_GetFieldAsDouble__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (double)OGRFeatureShadow_GetFieldAsDouble__SWIG_1(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Feature_GetFieldAsDateTime_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, _goslice_ _swig_go_2, _goslice_ _swig_go_3, _goslice_ _swig_go_4, _goslice_ _swig_go_5, _goslice_ _swig_go_6, _goslice_ _swig_go_7, _goslice_ _swig_go_8) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  float *arg8 = (float *) 0 ;
  int *arg9 = (int *) 0 ;
  int temp3 ;
  int temp4 ;
  int temp5 ;
  int temp6 ;
  int temp7 ;
  float temp8 ;
  int temp9 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  {
    if (_swig_go_2.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg3 = &temp3;
  }
  {
    if (_swig_go_3.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg4 = &temp4;
  }
  {
    if (_swig_go_4.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg5 = &temp5;
  }
  {
    if (_swig_go_5.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg6 = &temp6;
  }
  {
    if (_swig_go_6.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg7 = &temp7;
  }
  {
    if (_swig_go_7.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg8 = &temp8;
  }
  {
    if (_swig_go_8.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg9 = &temp9;
  }
  
  OGRFeatureShadow_GetFieldAsDateTime(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  {
    int* a = (int *) _swig_go_2.array;
    a[0] = temp3;
  }
  {
    int* a = (int *) _swig_go_3.array;
    a[0] = temp4;
  }
  {
    int* a = (int *) _swig_go_4.array;
    a[0] = temp5;
  }
  {
    int* a = (int *) _swig_go_5.array;
    a[0] = temp6;
  }
  {
    int* a = (int *) _swig_go_6.array;
    a[0] = temp7;
  }
  {
    float* a = (float *) _swig_go_7.array;
    a[0] = temp8;
  }
  {
    int* a = (int *) _swig_go_8.array;
    a[0] = temp9;
  }
  
  
  
  
  
  
  
}


void _wrap_Feature_GetFieldAsIntegerList_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, intgo *_swig_go_2, intgo **_swig_go_3) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int **arg4 = (int **) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(int **)&_swig_go_2; 
  arg4 = *(int ***)&_swig_go_3; 
  
  OGRFeatureShadow_GetFieldAsIntegerList(arg1,arg2,arg3,(int const **)arg4);
  
}


void _wrap_Feature_GetFieldAsDoubleList_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, intgo *_swig_go_2, double **_swig_go_3) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double **arg4 = (double **) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(int **)&_swig_go_2; 
  arg4 = *(double ***)&_swig_go_3; 
  
  OGRFeatureShadow_GetFieldAsDoubleList(arg1,arg2,arg3,(double const **)arg4);
  
}


void _wrap_Feature_GetFieldAsStringList_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, _gostring_** _swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  char ***arg3 = (char ***) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(char ****)&_swig_go_2; 
  
  OGRFeatureShadow_GetFieldAsStringList(arg1,arg2,arg3);
  
}


intgo _wrap_Feature_GetFieldAsBinary__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, intgo *_swig_go_2, _gostring_* _swig_go_3) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  char **arg4 = (char **) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(int **)&_swig_go_2; 
  arg4 = *(char ***)&_swig_go_3; 
  
  result = (OGRErr)OGRFeatureShadow_GetFieldAsBinary__SWIG_0(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Feature_GetFieldAsBinary__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1, intgo *_swig_go_2, _gostring_* _swig_go_3) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  char **arg4 = (char **) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = *(int **)&_swig_go_2; 
  arg4 = *(char ***)&_swig_go_3; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRFeatureShadow_GetFieldAsBinary__SWIG_1(arg1,(char const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Feature_IsFieldSet__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (bool)OGRFeatureShadow_IsFieldSet__SWIG_0(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Feature_IsFieldSet__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRFeatureShadow_IsFieldSet__SWIG_1(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Feature_GetFieldIndex_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)OGRFeatureShadow_GetFieldIndex(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Feature_GetGeomFieldIndex_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)OGRFeatureShadow_GetGeomFieldIndex(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


GIntBig *_wrap_Feature_GetFID_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  GIntBig result;
  GIntBig *_swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  
  result = OGRFeatureShadow_GetFID(arg1);
  *(GIntBig **)&_swig_go_result = new GIntBig(result); 
  return _swig_go_result;
}


intgo _wrap_Feature_SetFID_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, GIntBig *_swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  GIntBig arg2 ;
  GIntBig *argp2 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  
  argp2 = (GIntBig *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null GIntBig");
  }
  arg2 = (GIntBig)*argp2;
  
  
  result = (OGRErr)OGRFeatureShadow_SetFID(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Feature_DumpReadable_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  
  OGRFeatureShadow_DumpReadable(arg1);
  
}


void _wrap_Feature_UnsetField__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  OGRFeatureShadow_UnsetField__SWIG_0(arg1,arg2);
  
}


void _wrap_Feature_UnsetField__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  OGRFeatureShadow_UnsetField__SWIG_1(arg1,(char const *)arg2);
  
}


void _wrap_Feature_SetField__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (char *)_swig_go_2.p; 
  
  OGRFeatureShadow_SetField__SWIG_0(arg1,arg2,(char const *)arg3);
  
}


void _wrap_Feature_SetField__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (char *)_swig_go_2.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  OGRFeatureShadow_SetField__SWIG_1(arg1,(char const *)arg2,(char const *)arg3);
  
}


void _wrap_Feature_SetFieldInteger64_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, GIntBig *_swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  GIntBig arg3 ;
  GIntBig *argp3 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  argp3 = (GIntBig *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null GIntBig");
  }
  arg3 = (GIntBig)*argp3;
  
  
  OGRFeatureShadow_SetFieldInteger64(arg1,arg2,arg3);
  
}


void _wrap_Feature_SetField__SWIG_2_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  OGRFeatureShadow_SetField__SWIG_2(arg1,arg2,arg3);
  
}


void _wrap_Feature_SetField__SWIG_3_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (int)_swig_go_2; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  OGRFeatureShadow_SetField__SWIG_3(arg1,(char const *)arg2,arg3);
  
}


void _wrap_Feature_SetField__SWIG_4_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, double _swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  OGRFeatureShadow_SetField__SWIG_4(arg1,arg2,arg3);
  
}


void _wrap_Feature_SetField__SWIG_5_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1, double _swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (double)_swig_go_2; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  OGRFeatureShadow_SetField__SWIG_5(arg1,(char const *)arg2,arg3);
  
}


void _wrap_Feature_SetField__SWIG_6_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6, float _swig_go_7, intgo _swig_go_8) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  float arg8 ;
  int arg9 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  arg8 = (float)_swig_go_7; 
  arg9 = (int)_swig_go_8; 
  
  OGRFeatureShadow_SetField__SWIG_6(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
}


void _wrap_Feature_SetField__SWIG_7_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6, float _swig_go_7, intgo _swig_go_8) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  float arg8 ;
  int arg9 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  arg8 = (float)_swig_go_7; 
  arg9 = (int)_swig_go_8; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  OGRFeatureShadow_SetField__SWIG_7(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
}


void _wrap_Feature_SetFieldIntegerList_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo *_swig_go_3) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = *(int **)&_swig_go_3; 
  
  OGRFeatureShadow_SetFieldIntegerList(arg1,arg2,arg3,arg4);
  
}


void _wrap_Feature_SetFieldDoubleList_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, double *_swig_go_3) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = *(double **)&_swig_go_3; 
  
  OGRFeatureShadow_SetFieldDoubleList(arg1,arg2,arg3,arg4);
  
}


void _wrap_Feature_SetFieldStringList_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, char **_swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(char ***)&_swig_go_2; 
  
  OGRFeatureShadow_SetFieldStringList(arg1,arg2,arg3);
  
}


void _wrap_Feature_SetFieldBinaryFromHexString__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (char *)_swig_go_2.p; 
  
  OGRFeatureShadow_SetFieldBinaryFromHexString__SWIG_0(arg1,arg2,(char const *)arg3);
  
}


void _wrap_Feature_SetFieldBinaryFromHexString__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (char *)_swig_go_2.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  OGRFeatureShadow_SetFieldBinaryFromHexString__SWIG_1(arg1,(char const *)arg2,(char const *)arg3);
  
}


intgo _wrap_Feature_SetFrom_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRFeatureShadow *_swig_go_0, OGRFeatureShadow *_swig_go_1, intgo _swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  OGRFeatureShadow *arg2 = (OGRFeatureShadow *) 0 ;
  int arg3 = (int) 1 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = *(OGRFeatureShadow **)&_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (int)_swig_go_2; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRFeatureShadow_SetFrom(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Feature_SetFromWithMap_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, OGRFeatureShadow *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo *_swig_go_4) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  OGRFeatureShadow *arg2 = (OGRFeatureShadow *) 0 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = *(OGRFeatureShadow **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = *(int **)&_swig_go_4; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRFeatureShadow_SetFromWithMap(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Feature_GetStyleString_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  
  result = (char *)OGRFeatureShadow_GetStyleString(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_Feature_SetStyleString_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  OGRFeatureShadow_SetStyleString(arg1,(char const *)arg2);
  
}


intgo _wrap_Feature_GetFieldType__SWIG_0_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 ;
  OGRFieldType result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (OGRFieldType)OGRFeatureShadow_GetFieldType__SWIG_0(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Feature_GetFieldType__SWIG_1_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRFieldType result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRFieldType)OGRFeatureShadow_GetFieldType__SWIG_1(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Feature_Validate_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 = (int) OGR_F_VAL_ALL ;
  int arg3 = (int) TRUE ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  if (_swig_optargc > 1) {
    arg3 = (int)_swig_go_2; 
  }
  
  result = (int)OGRFeatureShadow_Validate(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Feature_FillUnsetWithDefault_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRFeatureShadow *_swig_go_0, intgo _swig_go_1, char **_swig_go_2) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  int arg2 = (int) FALSE ;
  char **arg3 = (char **) NULL ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  if (_swig_optargc > 1) {
    arg3 = *(char ***)&_swig_go_2; 
  }
  
  OGRFeatureShadow_FillUnsetWithDefault(arg1,arg2,arg3);
  
}


_gostring_ _wrap_Feature_GetNativeData_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  
  result = (char *)OGRFeatureShadow_GetNativeData(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_Feature_GetNativeMediaType_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  
  result = (char *)OGRFeatureShadow_GetNativeMediaType(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_Feature_SetNativeData_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  OGRFeatureShadow_SetNativeData(arg1,(char const *)arg2);
  
}


void _wrap_Feature_SetNativeMediaType_ogr_1f1edc2fb82ebe9e(OGRFeatureShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureShadow *arg1 = (OGRFeatureShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(OGRFeatureShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  OGRFeatureShadow_SetNativeMediaType(arg1,(char const *)arg2);
  
}


void _wrap_delete_FeatureDefn_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  
  delete_OGRFeatureDefnShadow(arg1);
  
}


OGRFeatureDefnShadow *_wrap_new_FeatureDefn_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, _gostring_ _swig_go_0) {
  char *arg1 = (char *) NULL ;
  OGRFeatureDefnShadow *result = 0 ;
  OGRFeatureDefnShadow *_swig_go_result;
  
  if (_swig_optargc > 0) {
    arg1 = (char *)_swig_go_0.p; 
  }
  
  result = (OGRFeatureDefnShadow *)new_OGRFeatureDefnShadow((char const *)arg1);
  *(OGRFeatureDefnShadow **)&_swig_go_result = (OGRFeatureDefnShadow *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_FeatureDefn_GetName_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  
  result = (char *)OGRFeatureDefnShadow_GetName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_FeatureDefn_GetFieldCount_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  
  result = (int)OGRFeatureDefnShadow_GetFieldCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRFieldDefnShadow *_wrap_FeatureDefn_GetFieldDefn_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  int arg2 ;
  OGRFieldDefnShadow *result = 0 ;
  OGRFieldDefnShadow *_swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (OGRFieldDefnShadow *)OGRFeatureDefnShadow_GetFieldDefn(arg1,arg2);
  *(OGRFieldDefnShadow **)&_swig_go_result = (OGRFieldDefnShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_FeatureDefn_GetFieldIndex_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)OGRFeatureDefnShadow_GetFieldIndex(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FeatureDefn_AddFieldDefn_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0, OGRFieldDefnShadow *_swig_go_1) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  OGRFieldDefnShadow *arg2 = (OGRFieldDefnShadow *) 0 ;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  arg2 = *(OGRFieldDefnShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  OGRFeatureDefnShadow_AddFieldDefn(arg1,arg2);
  
}


intgo _wrap_FeatureDefn_GetGeomFieldCount_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  
  result = (int)OGRFeatureDefnShadow_GetGeomFieldCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRGeomFieldDefnShadow *_wrap_FeatureDefn_GetGeomFieldDefn_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  int arg2 ;
  OGRGeomFieldDefnShadow *result = 0 ;
  OGRGeomFieldDefnShadow *_swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (OGRGeomFieldDefnShadow *)OGRFeatureDefnShadow_GetGeomFieldDefn(arg1,arg2);
  *(OGRGeomFieldDefnShadow **)&_swig_go_result = (OGRGeomFieldDefnShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_FeatureDefn_GetGeomFieldIndex_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)OGRFeatureDefnShadow_GetGeomFieldIndex(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FeatureDefn_AddGeomFieldDefn_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0, OGRGeomFieldDefnShadow *_swig_go_1) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  OGRGeomFieldDefnShadow *arg2 = (OGRGeomFieldDefnShadow *) 0 ;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  arg2 = *(OGRGeomFieldDefnShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  OGRFeatureDefnShadow_AddGeomFieldDefn(arg1,arg2);
  
}


intgo _wrap_FeatureDefn_DeleteGeomFieldDefn_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  int arg2 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (OGRErr)OGRFeatureDefnShadow_DeleteGeomFieldDefn(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_FeatureDefn_GetGeomType_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  OGRwkbGeometryType result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  
  result = (OGRwkbGeometryType)OGRFeatureDefnShadow_GetGeomType(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FeatureDefn_SetGeomType_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  OGRwkbGeometryType arg2 ;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  arg2 = (OGRwkbGeometryType)_swig_go_1; 
  
  OGRFeatureDefnShadow_SetGeomType(arg1,arg2);
  
}


intgo _wrap_FeatureDefn_GetReferenceCount_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  
  result = (int)OGRFeatureDefnShadow_GetReferenceCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_FeatureDefn_IsGeometryIgnored_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  
  result = (int)OGRFeatureDefnShadow_IsGeometryIgnored(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FeatureDefn_SetGeometryIgnored_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  int arg2 ;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  OGRFeatureDefnShadow_SetGeometryIgnored(arg1,arg2);
  
}


intgo _wrap_FeatureDefn_IsStyleIgnored_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  
  result = (int)OGRFeatureDefnShadow_IsStyleIgnored(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FeatureDefn_SetStyleIgnored_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  int arg2 ;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  OGRFeatureDefnShadow_SetStyleIgnored(arg1,arg2);
  
}


intgo _wrap_FeatureDefn_IsSame_ogr_1f1edc2fb82ebe9e(OGRFeatureDefnShadow *_swig_go_0, OGRFeatureDefnShadow *_swig_go_1) {
  OGRFeatureDefnShadow *arg1 = (OGRFeatureDefnShadow *) 0 ;
  OGRFeatureDefnShadow *arg2 = (OGRFeatureDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFeatureDefnShadow **)&_swig_go_0; 
  arg2 = *(OGRFeatureDefnShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)OGRFeatureDefnShadow_IsSame(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_FieldDefn_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  delete_OGRFieldDefnShadow(arg1);
  
}


OGRFieldDefnShadow *_wrap_new_FieldDefn_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, _gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) "unnamed" ;
  OGRFieldType arg2 = (OGRFieldType) OFTString ;
  OGRFieldDefnShadow *result = 0 ;
  OGRFieldDefnShadow *_swig_go_result;
  
  if (_swig_optargc > 0) {
    arg1 = (char *)_swig_go_0.p; 
  }
  if (_swig_optargc > 1) {
    arg2 = (OGRFieldType)_swig_go_1; 
  }
  
  result = (OGRFieldDefnShadow *)new_OGRFieldDefnShadow((char const *)arg1,arg2);
  *(OGRFieldDefnShadow **)&_swig_go_result = (OGRFieldDefnShadow *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_FieldDefn_GetName_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  result = (char *)OGRFieldDefnShadow_GetName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_FieldDefn_GetNameRef_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  result = (char *)OGRFieldDefnShadow_GetNameRef(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_FieldDefn_SetName_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  OGRFieldDefnShadow_SetName(arg1,(char const *)arg2);
  
}


intgo _wrap_FieldDefn_GetType_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  OGRFieldType result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  result = (OGRFieldType)OGRFieldDefnShadow_GetType(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldDefn_SetType_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  OGRFieldType arg2 ;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  arg2 = (OGRFieldType)_swig_go_1; 
  
  OGRFieldDefnShadow_SetType(arg1,arg2);
  
}


intgo _wrap_FieldDefn_GetSubType_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  OGRFieldSubType result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  result = (OGRFieldSubType)OGRFieldDefnShadow_GetSubType(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldDefn_SetSubType_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  OGRFieldSubType arg2 ;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  arg2 = (OGRFieldSubType)_swig_go_1; 
  
  OGRFieldDefnShadow_SetSubType(arg1,arg2);
  
}


intgo _wrap_FieldDefn_GetJustify_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  OGRJustification result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  result = (OGRJustification)OGRFieldDefnShadow_GetJustify(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldDefn_SetJustify_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  OGRJustification arg2 ;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  arg2 = (OGRJustification)_swig_go_1; 
  
  OGRFieldDefnShadow_SetJustify(arg1,arg2);
  
}


intgo _wrap_FieldDefn_GetWidth_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  result = (int)OGRFieldDefnShadow_GetWidth(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldDefn_SetWidth_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  int arg2 ;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  OGRFieldDefnShadow_SetWidth(arg1,arg2);
  
}


intgo _wrap_FieldDefn_GetPrecision_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  result = (int)OGRFieldDefnShadow_GetPrecision(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldDefn_SetPrecision_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  int arg2 ;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  OGRFieldDefnShadow_SetPrecision(arg1,arg2);
  
}


_gostring_ _wrap_FieldDefn_GetTypeName_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  result = (char *)OGRFieldDefnShadow_GetTypeName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_FieldDefn_GetFieldTypeName_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  OGRFieldType arg2 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  arg2 = (OGRFieldType)_swig_go_1; 
  
  result = (char *)OGRFieldDefnShadow_GetFieldTypeName(arg1,arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_FieldDefn_IsIgnored_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  result = (int)OGRFieldDefnShadow_IsIgnored(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldDefn_SetIgnored_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  int arg2 ;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  OGRFieldDefnShadow_SetIgnored(arg1,arg2);
  
}


intgo _wrap_FieldDefn_IsNullable_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  result = (int)OGRFieldDefnShadow_IsNullable(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldDefn_SetNullable_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  int arg2 ;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  OGRFieldDefnShadow_SetNullable(arg1,arg2);
  
}


_gostring_ _wrap_FieldDefn_GetDefault_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  result = (char *)OGRFieldDefnShadow_GetDefault(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_FieldDefn_SetDefault_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  OGRFieldDefnShadow_SetDefault(arg1,(char const *)arg2);
  
}


intgo _wrap_FieldDefn_IsDefaultDriverSpecific_ogr_1f1edc2fb82ebe9e(OGRFieldDefnShadow *_swig_go_0) {
  OGRFieldDefnShadow *arg1 = (OGRFieldDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRFieldDefnShadow **)&_swig_go_0; 
  
  result = (int)OGRFieldDefnShadow_IsDefaultDriverSpecific(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_GeomFieldDefn_ogr_1f1edc2fb82ebe9e(OGRGeomFieldDefnShadow *_swig_go_0) {
  OGRGeomFieldDefnShadow *arg1 = (OGRGeomFieldDefnShadow *) 0 ;
  
  arg1 = *(OGRGeomFieldDefnShadow **)&_swig_go_0; 
  
  delete_OGRGeomFieldDefnShadow(arg1);
  
}


OGRGeomFieldDefnShadow *_wrap_new_GeomFieldDefn_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, _gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) "" ;
  OGRwkbGeometryType arg2 = (OGRwkbGeometryType) wkbUnknown ;
  OGRGeomFieldDefnShadow *result = 0 ;
  OGRGeomFieldDefnShadow *_swig_go_result;
  
  if (_swig_optargc > 0) {
    arg1 = (char *)_swig_go_0.p; 
  }
  if (_swig_optargc > 1) {
    arg2 = (OGRwkbGeometryType)_swig_go_1; 
  }
  
  result = (OGRGeomFieldDefnShadow *)new_OGRGeomFieldDefnShadow((char const *)arg1,arg2);
  *(OGRGeomFieldDefnShadow **)&_swig_go_result = (OGRGeomFieldDefnShadow *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_GeomFieldDefn_GetName_ogr_1f1edc2fb82ebe9e(OGRGeomFieldDefnShadow *_swig_go_0) {
  OGRGeomFieldDefnShadow *arg1 = (OGRGeomFieldDefnShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRGeomFieldDefnShadow **)&_swig_go_0; 
  
  result = (char *)OGRGeomFieldDefnShadow_GetName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_GeomFieldDefn_GetNameRef_ogr_1f1edc2fb82ebe9e(OGRGeomFieldDefnShadow *_swig_go_0) {
  OGRGeomFieldDefnShadow *arg1 = (OGRGeomFieldDefnShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRGeomFieldDefnShadow **)&_swig_go_0; 
  
  result = (char *)OGRGeomFieldDefnShadow_GetNameRef(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_GeomFieldDefn_SetName_ogr_1f1edc2fb82ebe9e(OGRGeomFieldDefnShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRGeomFieldDefnShadow *arg1 = (OGRGeomFieldDefnShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(OGRGeomFieldDefnShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  OGRGeomFieldDefnShadow_SetName(arg1,(char const *)arg2);
  
}


intgo _wrap_GeomFieldDefn_GetType_ogr_1f1edc2fb82ebe9e(OGRGeomFieldDefnShadow *_swig_go_0) {
  OGRGeomFieldDefnShadow *arg1 = (OGRGeomFieldDefnShadow *) 0 ;
  OGRwkbGeometryType result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeomFieldDefnShadow **)&_swig_go_0; 
  
  result = (OGRwkbGeometryType)OGRGeomFieldDefnShadow_GetType(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GeomFieldDefn_SetType_ogr_1f1edc2fb82ebe9e(OGRGeomFieldDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRGeomFieldDefnShadow *arg1 = (OGRGeomFieldDefnShadow *) 0 ;
  OGRwkbGeometryType arg2 ;
  
  arg1 = *(OGRGeomFieldDefnShadow **)&_swig_go_0; 
  arg2 = (OGRwkbGeometryType)_swig_go_1; 
  
  OGRGeomFieldDefnShadow_SetType(arg1,arg2);
  
}


OSRSpatialReferenceShadow *_wrap_GeomFieldDefn_GetSpatialRef_ogr_1f1edc2fb82ebe9e(OGRGeomFieldDefnShadow *_swig_go_0) {
  OGRGeomFieldDefnShadow *arg1 = (OGRGeomFieldDefnShadow *) 0 ;
  OSRSpatialReferenceShadow *result = 0 ;
  OSRSpatialReferenceShadow *_swig_go_result;
  
  arg1 = *(OGRGeomFieldDefnShadow **)&_swig_go_0; 
  
  result = (OSRSpatialReferenceShadow *)OGRGeomFieldDefnShadow_GetSpatialRef(arg1);
  *(OSRSpatialReferenceShadow **)&_swig_go_result = (OSRSpatialReferenceShadow *)result; 
  return _swig_go_result;
}


void _wrap_GeomFieldDefn_SetSpatialRef_ogr_1f1edc2fb82ebe9e(OGRGeomFieldDefnShadow *_swig_go_0, OSRSpatialReferenceShadow *_swig_go_1) {
  OGRGeomFieldDefnShadow *arg1 = (OGRGeomFieldDefnShadow *) 0 ;
  OSRSpatialReferenceShadow *arg2 = (OSRSpatialReferenceShadow *) 0 ;
  
  arg1 = *(OGRGeomFieldDefnShadow **)&_swig_go_0; 
  arg2 = *(OSRSpatialReferenceShadow **)&_swig_go_1; 
  
  OGRGeomFieldDefnShadow_SetSpatialRef(arg1,arg2);
  
}


intgo _wrap_GeomFieldDefn_IsIgnored_ogr_1f1edc2fb82ebe9e(OGRGeomFieldDefnShadow *_swig_go_0) {
  OGRGeomFieldDefnShadow *arg1 = (OGRGeomFieldDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeomFieldDefnShadow **)&_swig_go_0; 
  
  result = (int)OGRGeomFieldDefnShadow_IsIgnored(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GeomFieldDefn_SetIgnored_ogr_1f1edc2fb82ebe9e(OGRGeomFieldDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRGeomFieldDefnShadow *arg1 = (OGRGeomFieldDefnShadow *) 0 ;
  int arg2 ;
  
  arg1 = *(OGRGeomFieldDefnShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  OGRGeomFieldDefnShadow_SetIgnored(arg1,arg2);
  
}


intgo _wrap_GeomFieldDefn_IsNullable_ogr_1f1edc2fb82ebe9e(OGRGeomFieldDefnShadow *_swig_go_0) {
  OGRGeomFieldDefnShadow *arg1 = (OGRGeomFieldDefnShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeomFieldDefnShadow **)&_swig_go_0; 
  
  result = (int)OGRGeomFieldDefnShadow_IsNullable(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GeomFieldDefn_SetNullable_ogr_1f1edc2fb82ebe9e(OGRGeomFieldDefnShadow *_swig_go_0, intgo _swig_go_1) {
  OGRGeomFieldDefnShadow *arg1 = (OGRGeomFieldDefnShadow *) 0 ;
  int arg2 ;
  
  arg1 = *(OGRGeomFieldDefnShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  OGRGeomFieldDefnShadow_SetNullable(arg1,arg2);
  
}


OGRGeometryShadow *_wrap_CreateGeometryFromWkb_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, intgo _swig_go_0, _gostring_ _swig_go_1, OSRSpatialReferenceShadow *_swig_go_2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  OSRSpatialReferenceShadow *arg3 = (OSRSpatialReferenceShadow *) NULL ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  if (_swig_optargc > 0) {
    arg3 = *(OSRSpatialReferenceShadow **)&_swig_go_2; 
  }
  
  result = (OGRGeometryShadow *)CreateGeometryFromWkb(arg1,arg2,arg3);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_CreateGeometryFromWkt_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, _gostring_* _swig_go_0, OSRSpatialReferenceShadow *_swig_go_1) {
  char **arg1 = (char **) 0 ;
  OSRSpatialReferenceShadow *arg2 = (OSRSpatialReferenceShadow *) NULL ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = *(OSRSpatialReferenceShadow **)&_swig_go_1; 
  }
  
  result = (OGRGeometryShadow *)CreateGeometryFromWkt(arg1,arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_CreateGeometryFromGML_ogr_1f1edc2fb82ebe9e(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  
  result = (OGRGeometryShadow *)CreateGeometryFromGML((char const *)arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_CreateGeometryFromJson_ogr_1f1edc2fb82ebe9e(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  
  result = (OGRGeometryShadow *)CreateGeometryFromJson((char const *)arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_BuildPolygonFromEdges_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, double _swig_go_3) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 0 ;
  double arg4 = (double) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  if (_swig_optargc > 1) {
    arg3 = (int)_swig_go_2; 
  }
  if (_swig_optargc > 2) {
    arg4 = (double)_swig_go_3; 
  }
  
  result = (OGRGeometryShadow *)BuildPolygonFromEdges(arg1,arg2,arg3,arg4);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_ApproximateArcAngles_ogr_1f1edc2fb82ebe9e(double _swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3, double _swig_go_4, double _swig_go_5, double _swig_go_6, double _swig_go_7, double _swig_go_8) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  arg5 = (double)_swig_go_4; 
  arg6 = (double)_swig_go_5; 
  arg7 = (double)_swig_go_6; 
  arg8 = (double)_swig_go_7; 
  arg9 = (double)_swig_go_8; 
  
  result = (OGRGeometryShadow *)ApproximateArcAngles(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_ForceToPolygon_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)ForceToPolygon(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_ForceToLineString_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)ForceToLineString(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_ForceToMultiPolygon_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)ForceToMultiPolygon(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_ForceToMultiPoint_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)ForceToMultiPoint(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_ForceToMultiLineString_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)ForceToMultiLineString(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_ForceTo_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, intgo _swig_go_1, char **_swig_go_2) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRwkbGeometryType arg2 ;
  char **arg3 = (char **) NULL ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = (OGRwkbGeometryType)_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = *(char ***)&_swig_go_2; 
  }
  
  result = (OGRGeometryShadow *)ForceTo(arg1,arg2,arg3);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


void _wrap_delete_Geometry_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  delete_OGRGeometryShadow(arg1);
  
}


OGRGeometryShadow *_wrap_new_Geometry_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, intgo _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  OGRwkbGeometryType arg1 = (OGRwkbGeometryType) wkbUnknown ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  if (_swig_optargc > 0) {
    arg1 = (OGRwkbGeometryType)_swig_go_0; 
  }
  if (_swig_optargc > 1) {
    arg2 = (char *)_swig_go_1.p; 
  }
  if (_swig_optargc > 2) {
    arg3 = (int)_swig_go_2; 
  }
  if (_swig_optargc > 3) {
    arg4 = (char *)_swig_go_3.p; 
  }
  if (_swig_optargc > 4) {
    arg5 = (char *)_swig_go_4.p; 
  }
  
  result = (OGRGeometryShadow *)new_OGRGeometryShadow(arg1,arg2,arg3,arg4,arg5);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Geometry_ExportToWkt_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, _gostring_* _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(char ***)&_swig_go_1; 
  
  result = (OGRErr)OGRGeometryShadow_ExportToWkt(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Geometry_ExportToIsoWkt_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, _gostring_* _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(char ***)&_swig_go_1; 
  
  result = (OGRErr)OGRGeometryShadow_ExportToIsoWkt(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Geometry_ExportToWkb_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, intgo *_swig_go_1, _gostring_* _swig_go_2, intgo _swig_go_3) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 = (char **) 0 ;
  OGRwkbByteOrder arg4 = (OGRwkbByteOrder) wkbXDR ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(int **)&_swig_go_1; 
  arg3 = *(char ***)&_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = (OGRwkbByteOrder)_swig_go_3; 
  }
  
  result = (OGRErr)OGRGeometryShadow_ExportToWkb(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Geometry_ExportToIsoWkb_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, intgo *_swig_go_1, _gostring_* _swig_go_2, intgo _swig_go_3) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 = (char **) 0 ;
  OGRwkbByteOrder arg4 = (OGRwkbByteOrder) wkbXDR ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(int **)&_swig_go_1; 
  arg3 = *(char ***)&_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = (OGRwkbByteOrder)_swig_go_3; 
  }
  
  result = (OGRErr)OGRGeometryShadow_ExportToIsoWkb(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Geometry_ExportToGML_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (char *)OGRGeometryShadow_ExportToGML(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_Geometry_ExportToKML_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, _gostring_ _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  char *arg2 = (char *) NULL ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (char *)_swig_go_1.p; 
  }
  
  result = (char *)OGRGeometryShadow_ExportToKML(arg1,(char const *)arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_Geometry_ExportToJson_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (char *)OGRGeometryShadow_ExportToJson(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_Geometry_AddPoint_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 = (double) 0 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = (double)_swig_go_3; 
  }
  
  OGRGeometryShadow_AddPoint(arg1,arg2,arg3,arg4);
  
}


void _wrap_Geometry_AddPoint_2D_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, double _swig_go_1, double _swig_go_2) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  OGRGeometryShadow_AddPoint_2D(arg1,arg2,arg3);
  
}


intgo _wrap_Geometry_AddGeometryDirectly_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRGeometryShadow_AddGeometryDirectly(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Geometry_AddGeometry_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRGeometryShadow_AddGeometry(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_Clone_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_Clone(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Geometry_GetGeometryType_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRwkbGeometryType result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRwkbGeometryType)OGRGeometryShadow_GetGeometryType(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Geometry_GetGeometryName_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (char *)OGRGeometryShadow_GetGeometryName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


double _wrap_Geometry_Length_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (double)OGRGeometryShadow_Length(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Geometry_Area_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (double)OGRGeometryShadow_Area(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Geometry_GetArea_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (double)OGRGeometryShadow_GetArea(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Geometry_GetPointCount_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (int)OGRGeometryShadow_GetPointCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Geometry_GetX_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, intgo _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int arg2 = (int) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  
  result = (double)OGRGeometryShadow_GetX(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Geometry_GetY_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, intgo _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int arg2 = (int) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  
  result = (double)OGRGeometryShadow_GetY(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Geometry_GetZ_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, intgo _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int arg2 = (int) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  
  result = (double)OGRGeometryShadow_GetZ(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Geometry_GetPoint_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, intgo _swig_go_1, double *_swig_go_2) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int arg2 = (int) 0 ;
  double *arg3 = (double *) (double *)NULL ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  if (_swig_optargc > 1) {
    arg3 = *(double **)&_swig_go_2; 
  }
  
  OGRGeometryShadow_GetPoint(arg1,arg2,arg3);
  
}


void _wrap_Geometry_GetPoint_2D_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, intgo _swig_go_1, double *_swig_go_2) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int arg2 = (int) 0 ;
  double *arg3 = (double *) (double *)NULL ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  if (_swig_optargc > 1) {
    arg3 = *(double **)&_swig_go_2; 
  }
  
  OGRGeometryShadow_GetPoint_2D(arg1,arg2,arg3);
  
}


intgo _wrap_Geometry_GetGeometryCount_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (int)OGRGeometryShadow_GetGeometryCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Geometry_SetPoint_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, intgo _swig_go_1, double _swig_go_2, double _swig_go_3, double _swig_go_4) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 = (double) 0 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  if (_swig_optargc > 0) {
    arg5 = (double)_swig_go_4; 
  }
  
  OGRGeometryShadow_SetPoint(arg1,arg2,arg3,arg4,arg5);
  
}


void _wrap_Geometry_SetPoint_2D_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, intgo _swig_go_1, double _swig_go_2, double _swig_go_3) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  
  OGRGeometryShadow_SetPoint_2D(arg1,arg2,arg3,arg4);
  
}


OGRGeometryShadow *_wrap_Geometry_GetGeometryRef_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, intgo _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int arg2 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_GetGeometryRef(arg1,arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_Simplify_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, double _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double arg2 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_Simplify(arg1,arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_SimplifyPreserveTopology_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, double _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double arg2 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_SimplifyPreserveTopology(arg1,arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_DelaunayTriangulation_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, double _swig_go_1, intgo _swig_go_2) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double arg2 = (double) 0.0 ;
  int arg3 = (int) FALSE ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (double)_swig_go_1; 
  }
  if (_swig_optargc > 1) {
    arg3 = (int)_swig_go_2; 
  }
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_DelaunayTriangulation(arg1,arg2,arg3);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_Boundary_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_Boundary(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_GetBoundary_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_GetBoundary(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_ConvexHull_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_ConvexHull(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_Buffer_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, double _swig_go_1, intgo _swig_go_2) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double arg2 ;
  int arg3 = (int) 30 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (int)_swig_go_2; 
  }
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_Buffer(arg1,arg2,arg3);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_Intersection_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_Intersection(arg1,arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_Union_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_Union(arg1,arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_UnionCascaded_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_UnionCascaded(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_Difference_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_Difference(arg1,arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_SymDifference_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_SymDifference(arg1,arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_SymmetricDifference_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_SymmetricDifference(arg1,arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


double _wrap_Geometry_Distance_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (double)OGRGeometryShadow_Distance(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Geometry_Empty_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  OGRGeometryShadow_Empty(arg1);
  
}


bool _wrap_Geometry_IsEmpty_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (bool)OGRGeometryShadow_IsEmpty(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_IsValid_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (bool)OGRGeometryShadow_IsValid(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_IsSimple_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (bool)OGRGeometryShadow_IsSimple(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_IsRing_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (bool)OGRGeometryShadow_IsRing(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_Intersects_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRGeometryShadow_Intersects(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_Intersect_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRGeometryShadow_Intersect(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_Equals_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRGeometryShadow_Equals(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_Equal_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRGeometryShadow_Equal(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_Disjoint_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRGeometryShadow_Disjoint(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_Touches_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRGeometryShadow_Touches(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_Crosses_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRGeometryShadow_Crosses(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_Within_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRGeometryShadow_Within(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_Contains_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRGeometryShadow_Contains(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Geometry_Overlaps_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OGRGeometryShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *arg2 = (OGRGeometryShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OGRGeometryShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (bool)OGRGeometryShadow_Overlaps(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Geometry_TransformTo_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OSRSpatialReferenceShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OSRSpatialReferenceShadow *arg2 = (OSRSpatialReferenceShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OSRSpatialReferenceShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRGeometryShadow_TransformTo(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Geometry_Transform_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OSRCoordinateTransformationShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OSRCoordinateTransformationShadow *arg2 = (OSRCoordinateTransformationShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OSRCoordinateTransformationShadow **)&_swig_go_1; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRErr)OGRGeometryShadow_Transform(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


OSRSpatialReferenceShadow *_wrap_Geometry_GetSpatialReference_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OSRSpatialReferenceShadow *result = 0 ;
  OSRSpatialReferenceShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OSRSpatialReferenceShadow *)OGRGeometryShadow_GetSpatialReference(arg1);
  *(OSRSpatialReferenceShadow **)&_swig_go_result = (OSRSpatialReferenceShadow *)result; 
  return _swig_go_result;
}


void _wrap_Geometry_AssignSpatialReference_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, OSRSpatialReferenceShadow *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OSRSpatialReferenceShadow *arg2 = (OSRSpatialReferenceShadow *) 0 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(OSRSpatialReferenceShadow **)&_swig_go_1; 
  
  OGRGeometryShadow_AssignSpatialReference(arg1,arg2);
  
}


void _wrap_Geometry_CloseRings_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  OGRGeometryShadow_CloseRings(arg1);
  
}


void _wrap_Geometry_FlattenTo2D_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  OGRGeometryShadow_FlattenTo2D(arg1);
  
}


void _wrap_Geometry_Segmentize_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, double _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double arg2 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  OGRGeometryShadow_Segmentize(arg1,arg2);
  
}


void _wrap_Geometry_GetEnvelope_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, double *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double *arg2 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  
  OGRGeometryShadow_GetEnvelope(arg1,arg2);
  
}


void _wrap_Geometry_GetEnvelope3D_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, double *_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double *arg2 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  
  OGRGeometryShadow_GetEnvelope3D(arg1,arg2);
  
}


OGRGeometryShadow *_wrap_Geometry_Centroid_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_Centroid(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_PointOnSurface_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_PointOnSurface(arg1);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Geometry_WkbSize_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (int)OGRGeometryShadow_WkbSize(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Geometry_GetCoordinateDimension_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (int)OGRGeometryShadow_GetCoordinateDimension(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Geometry_SetCoordinateDimension_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, intgo _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int arg2 ;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  OGRGeometryShadow_SetCoordinateDimension(arg1,arg2);
  
}


intgo _wrap_Geometry_GetDimension_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  
  result = (int)OGRGeometryShadow_GetDimension(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Geometry_HasCurveGeometry_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, intgo _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  int arg2 = (int) FALSE ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  
  result = (int)OGRGeometryShadow_HasCurveGeometry(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_GetLinearGeometry_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, double _swig_go_1, char **_swig_go_2) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double arg2 = (double) 0.0 ;
  char **arg3 = (char **) NULL ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (double)_swig_go_1; 
  }
  if (_swig_optargc > 1) {
    arg3 = *(char ***)&_swig_go_2; 
  }
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_GetLinearGeometry(arg1,arg2,arg3);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_GetCurveGeometry_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, OGRGeometryShadow *_swig_go_0, char **_swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  char **arg2 = (char **) NULL ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = *(char ***)&_swig_go_1; 
  }
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_GetCurveGeometry(arg1,arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


OGRGeometryShadow *_wrap_Geometry_Value_ogr_1f1edc2fb82ebe9e(OGRGeometryShadow *_swig_go_0, double _swig_go_1) {
  OGRGeometryShadow *arg1 = (OGRGeometryShadow *) 0 ;
  double arg2 ;
  OGRGeometryShadow *result = 0 ;
  OGRGeometryShadow *_swig_go_result;
  
  arg1 = *(OGRGeometryShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  result = (OGRGeometryShadow *)OGRGeometryShadow_Value(arg1,arg2);
  *(OGRGeometryShadow **)&_swig_go_result = (OGRGeometryShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_OGRGetDriverCount_ogr_1f1edc2fb82ebe9e() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)OGRGetDriverCount();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_OGRGetOpenDSCount_ogr_1f1edc2fb82ebe9e() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)OGRGetOpenDSCount();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_OGRSetGenerate_DB2_V72_BYTE_ORDER_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  int arg1 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (OGRErr)OGRSetGenerate_DB2_V72_BYTE_ORDER(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_GeometryTypeToName_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  OGRwkbGeometryType arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (OGRwkbGeometryType)_swig_go_0; 
  
  result = (char *)OGRGeometryTypeToName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_GetFieldTypeName_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  OGRFieldType arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (OGRFieldType)_swig_go_0; 
  
  result = (char *)OGR_GetFieldTypeName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_GetFieldSubTypeName_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  OGRFieldSubType arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (OGRFieldSubType)_swig_go_0; 
  
  result = (char *)OGR_GetFieldSubTypeName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_GT_Flatten_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  OGRwkbGeometryType arg1 ;
  OGRwkbGeometryType result;
  intgo _swig_go_result;
  
  arg1 = (OGRwkbGeometryType)_swig_go_0; 
  
  result = (OGRwkbGeometryType)OGR_GT_Flatten(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GT_SetZ_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  OGRwkbGeometryType arg1 ;
  OGRwkbGeometryType result;
  intgo _swig_go_result;
  
  arg1 = (OGRwkbGeometryType)_swig_go_0; 
  
  result = (OGRwkbGeometryType)OGR_GT_SetZ(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GT_SetModifier_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  OGRwkbGeometryType arg1 ;
  int arg2 ;
  int arg3 = (int) FALSE ;
  OGRwkbGeometryType result;
  intgo _swig_go_result;
  
  arg1 = (OGRwkbGeometryType)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (int)_swig_go_2; 
  }
  
  result = (OGRwkbGeometryType)GT_SetModifier(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GT_HasZ_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  OGRwkbGeometryType arg1 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (OGRwkbGeometryType)_swig_go_0; 
  
  result = (int)OGR_GT_HasZ(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GT_IsSubClassOf_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0, intgo _swig_go_1) {
  OGRwkbGeometryType arg1 ;
  OGRwkbGeometryType arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (OGRwkbGeometryType)_swig_go_0; 
  arg2 = (OGRwkbGeometryType)_swig_go_1; 
  
  result = (int)OGR_GT_IsSubClassOf(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GT_IsCurve_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  OGRwkbGeometryType arg1 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (OGRwkbGeometryType)_swig_go_0; 
  
  result = (int)OGR_GT_IsCurve(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GT_IsSurface_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  OGRwkbGeometryType arg1 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (OGRwkbGeometryType)_swig_go_0; 
  
  result = (int)OGR_GT_IsSurface(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GT_IsNonLinear_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  OGRwkbGeometryType arg1 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (OGRwkbGeometryType)_swig_go_0; 
  
  result = (int)OGR_GT_IsNonLinear(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GT_GetCollection_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  OGRwkbGeometryType arg1 ;
  OGRwkbGeometryType result;
  intgo _swig_go_result;
  
  arg1 = (OGRwkbGeometryType)_swig_go_0; 
  
  result = (OGRwkbGeometryType)OGR_GT_GetCollection(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GT_GetCurve_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  OGRwkbGeometryType arg1 ;
  OGRwkbGeometryType result;
  intgo _swig_go_result;
  
  arg1 = (OGRwkbGeometryType)_swig_go_0; 
  
  result = (OGRwkbGeometryType)OGR_GT_GetCurve(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GT_GetLinear_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  OGRwkbGeometryType arg1 ;
  OGRwkbGeometryType result;
  intgo _swig_go_result;
  
  arg1 = (OGRwkbGeometryType)_swig_go_0; 
  
  result = (OGRwkbGeometryType)OGR_GT_GetLinear(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetNonLinearGeometriesEnabledFlag_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  int arg1 ;
  
  arg1 = (int)_swig_go_0; 
  
  OGRSetNonLinearGeometriesEnabledFlag(arg1);
  
}


intgo _wrap_GetNonLinearGeometriesEnabledFlag_ogr_1f1edc2fb82ebe9e() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)OGRGetNonLinearGeometriesEnabledFlag();
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRDataSourceShadow *_wrap_GetOpenDS_ogr_1f1edc2fb82ebe9e(intgo _swig_go_0) {
  int arg1 ;
  OGRDataSourceShadow *result = 0 ;
  OGRDataSourceShadow *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (OGRDataSourceShadow *)GetOpenDS(arg1);
  *(OGRDataSourceShadow **)&_swig_go_result = (OGRDataSourceShadow *)result; 
  return _swig_go_result;
}


OGRDataSourceShadow *_wrap_Open_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, _gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 = (int) 0 ;
  OGRDataSourceShadow *result = 0 ;
  OGRDataSourceShadow *_swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  
  result = (OGRDataSourceShadow *)Open((char const *)arg1,arg2);
  *(OGRDataSourceShadow **)&_swig_go_result = (OGRDataSourceShadow *)result; 
  return _swig_go_result;
}


OGRDataSourceShadow *_wrap_OpenShared_ogr_1f1edc2fb82ebe9e(intgo _swig_optargc, _gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 = (int) 0 ;
  OGRDataSourceShadow *result = 0 ;
  OGRDataSourceShadow *_swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  
  result = (OGRDataSourceShadow *)OpenShared((char const *)arg1,arg2);
  *(OGRDataSourceShadow **)&_swig_go_result = (OGRDataSourceShadow *)result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

