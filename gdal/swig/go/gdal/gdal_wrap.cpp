/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ../include/gdal.i

#define SWIGMODULE github.com/geo-data/go-gdal/gdal/swig/go/gdal

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


#define SWIG_exception(code, msg) _swig_gopanic(msg)


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}


#include <iostream>
using namespace std;

#include "cpl_port.h"
#include "cpl_string.h"
#include "cpl_multiproc.h"
#include "cpl_http.h"

#include "gdal.h"
#include "gdal_priv.h"
#include "gdal_alg.h"
#include "gdalwarper.h"

typedef void GDALMajorObjectShadow;
typedef void GDALDriverShadow;
typedef void GDALDatasetShadow;
typedef void GDALRasterBandShadow;
typedef void GDALColorTableShadow;
typedef void GDALRasterAttributeTableShadow;
typedef void GDALTransformerInfoShadow;
typedef void GDALAsyncReaderShadow;


#ifdef DEBUG 
typedef struct OGRSpatialReferenceHS OSRSpatialReferenceShadow;
typedef struct OGRLayerHS OGRLayerShadow;
typedef struct OGRGeometryHS OGRGeometryShadow;
#else
typedef void OSRSpatialReferenceShadow;
typedef void OGRLayerShadow;
typedef void OGRGeometryShadow;
#endif
typedef struct OGRStyleTableHS OGRStyleTableShadow;


/* use this to not return the int returned by GDAL */
typedef int RETURN_NONE;


typedef char retStringAndCPLFree;

SWIGINTERN char const *GDALMajorObjectShadow_GetDescription(GDALMajorObjectShadow *self){
    return GDALGetDescription( self );
  }
SWIGINTERN void GDALMajorObjectShadow_SetDescription(GDALMajorObjectShadow *self,char const *pszNewDesc){
    GDALSetDescription( self, pszNewDesc );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadataDomainList(GDALMajorObjectShadow *self){
    return GDALGetMetadataDomainList( self );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadata_Dict(GDALMajorObjectShadow *self,char const *pszDomain=""){
    return GDALGetMetadata( self, pszDomain );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadata_List(GDALMajorObjectShadow *self,char const *pszDomain=""){
    return GDALGetMetadata( self, pszDomain );
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadata__SWIG_0(GDALMajorObjectShadow *self,char **papszMetadata,char const *pszDomain=""){
    return GDALSetMetadata( self, papszMetadata, pszDomain );
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadata__SWIG_1(GDALMajorObjectShadow *self,char *pszMetadataString,char const *pszDomain=""){
    char *tmpList[2];
    tmpList[0] = pszMetadataString;
    tmpList[1] = 0;
    return GDALSetMetadata( self, tmpList, pszDomain );
  }
SWIGINTERN char const *GDALMajorObjectShadow_GetMetadataItem(GDALMajorObjectShadow *self,char const *pszName,char const *pszDomain=""){
    return GDALGetMetadataItem( self, pszName, pszDomain);
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadataItem(GDALMajorObjectShadow *self,char const *pszName,char const *pszValue,char const *pszDomain=""){
    return GDALSetMetadataItem( self, pszName, pszValue, pszDomain);
  }
SWIGINTERN GDALDatasetShadow *GDALDriverShadow_Create(GDALDriverShadow *self,char const *utf8_path,int xsize,int ysize,int bands=1,GDALDataType eType=GDT_Byte,char **options=0){

    GDALDatasetShadow* ds = (GDALDatasetShadow*) GDALCreate(    self, 
                                                                utf8_path, 
                                                                xsize, 
                                                                ysize, 
                                                                bands, 
                                                                eType, 
                                                                options );
    return ds;
  }
SWIGINTERN GDALDatasetShadow *GDALDriverShadow_CreateCopy(GDALDriverShadow *self,char const *utf8_path,GDALDatasetShadow *src,int strict=1,char **options=0,GDALProgressFunc callback=NULL,void *callback_data=NULL){

    GDALDatasetShadow *ds = (GDALDatasetShadow*) GDALCreateCopy(    self, 
                                                                    utf8_path, 
                                                                    src, 
                                                                    strict, 
                                                                    options, 
                                                                    callback, 
                                                                    callback_data );
    return ds;
  }
SWIGINTERN CPLErr GDALDriverShadow_Delete(GDALDriverShadow *self,char const *utf8_path){
    return GDALDeleteDataset( self, utf8_path );
  }
SWIGINTERN CPLErr GDALDriverShadow_Rename(GDALDriverShadow *self,char const *newName,char const *oldName){
    return GDALRenameDataset( self, newName, oldName );
  }
SWIGINTERN CPLErr GDALDriverShadow_CopyFiles(GDALDriverShadow *self,char const *newName,char const *oldName){
    return GDALCopyDatasetFiles( self, newName, oldName );
  }
SWIGINTERN int GDALDriverShadow_Register(GDALDriverShadow *self){
    return GDALRegisterDriver( self );
  }
SWIGINTERN void GDALDriverShadow_Deregister(GDALDriverShadow *self){
    GDALDeregisterDriver( self );
  }

char const *GDALDriverShadow_ShortName_get( GDALDriverShadow *h ) {
  return GDALGetDriverShortName( h );
}
char const *GDALDriverShadow_LongName_get( GDALDriverShadow *h ) {
  return GDALGetDriverLongName( h );
}
char const *GDALDriverShadow_HelpTopic_get( GDALDriverShadow *h ) {
  return GDALGetDriverHelpTopic( h );
}

SWIGINTERN GDAL_GCP *new_GDAL_GCP(double x=0.0,double y=0.0,double z=0.0,double pixel=0.0,double line=0.0,char const *info="",char const *id=""){

    GDAL_GCP *self = (GDAL_GCP*) CPLMalloc( sizeof( GDAL_GCP ) );
    self->dfGCPX = x;
    self->dfGCPY = y;
    self->dfGCPZ = z;
    self->dfGCPPixel = pixel;
    self->dfGCPLine = line;
    self->pszInfo =  CPLStrdup( (info == 0) ? "" : info );
    self->pszId = CPLStrdup( (id==0)? "" : id );
    return self;
  }
SWIGINTERN void delete_GDAL_GCP(GDAL_GCP *self){
    if ( self->pszInfo )
      CPLFree( self->pszInfo );
    if ( self->pszId )
      CPLFree( self->pszId );
    CPLFree( self );
  }


double GDAL_GCP_GCPX_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPX;
}
void GDAL_GCP_GCPX_set( GDAL_GCP *gcp, double dfGCPX ) {
  gcp->dfGCPX = dfGCPX;
}
double GDAL_GCP_GCPY_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPY;
}
void GDAL_GCP_GCPY_set( GDAL_GCP *gcp, double dfGCPY ) {
  gcp->dfGCPY = dfGCPY;
}
double GDAL_GCP_GCPZ_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPZ;
}
void GDAL_GCP_GCPZ_set( GDAL_GCP *gcp, double dfGCPZ ) {
  gcp->dfGCPZ = dfGCPZ;
}
double GDAL_GCP_GCPPixel_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPPixel;
}
void GDAL_GCP_GCPPixel_set( GDAL_GCP *gcp, double dfGCPPixel ) {
  gcp->dfGCPPixel = dfGCPPixel;
}
double GDAL_GCP_GCPLine_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPLine;
}
void GDAL_GCP_GCPLine_set( GDAL_GCP *gcp, double dfGCPLine ) {
  gcp->dfGCPLine = dfGCPLine;
}
const char * GDAL_GCP_Info_get( GDAL_GCP *gcp ) {
  return gcp->pszInfo;
}
void GDAL_GCP_Info_set( GDAL_GCP *gcp, const char * pszInfo ) {
  if ( gcp->pszInfo ) 
    CPLFree( gcp->pszInfo );
  gcp->pszInfo = CPLStrdup(pszInfo);
}
const char * GDAL_GCP_Id_get( GDAL_GCP *gcp ) {
  return gcp->pszId;
}
void GDAL_GCP_Id_set( GDAL_GCP *gcp, const char * pszId ) {
  if ( gcp->pszId ) 
    CPLFree( gcp->pszId );
  gcp->pszId = CPLStrdup(pszId);
}


/* Returned size is in bytes or 0 if an error occurred. */
static
GIntBig ComputeDatasetRasterIOSize (int buf_xsize, int buf_ysize, int nPixelSize,
                                int nBands, int* bandMap, int nBandMapArrayLength,
                                GIntBig nPixelSpace, GIntBig nLineSpace, GIntBig nBandSpace,
                                int bSpacingShouldBeMultipleOfPixelSize )
{
#if SIZEOF_VOIDP == 8
    const GIntBig MAX_INT = (((GIntBig)0x7fffffff) << 32) | 0xffffffff;
#else
    const GIntBig MAX_INT = 0x7fffffff;
#endif

    if (buf_xsize <= 0 || buf_ysize <= 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal values for buffer size");
        return 0;
    }

    if (nPixelSpace < 0 || nLineSpace < 0 || nBandSpace < 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal values for space arguments");
        return 0;
    }

    if (nPixelSize == 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal value for data type");
        return 0;
    }

    if( nPixelSpace == 0 )
        nPixelSpace = nPixelSize;
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nPixelSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nPixelSpace should be a multiple of nPixelSize");
        return 0;
    }

    if( nLineSpace == 0 )
    {
        nLineSpace = nPixelSpace * buf_xsize;
    }
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nLineSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nLineSpace should be a multiple of nPixelSize");
        return 0;
    }

    if( nBandSpace == 0 )
    {
        nBandSpace = nLineSpace * buf_ysize;
    }
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nBandSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nLineSpace should be a multiple of nPixelSize");
        return 0;
    }

    if (nBands <= 0 || (bandMap != NULL && nBands > nBandMapArrayLength))
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Invalid band count");
        return 0;
    }

    GIntBig nRet = (GIntBig)(buf_ysize - 1) * nLineSpace + (GIntBig)(buf_xsize - 1) * nPixelSpace + (GIntBig)(nBands - 1) * nBandSpace + nPixelSize;
    if (nRet > MAX_INT)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Integer overflow");
        return 0;
    }

    return nRet;
}


typedef struct
{
    GDALAsyncReaderH  hAsyncReader;
    void             *pyObject;
} GDALAsyncReaderWrapper;

typedef void* GDALAsyncReaderWrapperH;

static GDALAsyncReaderH AsyncReaderWrapperGetReader(GDALAsyncReaderWrapperH hWrapper)
{
    GDALAsyncReaderWrapper* psWrapper = (GDALAsyncReaderWrapper*)hWrapper;
    if (psWrapper->hAsyncReader == NULL)
    {
        CPLError(CE_Failure, CPLE_AppDefined, "AsyncReader object is defunct");
    }
    return psWrapper->hAsyncReader;
}

#if defined(SWIGPYTHON)
static void* AsyncReaderWrapperGetPyObject(GDALAsyncReaderWrapperH hWrapper)
{
    GDALAsyncReaderWrapper* psWrapper = (GDALAsyncReaderWrapper*)hWrapper;
    return psWrapper->pyObject;
}
#endif

static void DeleteAsyncReaderWrapper(GDALAsyncReaderWrapperH hWrapper)
{
    GDALAsyncReaderWrapper* psWrapper = (GDALAsyncReaderWrapper*)hWrapper;
    if (psWrapper->hAsyncReader != NULL)
    {
        CPLError(CE_Failure, CPLE_AppDefined,
                 "Native AsyncReader object will leak. EndAsyncReader() should have been called before");
    }
    CPLFree(psWrapper);
}


SWIGINTERN void delete_GDALAsyncReaderShadow(GDALAsyncReaderShadow *self){
        DeleteAsyncReaderWrapper(self);
    }
SWIGINTERN GDALAsyncStatusType GDALAsyncReaderShadow_GetNextUpdatedRegion(GDALAsyncReaderShadow *self,double timeout,int *xoff,int *yoff,int *buf_xsize,int *buf_ysize){
        GDALAsyncReaderH hReader = AsyncReaderWrapperGetReader(self);
        if (hReader == NULL)
        {
            *xoff = 0;
            *yoff = 0;
            *buf_xsize = 0;
            *buf_ysize = 0;
            return GARIO_ERROR;
        }
        return GDALARGetNextUpdatedRegion(hReader, timeout, xoff, yoff, buf_xsize, buf_ysize );
    }
SWIGINTERN int GDALAsyncReaderShadow_LockBuffer(GDALAsyncReaderShadow *self,double timeout){
        GDALAsyncReaderH hReader = AsyncReaderWrapperGetReader(self);
        if (hReader == NULL)
        {
            return 0;
        }
        return GDALARLockBuffer(hReader,timeout);
    }
SWIGINTERN void GDALAsyncReaderShadow_UnlockBuffer(GDALAsyncReaderShadow *self){
        GDALAsyncReaderH hReader = AsyncReaderWrapperGetReader(self);
        if (hReader == NULL)
        {
            return;
        }
        GDALARUnlockBuffer(hReader);
    }
SWIGINTERN void delete_GDALDatasetShadow(GDALDatasetShadow *self){
    if ( GDALDereferenceDataset( self ) <= 0 ) {
      GDALClose(self);
    }
  }
SWIGINTERN void GDALDatasetShadow_Close(GDALDatasetShadow *self){
    if ( GDALDereferenceDataset( self ) <= 0 ) {
      GDALClose(self);
    }
  }
SWIGINTERN GDALDriverShadow *GDALDatasetShadow_GetDriver(GDALDatasetShadow *self){
    return (GDALDriverShadow*) GDALGetDatasetDriver( self );
  }
SWIGINTERN GDALRasterBandShadow *GDALDatasetShadow_GetRasterBand(GDALDatasetShadow *self,int nBand){
    return (GDALRasterBandShadow*) GDALGetRasterBand( self, nBand );
  }
SWIGINTERN char const *GDALDatasetShadow_GetProjection(GDALDatasetShadow *self){
    return GDALGetProjectionRef( self );
  }
SWIGINTERN char const *GDALDatasetShadow_GetProjectionRef(GDALDatasetShadow *self){
    return GDALGetProjectionRef( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetProjection(GDALDatasetShadow *self,char const *prj){
    return GDALSetProjection( self, prj );
  }
SWIGINTERN void GDALDatasetShadow_GetGeoTransform(GDALDatasetShadow *self,double argout[6]){
    if ( GDALGetGeoTransform( self, argout ) != CE_None ) {
      argout[0] = 0.0;
      argout[1] = 1.0;
      argout[2] = 0.0;
      argout[3] = 0.0;
      argout[4] = 0.0;
      argout[5] = 1.0;
    }
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetGeoTransform(GDALDatasetShadow *self,double argin[6]){
    return GDALSetGeoTransform( self, argin );
  }
SWIGINTERN int GDALDatasetShadow_BuildOverviews(GDALDatasetShadow *self,char const *resampling="NEAREST",int overviewlist=0,int *pOverviews=0,GDALProgressFunc callback=NULL,void *callback_data=NULL){

    return GDALBuildOverviews(  self, 
                                resampling ? resampling : "NEAREST", 
                                overviewlist, 
                                pOverviews, 
                                0, 
                                0, 
                                callback, 
                                callback_data);
  }
SWIGINTERN int GDALDatasetShadow_GetGCPCount(GDALDatasetShadow *self){
    return GDALGetGCPCount( self );
  }
SWIGINTERN char const *GDALDatasetShadow_GetGCPProjection(GDALDatasetShadow *self){
    return GDALGetGCPProjection( self );
  }
SWIGINTERN void GDALDatasetShadow_GetGCPs(GDALDatasetShadow *self,int *nGCPs,GDAL_GCP const **pGCPs){
    *nGCPs = GDALGetGCPCount( self );
    *pGCPs = GDALGetGCPs( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetGCPs(GDALDatasetShadow *self,int nGCPs,GDAL_GCP const *pGCPs,char const *pszGCPProjection){
    return GDALSetGCPs( self, nGCPs, pGCPs, pszGCPProjection );
  }
SWIGINTERN void GDALDatasetShadow_FlushCache(GDALDatasetShadow *self){
    GDALFlushCache( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_AddBand(GDALDatasetShadow *self,GDALDataType datatype=GDT_Byte,char **options=0){
    return GDALAddBand( self, datatype, options );
  }
SWIGINTERN CPLErr GDALDatasetShadow_CreateMaskBand(GDALDatasetShadow *self,int nFlags){
      return GDALCreateDatasetMaskBand( self, nFlags );
  }
SWIGINTERN char **GDALDatasetShadow_GetFileList(GDALDatasetShadow *self){
    return GDALGetFileList( self );
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_CreateLayer(GDALDatasetShadow *self,char const *name,OSRSpatialReferenceShadow *srs,OGRwkbGeometryType geom_type,char **options){
    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetCreateLayer( self,
                                  name,
                                  srs,
                                  geom_type,
                                  options);
    return layer;
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_CopyLayer(GDALDatasetShadow *self,OGRLayerShadow *src_layer,char const *new_name,char **options=0){
    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetCopyLayer( self,
                                                      src_layer,
                                                      new_name,
                                                      options);
    return layer;
  }
SWIGINTERN OGRErr GDALDatasetShadow_DeleteLayer(GDALDatasetShadow *self,int index){
    return GDALDatasetDeleteLayer(self, index);
  }
SWIGINTERN int GDALDatasetShadow_GetLayerCount(GDALDatasetShadow *self){
    return GDALDatasetGetLayerCount(self);
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_GetLayerByIndex(GDALDatasetShadow *self,int index=0){

    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetGetLayer(self, index);
    return layer;
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_GetLayerByName(GDALDatasetShadow *self,char const *layer_name){
    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetGetLayerByName(self, layer_name);
    return layer;
  }
SWIGINTERN bool GDALDatasetShadow_TestCapability(GDALDatasetShadow *self,char const *cap){
    return (GDALDatasetTestCapability(self, cap) > 0);
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_ExecuteSQL(GDALDatasetShadow *self,char const *statement,OGRGeometryShadow *spatialFilter=NULL,char const *dialect=""){
    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetExecuteSQL(self,
                                                      statement,
                                                      spatialFilter,
                                                      dialect);
    return layer;
  }
SWIGINTERN void GDALDatasetShadow_ReleaseResultSet(GDALDatasetShadow *self,OGRLayerShadow *layer){
    GDALDatasetReleaseResultSet(self, layer);
  }
SWIGINTERN OGRStyleTableShadow *GDALDatasetShadow_GetStyleTable(GDALDatasetShadow *self){
    return (OGRStyleTableShadow*) GDALDatasetGetStyleTable(self);
  }
SWIGINTERN void GDALDatasetShadow_SetStyleTable(GDALDatasetShadow *self,OGRStyleTableShadow *table){
    if( table != NULL )
        GDALDatasetSetStyleTable(self, (OGRStyleTableH) table);
  }
SWIGINTERN OGRErr GDALDatasetShadow_StartTransaction(GDALDatasetShadow *self,int force=FALSE){
    return GDALDatasetStartTransaction(self, force);
  }
SWIGINTERN OGRErr GDALDatasetShadow_CommitTransaction(GDALDatasetShadow *self){
    return GDALDatasetCommitTransaction(self);
  }
SWIGINTERN OGRErr GDALDatasetShadow_RollbackTransaction(GDALDatasetShadow *self){
    return GDALDatasetRollbackTransaction(self);
  }

int GDALDatasetShadow_RasterXSize_get( GDALDatasetShadow *h ) {
  return GDALGetRasterXSize( h );
}
int GDALDatasetShadow_RasterYSize_get( GDALDatasetShadow *h ) {
  return GDALGetRasterYSize( h );
}
int GDALDatasetShadow_RasterCount_get( GDALDatasetShadow *h ) {
  return GDALGetRasterCount( h );
}


/* Returned size is in bytes or 0 if an error occurred. */
static
GIntBig ComputeBandRasterIOSize (int buf_xsize, int buf_ysize, int nPixelSize,
                                 GIntBig nPixelSpace, GIntBig nLineSpace,
                                 int bSpacingShouldBeMultipleOfPixelSize )
{
#if SIZEOF_VOIDP == 8
    const GIntBig MAX_INT = (((GIntBig)0x7fffffff) << 32) | 0xffffffff;
#else
    const GIntBig MAX_INT = 0x7fffffff;
#endif

    if (buf_xsize <= 0 || buf_ysize <= 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal values for buffer size");
        return 0;
    }

    if (nPixelSpace < 0 || nLineSpace < 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal values for space arguments");
        return 0;
    }

    if (nPixelSize == 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal value for data type");
        return 0;
    }

    if( nPixelSpace == 0 )
        nPixelSpace = nPixelSize;
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nPixelSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nPixelSpace should be a multiple of nPixelSize");
        return 0;
    }

    if( nLineSpace == 0 )
    {
        nLineSpace = nPixelSpace * buf_xsize;
    }
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nLineSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nLineSpace should be a multiple of nPixelSize");
        return 0;
    }

    GIntBig nRet = (GIntBig)(buf_ysize - 1) * nLineSpace + (GIntBig)(buf_xsize - 1) * nPixelSpace + nPixelSize;
    if (nRet > MAX_INT)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Integer overflow");
        return 0;
    }

    return nRet;
}

SWIGINTERN GDALDatasetShadow *GDALRasterBandShadow_GetDataset(GDALRasterBandShadow *self){
    return (GDALDatasetShadow*) GDALGetBandDataset(self);
  }
SWIGINTERN int GDALRasterBandShadow_GetBand(GDALRasterBandShadow *self){
    return GDALGetBandNumber(self);
  }
SWIGINTERN void GDALRasterBandShadow_GetBlockSize(GDALRasterBandShadow *self,int *pnBlockXSize,int *pnBlockYSize){
      GDALGetBlockSize(self, pnBlockXSize, pnBlockYSize);
  }
SWIGINTERN GDALColorInterp GDALRasterBandShadow_GetColorInterpretation(GDALRasterBandShadow *self){
    return GDALGetRasterColorInterpretation( self );
  }
SWIGINTERN GDALColorInterp GDALRasterBandShadow_GetRasterColorInterpretation(GDALRasterBandShadow *self){
    return GDALGetRasterColorInterpretation( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetColorInterpretation(GDALRasterBandShadow *self,GDALColorInterp val){
    return GDALSetRasterColorInterpretation( self, val );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetRasterColorInterpretation(GDALRasterBandShadow *self,GDALColorInterp val){
    return GDALSetRasterColorInterpretation( self, val );
  }
SWIGINTERN void GDALRasterBandShadow_GetNoDataValue(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterNoDataValue( self, hasval );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetNoDataValue(GDALRasterBandShadow *self,double d){
    return GDALSetRasterNoDataValue( self, d );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_DeleteNoDataValue(GDALRasterBandShadow *self){
    return GDALDeleteRasterNoDataValue( self );
  }
SWIGINTERN char const *GDALRasterBandShadow_GetUnitType(GDALRasterBandShadow *self){
      return GDALGetRasterUnitType( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetUnitType(GDALRasterBandShadow *self,char const *val){
    return GDALSetRasterUnitType( self, val );
  }
SWIGINTERN char **GDALRasterBandShadow_GetRasterCategoryNames(GDALRasterBandShadow *self){
    return GDALGetRasterCategoryNames( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetRasterCategoryNames(GDALRasterBandShadow *self,char **names){
    return GDALSetRasterCategoryNames( self, names );
  }
SWIGINTERN void GDALRasterBandShadow_GetMinimum(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterMinimum( self, hasval );
  }
SWIGINTERN void GDALRasterBandShadow_GetMaximum(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterMaximum( self, hasval );
  }
SWIGINTERN void GDALRasterBandShadow_GetOffset(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterOffset( self, hasval );
  }
SWIGINTERN void GDALRasterBandShadow_GetScale(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterScale( self, hasval );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetOffset(GDALRasterBandShadow *self,double val){
    return GDALSetRasterOffset( self, val );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetScale(GDALRasterBandShadow *self,double val){
    return GDALSetRasterScale( self, val );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetStatistics(GDALRasterBandShadow *self,int approx_ok,int force,double *min,double *max,double *mean,double *stddev){
    if (min) *min = 0;
    if (max) *max = 0;
    if (mean) *mean = 0;
    if (stddev) *stddev = -1; /* This is the only way to recognize from Python if GetRasterStatistics() has updated the values */
    return GDALGetRasterStatistics( self, approx_ok, force, 
				    min, max, mean, stddev );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_ComputeStatistics(GDALRasterBandShadow *self,bool approx_ok,double *min=NULL,double *max=NULL,double *mean=NULL,double *stddev=NULL,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return GDALComputeRasterStatistics( self, approx_ok, min, max, mean, stddev, callback, callback_data );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetStatistics(GDALRasterBandShadow *self,double min,double max,double mean,double stddev){
    return GDALSetRasterStatistics( self, min, max, mean, stddev );
  }
SWIGINTERN int GDALRasterBandShadow_GetOverviewCount(GDALRasterBandShadow *self){
    return GDALGetOverviewCount( self );
  }
SWIGINTERN GDALRasterBandShadow *GDALRasterBandShadow_GetOverview(GDALRasterBandShadow *self,int i){
    return (GDALRasterBandShadow*) GDALGetOverview( self, i );
  }
SWIGINTERN int GDALRasterBandShadow_Checksum(GDALRasterBandShadow *self,int xoff=0,int yoff=0,int *xsize=0,int *ysize=0){
    int nxsize = (xsize!=0) ? *xsize : GDALGetRasterBandXSize( self );
    int nysize = (ysize!=0) ? *ysize : GDALGetRasterBandYSize( self );
    return GDALChecksumImage( self, xoff, yoff, nxsize, nysize );
  }
SWIGINTERN void GDALRasterBandShadow_ComputeRasterMinMax(GDALRasterBandShadow *self,double argout[2],int approx_ok=0){
    GDALComputeRasterMinMax( self, approx_ok, argout );
  }
SWIGINTERN void GDALRasterBandShadow_ComputeBandStats(GDALRasterBandShadow *self,double argout[2],int samplestep=1){
    GDALComputeBandStats( self, samplestep, argout+0, argout+1, 
                          NULL, NULL );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_Fill(GDALRasterBandShadow *self,double real_fill,double imag_fill=0.0){
    return GDALFillRaster( self, real_fill, imag_fill );
  }
SWIGINTERN void GDALRasterBandShadow_FlushCache(GDALRasterBandShadow *self){
    GDALFlushRasterCache( self );
  }
SWIGINTERN GDALColorTableShadow *GDALRasterBandShadow_GetRasterColorTable(GDALRasterBandShadow *self){
    return (GDALColorTableShadow*) GDALGetRasterColorTable( self );
  }
SWIGINTERN GDALColorTableShadow *GDALRasterBandShadow_GetColorTable(GDALRasterBandShadow *self){
    return (GDALColorTableShadow*) GDALGetRasterColorTable( self );
  }
SWIGINTERN int GDALRasterBandShadow_SetRasterColorTable(GDALRasterBandShadow *self,GDALColorTableShadow *arg){
    return GDALSetRasterColorTable( self, arg );
  }
SWIGINTERN int GDALRasterBandShadow_SetColorTable(GDALRasterBandShadow *self,GDALColorTableShadow *arg){
    return GDALSetRasterColorTable( self, arg );
  }
SWIGINTERN GDALRasterAttributeTableShadow *GDALRasterBandShadow_GetDefaultRAT(GDALRasterBandShadow *self){ 
      return (GDALRasterAttributeTableShadow*) GDALGetDefaultRAT(self);
  }
SWIGINTERN int GDALRasterBandShadow_SetDefaultRAT(GDALRasterBandShadow *self,GDALRasterAttributeTableShadow *table){
      return GDALSetDefaultRAT(self, table);
  }
SWIGINTERN GDALRasterBandShadow *GDALRasterBandShadow_GetMaskBand(GDALRasterBandShadow *self){
      return (GDALRasterBandShadow *) GDALGetMaskBand( self );
  }
SWIGINTERN int GDALRasterBandShadow_GetMaskFlags(GDALRasterBandShadow *self){
      return GDALGetMaskFlags( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_CreateMaskBand(GDALRasterBandShadow *self,int nFlags){
      return GDALCreateMaskBand( self, nFlags );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetHistogram(GDALRasterBandShadow *self,double min=-0.5,double max=255.5,int buckets=256,GUIntBig *panHistogram=NULL,int include_out_of_range=0,int approx_ok=1,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    CPLErrorReset(); 
    CPLErr err = GDALGetRasterHistogramEx( self, min, max, buckets, panHistogram,
                                         include_out_of_range, approx_ok,
                                         callback, callback_data );
    return err;
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetDefaultHistogram(GDALRasterBandShadow *self,double *min_ret=NULL,double *max_ret=NULL,int *buckets_ret=NULL,GUIntBig **ppanHistogram=NULL,int force=1,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return GDALGetDefaultHistogramEx( self, min_ret, max_ret, buckets_ret,
                                    ppanHistogram, force, 
                                    callback, callback_data );
}
SWIGINTERN CPLErr GDALRasterBandShadow_SetDefaultHistogram(GDALRasterBandShadow *self,double min,double max,int buckets_in,GUIntBig *panHistogram_in){
    return GDALSetDefaultHistogramEx( self, min, max, 
                                    buckets_in, panHistogram_in );
}
SWIGINTERN bool GDALRasterBandShadow_HasArbitraryOverviews(GDALRasterBandShadow *self){
      return (GDALHasArbitraryOverviews( self ) != 0) ? true : false;
  }
SWIGINTERN char **GDALRasterBandShadow_GetCategoryNames(GDALRasterBandShadow *self){
    return GDALGetRasterCategoryNames( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetCategoryNames(GDALRasterBandShadow *self,char **papszCategoryNames){
    return GDALSetRasterCategoryNames( self, papszCategoryNames );
  }

GDALDataType GDALRasterBandShadow_DataType_get( GDALRasterBandShadow *h ) {
  return GDALGetRasterDataType( h );
}
int GDALRasterBandShadow_XSize_get( GDALRasterBandShadow *h ) {
  return GDALGetRasterBandXSize( h );
}
int GDALRasterBandShadow_YSize_get( GDALRasterBandShadow *h ) {
  return GDALGetRasterBandYSize( h );
}

SWIGINTERN GDALColorTableShadow *new_GDALColorTableShadow(GDALPaletteInterp palette=GPI_RGB){
        return (GDALColorTableShadow*) GDALCreateColorTable(palette);
    }
SWIGINTERN void delete_GDALColorTableShadow(GDALColorTableShadow *self){
        GDALDestroyColorTable(self);
    }
SWIGINTERN GDALColorTableShadow *GDALColorTableShadow_Clone(GDALColorTableShadow *self){
        return (GDALColorTableShadow*) GDALCloneColorTable (self);
    }
SWIGINTERN GDALPaletteInterp GDALColorTableShadow_GetPaletteInterpretation(GDALColorTableShadow *self){
        return GDALGetPaletteInterpretation(self);
    }
SWIGINTERN int GDALColorTableShadow_GetColorEntryCount(GDALColorTableShadow *self){
        return GDALGetColorEntryCount(self);
    }
SWIGINTERN GDALColorEntry *GDALColorTableShadow_GetColorEntry(GDALColorTableShadow *self,int entry){
        return (GDALColorEntry*) GDALGetColorEntry(self, entry);
    }
SWIGINTERN int GDALColorTableShadow_GetColorEntryAsRGB(GDALColorTableShadow *self,int entry,GDALColorEntry *centry){
        return GDALGetColorEntryAsRGB(self, entry, centry);
    }
SWIGINTERN void GDALColorTableShadow_SetColorEntry(GDALColorTableShadow *self,int entry,GDALColorEntry const *centry){
        GDALSetColorEntry(self, entry, centry);
    }
SWIGINTERN void GDALColorTableShadow_CreateColorRamp(GDALColorTableShadow *self,int nStartIndex,GDALColorEntry const *startcolor,int nEndIndex,GDALColorEntry const *endcolor){
        GDALCreateColorRamp(self, nStartIndex, startcolor, nEndIndex, endcolor);
    }
SWIGINTERN GDALRasterAttributeTableShadow *new_GDALRasterAttributeTableShadow(){
        return (GDALRasterAttributeTableShadow*) 
		GDALCreateRasterAttributeTable();
    }
SWIGINTERN void delete_GDALRasterAttributeTableShadow(GDALRasterAttributeTableShadow *self){
        GDALDestroyRasterAttributeTable(self);
    }
SWIGINTERN GDALRasterAttributeTableShadow *GDALRasterAttributeTableShadow_Clone(GDALRasterAttributeTableShadow *self){
        return (GDALRasterAttributeTableShadow*) GDALRATClone(self);
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetColumnCount(GDALRasterAttributeTableShadow *self){ 
        return GDALRATGetColumnCount( self );
    }
SWIGINTERN char const *GDALRasterAttributeTableShadow_GetNameOfCol(GDALRasterAttributeTableShadow *self,int iCol){ 
        return GDALRATGetNameOfCol( self, iCol );
    }
SWIGINTERN GDALRATFieldUsage GDALRasterAttributeTableShadow_GetUsageOfCol(GDALRasterAttributeTableShadow *self,int iCol){
        return GDALRATGetUsageOfCol( self, iCol );
    }
SWIGINTERN GDALRATFieldType GDALRasterAttributeTableShadow_GetTypeOfCol(GDALRasterAttributeTableShadow *self,int iCol){
        return GDALRATGetTypeOfCol( self, iCol );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetColOfUsage(GDALRasterAttributeTableShadow *self,GDALRATFieldUsage eUsage){
        return GDALRATGetColOfUsage( self, eUsage );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetRowCount(GDALRasterAttributeTableShadow *self){ 
        return GDALRATGetRowCount( self );
    }
SWIGINTERN char const *GDALRasterAttributeTableShadow_GetValueAsString(GDALRasterAttributeTableShadow *self,int iRow,int iCol){ 
        return GDALRATGetValueAsString( self, iRow, iCol );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetValueAsInt(GDALRasterAttributeTableShadow *self,int iRow,int iCol){ 
        return GDALRATGetValueAsInt( self, iRow, iCol );
    }
SWIGINTERN double GDALRasterAttributeTableShadow_GetValueAsDouble(GDALRasterAttributeTableShadow *self,int iRow,int iCol){ 
        return GDALRATGetValueAsDouble( self, iRow, iCol );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetValueAsString(GDALRasterAttributeTableShadow *self,int iRow,int iCol,char const *pszValue){ 
        GDALRATSetValueAsString( self, iRow, iCol, pszValue );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetValueAsInt(GDALRasterAttributeTableShadow *self,int iRow,int iCol,int nValue){ 
        GDALRATSetValueAsInt( self, iRow, iCol, nValue );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetValueAsDouble(GDALRasterAttributeTableShadow *self,int iRow,int iCol,double dfValue){ 
        GDALRATSetValueAsDouble( self, iRow, iCol, dfValue );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetRowCount(GDALRasterAttributeTableShadow *self,int nCount){
        GDALRATSetRowCount( self, nCount );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_CreateColumn(GDALRasterAttributeTableShadow *self,char const *pszName,GDALRATFieldType eType,GDALRATFieldUsage eUsage){
        return GDALRATCreateColumn( self, pszName, eType, eUsage );
    }
SWIGINTERN bool GDALRasterAttributeTableShadow_GetLinearBinning(GDALRasterAttributeTableShadow *self,double *pdfRow0Min,double *pdfBinSize){
        return (GDALRATGetLinearBinning(self, pdfRow0Min, pdfBinSize) != 0) ? true : false;
    }
SWIGINTERN int GDALRasterAttributeTableShadow_SetLinearBinning(GDALRasterAttributeTableShadow *self,double dfRow0Min,double dfBinSize){
        return GDALRATSetLinearBinning(self, dfRow0Min, dfBinSize);
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetRowOfValue(GDALRasterAttributeTableShadow *self,double dfValue){
        return GDALRATGetRowOfValue( self, dfValue );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_ChangesAreWrittenToFile(GDALRasterAttributeTableShadow *self){
        return GDALRATChangesAreWrittenToFile( self );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_DumpReadable(GDALRasterAttributeTableShadow *self){
        GDALRATDumpReadable( self, NULL );
    }

#include "gdalgrid.h"

#ifdef DEBUG 
typedef struct OGRLayerHS OGRLayerShadow;
typedef struct OGRGeometryHS OGRGeometryShadow;
#else
typedef void OGRLayerShadow;
typedef void OGRGeometryShadow;
#endif


int GDALTermProgress_nocb( double dfProgress, const char * pszMessage=NULL, void *pData=NULL ) {
  return GDALTermProgress( dfProgress, pszMessage, pData);
}


int  ComputeMedianCutPCT ( GDALRasterBandShadow *red,
                              GDALRasterBandShadow *green,
                              GDALRasterBandShadow *blue,
                              int num_colors,
                              GDALColorTableShadow* colors,
                              GDALProgressFunc callback = NULL,
                              void* callback_data=NULL) {

    CPLErrorReset();

    int err = GDALComputeMedianCutPCT( red,
                                          green,
                                          blue,
                                          NULL,
                                          num_colors,
                                          colors,
                                          callback,
                                          callback_data);
    
    return err;
}


int  DitherRGB2PCT ( GDALRasterBandShadow *red,
                     GDALRasterBandShadow *green,
                     GDALRasterBandShadow *blue,
                     GDALRasterBandShadow *target,
                     GDALColorTableShadow *colors,
                     GDALProgressFunc callback = NULL,
                     void* callback_data=NULL) {

    CPLErrorReset();
    int err;
    err = GDALDitherRGB2PCT(  red,
                                  green,
                                  blue,
                                  target,
                                  colors,
                                  callback,
                                  callback_data);
    
    return err;
}


CPLErr  ReprojectImage ( GDALDatasetShadow *src_ds,
                         GDALDatasetShadow *dst_ds,
                         const char *src_wkt=NULL,
                         const char *dst_wkt=NULL,
                         GDALResampleAlg eResampleAlg=GRA_NearestNeighbour,
                         double WarpMemoryLimit=0.0,
                         double maxerror = 0.0,
			 GDALProgressFunc callback = NULL,
                     	 void* callback_data=NULL,
                         char** options = NULL ) {

    CPLErrorReset();

    GDALWarpOptions* psOptions = NULL;
    if( options != NULL )
    {
        psOptions = GDALCreateWarpOptions();
        psOptions->papszWarpOptions = CSLDuplicate(options);
    }

    CPLErr err = GDALReprojectImage( src_ds,
                                     src_wkt,
                                     dst_ds,
                                     dst_wkt,
                                     eResampleAlg,
                                     WarpMemoryLimit,
                                     maxerror,
                                     callback,
                                     callback_data,
                                     psOptions);

    if( psOptions != NULL )
        GDALDestroyWarpOptions(psOptions);

    return err;
}


int  ComputeProximity( GDALRasterBandShadow *srcBand,
                       GDALRasterBandShadow *proximityBand,
                       char **options = NULL,
                       GDALProgressFunc callback=NULL,
                       void* callback_data=NULL) {

    CPLErrorReset();

    return GDALComputeProximity( srcBand, proximityBand, options,
                                 callback, callback_data );
}


int  RasterizeLayer( GDALDatasetShadow *dataset,
                 int bands, int *band_list,
                 OGRLayerShadow *layer,
                 void *pfnTransformer = NULL,
                 void *pTransformArg = NULL, 
		 int burn_values = 0, double *burn_values_list = NULL, 
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErr eErr;

    CPLErrorReset();

    if( burn_values == 0 )
    {
        burn_values_list = (double *) CPLMalloc(sizeof(double)*bands);
        for( int i = 0; i < bands; i++ )
            burn_values_list[i] = 255.0;
    }
    else if( burn_values != bands )
    {
        CPLError( CE_Failure, CPLE_AppDefined, 
                  "Did not get the expected number of burn values in RasterizeLayer()" );
        return CE_Failure;
    }

    eErr = GDALRasterizeLayers( dataset, bands, band_list,
                                1, &layer, 
                                (GDALTransformerFunc) pfnTransformer, 
                                pTransformArg,
                                burn_values_list, options, 
                                callback, callback_data );

    if( burn_values == 0 )
        CPLFree( burn_values_list );

    return eErr;
}


int  Polygonize( GDALRasterBandShadow *srcBand,
     		 GDALRasterBandShadow *maskBand,
  	         OGRLayerShadow *outLayer, 
                 int iPixValField,
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErrorReset();

    return GDALPolygonize( srcBand, maskBand, outLayer, iPixValField,
                           options, callback, callback_data );
}


int  FPolygonize( GDALRasterBandShadow *srcBand,
                 GDALRasterBandShadow *maskBand,
                 OGRLayerShadow *outLayer, 
                 int iPixValField,
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErrorReset();

    return GDALFPolygonize( srcBand, maskBand, outLayer, iPixValField,
                           options, callback, callback_data );
}


int  FillNodata( GDALRasterBandShadow *targetBand,
     		 GDALRasterBandShadow *maskBand,
                 double maxSearchDist,
                 int smoothingIterations,
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErrorReset();

    return GDALFillNodata( targetBand, maskBand, maxSearchDist, 
    	   		   0, smoothingIterations, options, 
			   callback, callback_data );
}


int  SieveFilter( GDALRasterBandShadow *srcBand,
     		  GDALRasterBandShadow *maskBand,
  	          GDALRasterBandShadow *dstBand,
                  int threshold, int connectedness=4,
                  char **options = NULL,
                  GDALProgressFunc callback=NULL,
                  void* callback_data=NULL) {

    CPLErrorReset();

    return GDALSieveFilter( srcBand, maskBand, dstBand, 
                            threshold, connectedness,
                            options, callback, callback_data );
}


int  RegenerateOverviews( GDALRasterBandShadow *srcBand,
     			  int overviewBandCount,
                          GDALRasterBandShadow **overviewBands,
                          const char *resampling = "average",
                          GDALProgressFunc callback=NULL,
                          void* callback_data=NULL) {

    CPLErrorReset();

    return GDALRegenerateOverviews( srcBand, overviewBandCount, overviewBands,
    	   			    resampling ? resampling : "average", callback, callback_data );
}


int  RegenerateOverview( GDALRasterBandShadow *srcBand,
                          GDALRasterBandShadow *overviewBand,
                          const char *resampling = "average",
                          GDALProgressFunc callback=NULL,
                          void* callback_data=NULL) {

    CPLErrorReset();

    return GDALRegenerateOverviews( srcBand, 1, &overviewBand,
    	   			    resampling ? resampling : "average", callback, callback_data );
}


int ContourGenerate( GDALRasterBandShadow *srcBand,
                     double contourInterval,
                     double contourBase,
                     int fixedLevelCount,
                     double *fixedLevels,
                     int useNoData,
                     double noDataValue,
                     OGRLayerShadow* dstLayer, 
                     int idField,
                     int elevField,
                     GDALProgressFunc callback = NULL,
                     void* callback_data = NULL)
{
    CPLErr eErr;

    CPLErrorReset();

    eErr =  GDALContourGenerate( srcBand,
                                 contourInterval,
                                 contourBase,
                                 fixedLevelCount,
                                 fixedLevels,
                                 useNoData,
                                 noDataValue,
                                 dstLayer,
                                 idField,
                                 elevField,
                                 callback,
                                 callback_data);

    return eErr;
}


GDALDatasetShadow *AutoCreateWarpedVRT( GDALDatasetShadow *src_ds,
                                        const char *src_wkt = 0,
                                        const char *dst_wkt = 0,
                                        GDALResampleAlg eResampleAlg = GRA_NearestNeighbour,
                                        double maxerror = 0.0 ) {
  GDALDatasetShadow *ds = GDALAutoCreateWarpedVRT( src_ds, src_wkt,
                                                   dst_wkt,
                                                   eResampleAlg,
                                                   maxerror,
                                                   0 );
  if (ds == 0) {
    /*throw CPLGetLastErrorMsg(); causes a SWIG_exception later*/
  }
  return ds;
  
}


GDALDatasetShadow*  CreatePansharpenedVRT( const char* pszXML,
                            GDALRasterBandShadow* panchroBand,
                            int nInputSpectralBands,
                            GDALRasterBandShadow** ahInputSpectralBands )
{
    CPLErrorReset();

    return (GDALDatasetShadow*)GDALCreatePansharpenedVRT( pszXML, panchroBand,
                                      nInputSpectralBands, ahInputSpectralBands );
}

SWIGINTERN GDALTransformerInfoShadow *new_GDALTransformerInfoShadow(GDALDatasetShadow *src,GDALDatasetShadow *dst,char **options){
    GDALTransformerInfoShadow *obj = (GDALTransformerInfoShadow*) 
       GDALCreateGenImgProjTransformer2( (GDALDatasetH)src, (GDALDatasetH)dst, 
                                         options );
    return obj;
  }
SWIGINTERN void delete_GDALTransformerInfoShadow(GDALTransformerInfoShadow *self){
    GDALDestroyTransformer( self );
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformPoint__SWIG_0(GDALTransformerInfoShadow *self,int bDstToSrc,double inout[3]){
    int nRet, nSuccess = TRUE;

    nRet = GDALUseTransformer( self, bDstToSrc, 
                               1, &inout[0], &inout[1], &inout[2], 
                               &nSuccess );

    return nRet && nSuccess;
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformPoint__SWIG_1(GDALTransformerInfoShadow *self,double argout[3],int bDstToSrc,double x,double y,double z=0.0){
    int nRet, nSuccess = TRUE;
    
    argout[0] = x;
    argout[1] = y;
    argout[2] = z;
    nRet = GDALUseTransformer( self, bDstToSrc, 
                               1, &argout[0], &argout[1], &argout[2], 
                               &nSuccess );

    return nRet && nSuccess;
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformPoints(GDALTransformerInfoShadow *self,int bDstToSrc,int nCount,double *x,double *y,double *z,int *panSuccess){
    int nRet;

    nRet = GDALUseTransformer( self, bDstToSrc, nCount, x, y, z, panSuccess );

    return nRet;
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformGeolocations(GDALTransformerInfoShadow *self,GDALRasterBandShadow *xBand,GDALRasterBandShadow *yBand,GDALRasterBandShadow *zBand,GDALProgressFunc callback=NULL,void *callback_data=NULL,char **options=NULL){

    CPLErrorReset();

    return GDALTransformGeolocations( xBand, yBand, zBand, 
                                      GDALUseTransformer, self,
                            	      callback, callback_data, options );
  }

int wrapper_GDALGetCacheMax()
{
    return GDALGetCacheMax();
}


int wrapper_GDALGetCacheUsed()
{
    return GDALGetCacheUsed();
}


void wrapper_GDALSetCacheMax(int nBytes)
{
    return GDALSetCacheMax(nBytes);
}


retStringAndCPLFree *GetJPEG2000StructureAsString( const char* pszFilename, char** options = NULL )
{
    CPLXMLNode* psNode = GDALGetJPEG2000Structure(pszFilename, options);
    if( psNode == NULL )
        return NULL;
    char* pszXML = CPLSerializeXMLTree(psNode);
    CPLDestroyXMLNode(psNode);
    return pszXML;
}


int GetDriverCount() {
  return GDALGetDriverCount();
}


GDALDriverShadow* GetDriverByName( char const *name ) {
  return (GDALDriverShadow*) GDALGetDriverByName( name );
}


GDALDriverShadow* GetDriver( int i ) {
  return (GDALDriverShadow*) GDALGetDriver( i );
}


GDALDatasetShadow* Open( char const* utf8_path, GDALAccess eAccess = GA_ReadOnly ) {
  CPLErrorReset();
  GDALDatasetShadow *ds = GDALOpen( utf8_path, eAccess );
  if( ds != NULL && CPLGetLastErrorType() == CE_Failure )
  {
      if ( GDALDereferenceDataset( ds ) <= 0 )
          GDALClose(ds);
      ds = NULL;
  }
  return (GDALDatasetShadow*) ds;
}


GDALDatasetShadow* OpenEx( char const* utf8_path, unsigned int nOpenFlags = 0,
                           char** allowed_drivers = NULL, char** open_options = NULL,
                           char** sibling_files = NULL ) {
  CPLErrorReset();
#ifdef SWIGPYTHON
  if( GetUseExceptions() )
      nOpenFlags |= GDAL_OF_VERBOSE_ERROR;
#endif
  GDALDatasetShadow *ds = GDALOpenEx( utf8_path, nOpenFlags, allowed_drivers,
                                      open_options, sibling_files );
  if( ds != NULL && CPLGetLastErrorType() == CE_Failure )
  {
      if ( GDALDereferenceDataset( ds ) <= 0 )
          GDALClose(ds);
      ds = NULL;
  }
  return (GDALDatasetShadow*) ds;
}


GDALDatasetShadow* OpenShared( char const* utf8_path, GDALAccess eAccess = GA_ReadOnly ) {
  CPLErrorReset();
  GDALDatasetShadow *ds = GDALOpenShared( utf8_path, eAccess );
  if( ds != NULL && CPLGetLastErrorType() == CE_Failure )
  {
      if ( GDALDereferenceDataset( ds ) <= 0 )
          GDALClose(ds);
      ds = NULL;
  }
  return (GDALDatasetShadow*) ds;
}


GDALDriverShadow *IdentifyDriver( const char *utf8_path, 
                                  char **papszSiblings = NULL ) {
    return (GDALDriverShadow *) GDALIdentifyDriver( utf8_path, 
	                                            papszSiblings );
}


  char **GeneralCmdLineProcessor( char **papszArgv, int nOptions = 0 ) {
    int nResArgCount;

    nResArgCount = 
      GDALGeneralCmdLineProcessor( CSLCount(papszArgv), &papszArgv, nOptions ); 

    if( nResArgCount <= 0 )
        return NULL;
    else
        return papszArgv;
  }


#include "gdal_utils.h"   

SWIGINTERN GDALInfoOptions *new_GDALInfoOptions(char **options){
        return GDALInfoOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALInfoOptions(GDALInfoOptions *self){
        GDALInfoOptionsFree( self );
    }
SWIGINTERN GDALTranslateOptions *new_GDALTranslateOptions(char **options){
        return GDALTranslateOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALTranslateOptions(GDALTranslateOptions *self){
        GDALTranslateOptionsFree( self );
    }

GDALDatasetShadow* wrapper_GDALTranslate( const char* dest,
                                      GDALDatasetShadow* dataset,
                                      GDALTranslateOptions* translateOptions,
                                      GDALProgressFunc callback=NULL,
                                      void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( translateOptions == NULL )
        {
            bFreeOptions = true;
            translateOptions = GDALTranslateOptionsNew(NULL, NULL);
        }
        GDALTranslateOptionsSetProgress(translateOptions, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALTranslate(dest, dataset, translateOptions, &usageError);    
    if( bFreeOptions )
        GDALTranslateOptionsFree(translateOptions);
    return hDSRet;
}

SWIGINTERN GDALWarpAppOptions *new_GDALWarpAppOptions(char **options){
        return GDALWarpAppOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALWarpAppOptions(GDALWarpAppOptions *self){
        GDALWarpAppOptionsFree( self );
    }

int wrapper_GDALWarpDestDS( GDALDatasetShadow* dstDS,
                            int object_list_count, GDALDatasetShadow** poObjects,
                            GDALWarpAppOptions* warpAppOptions,
                            GDALProgressFunc callback=NULL,
                            void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( warpAppOptions == NULL )
        {
            bFreeOptions = true;
            warpAppOptions = GDALWarpAppOptionsNew(NULL, NULL);
        }
        GDALWarpAppOptionsSetProgress(warpAppOptions, callback, callback_data);
    }
    int bRet = (GDALWarp(NULL, dstDS, object_list_count, poObjects, warpAppOptions, &usageError) != NULL);
    if( bFreeOptions )
        GDALWarpAppOptionsFree(warpAppOptions);
    return bRet;
}


GDALDatasetShadow* wrapper_GDALWarpDestName( const char* dest,
                                             int object_list_count, GDALDatasetShadow** poObjects,
                                             GDALWarpAppOptions* warpAppOptions,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( warpAppOptions == NULL )
        {
            bFreeOptions = true;
            warpAppOptions = GDALWarpAppOptionsNew(NULL, NULL);
        }
        GDALWarpAppOptionsSetProgress(warpAppOptions, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALWarp(dest, NULL, object_list_count, poObjects, warpAppOptions, &usageError);
    if( bFreeOptions )
        GDALWarpAppOptionsFree(warpAppOptions);
    return hDSRet;
}

SWIGINTERN GDALVectorTranslateOptions *new_GDALVectorTranslateOptions(char **options){
        return GDALVectorTranslateOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALVectorTranslateOptions(GDALVectorTranslateOptions *self){
        GDALVectorTranslateOptionsFree( self );
    }

int wrapper_GDALVectorTranslateDestDS( GDALDatasetShadow* dstDS,
                                       GDALDatasetShadow* srcDS,
                            GDALVectorTranslateOptions* options,
                            GDALProgressFunc callback=NULL,
                            void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALVectorTranslateOptionsNew(NULL, NULL);
        }
        GDALVectorTranslateOptionsSetProgress(options, callback, callback_data);
    }
    int bRet = (GDALVectorTranslate(NULL, dstDS, 1, &srcDS, options, &usageError) != NULL);
    if( bFreeOptions )
        GDALVectorTranslateOptionsFree(options);
    return bRet;
}


GDALDatasetShadow* wrapper_GDALVectorTranslateDestName( const char* dest,
                                             GDALDatasetShadow* srcDS,
                                             GDALVectorTranslateOptions* options,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALVectorTranslateOptionsNew(NULL, NULL);
        }
        GDALVectorTranslateOptionsSetProgress(options, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALVectorTranslate(dest, NULL, 1, &srcDS, options, &usageError);
    if( bFreeOptions )
        GDALVectorTranslateOptionsFree(options);
    return hDSRet;
}

SWIGINTERN GDALDEMProcessingOptions *new_GDALDEMProcessingOptions(char **options){
        return GDALDEMProcessingOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALDEMProcessingOptions(GDALDEMProcessingOptions *self){
        GDALDEMProcessingOptionsFree( self );
    }

GDALDatasetShadow* wrapper_GDALDEMProcessing( const char* dest,
                                      GDALDatasetShadow* dataset,
                                      const char* pszProcessing,
                                      const char* pszColorFilename,
                                      GDALDEMProcessingOptions* options,
                                      GDALProgressFunc callback=NULL,
                                      void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALDEMProcessingOptionsNew(NULL, NULL);
        }
        GDALDEMProcessingOptionsSetProgress(options, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALDEMProcessing(dest, dataset, pszProcessing, pszColorFilename, options, &usageError);    
    if( bFreeOptions )
        GDALDEMProcessingOptionsFree(options);
    return hDSRet;
}

SWIGINTERN GDALNearblackOptions *new_GDALNearblackOptions(char **options){
        return GDALNearblackOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALNearblackOptions(GDALNearblackOptions *self){
        GDALNearblackOptionsFree( self );
    }

int wrapper_GDALNearblackDestDS( GDALDatasetShadow* dstDS,
                            GDALDatasetShadow* srcDS,
                            GDALNearblackOptions* options,
                            GDALProgressFunc callback=NULL,
                            void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALNearblackOptionsNew(NULL, NULL);
        }
        GDALNearblackOptionsSetProgress(options, callback, callback_data);
    }
    int bRet = (GDALNearblack(NULL, dstDS, srcDS, options, &usageError) != NULL);
    if( bFreeOptions )
        GDALNearblackOptionsFree(options);
    return bRet;
}


GDALDatasetShadow* wrapper_GDALNearblackDestName( const char* dest,
                                             GDALDatasetShadow* srcDS,
                                             GDALNearblackOptions* options,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALNearblackOptionsNew(NULL, NULL);
        }
        GDALNearblackOptionsSetProgress(options, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALNearblack(dest, NULL, srcDS, options, &usageError);
    if( bFreeOptions )
        GDALNearblackOptionsFree(options);
    return hDSRet;
}

SWIGINTERN GDALGridOptions *new_GDALGridOptions(char **options){
        return GDALGridOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALGridOptions(GDALGridOptions *self){
        GDALGridOptionsFree( self );
    }

GDALDatasetShadow* wrapper_GDALGrid( const char* dest,
                                      GDALDatasetShadow* dataset,
                                      GDALGridOptions* options,
                                      GDALProgressFunc callback=NULL,
                                      void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALGridOptionsNew(NULL, NULL);
        }
        GDALGridOptionsSetProgress(options, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALGrid(dest, dataset, options, &usageError);    
    if( bFreeOptions )
        GDALGridOptionsFree(options);
    return hDSRet;
}

SWIGINTERN GDALRasterizeOptions *new_GDALRasterizeOptions(char **options){
        return GDALRasterizeOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALRasterizeOptions(GDALRasterizeOptions *self){
        GDALRasterizeOptionsFree( self );
    }

int wrapper_GDALRasterizeDestDS( GDALDatasetShadow* dstDS,
                            GDALDatasetShadow* srcDS,
                            GDALRasterizeOptions* options,
                            GDALProgressFunc callback=NULL,
                            void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALRasterizeOptionsNew(NULL, NULL);
        }
        GDALRasterizeOptionsSetProgress(options, callback, callback_data);
    }
    int bRet = (GDALRasterize(NULL, dstDS, srcDS, options, &usageError) != NULL);
    if( bFreeOptions )
        GDALRasterizeOptionsFree(options);
    return bRet;
}


GDALDatasetShadow* wrapper_GDALRasterizeDestName( const char* dest,
                                             GDALDatasetShadow* srcDS,
                                             GDALRasterizeOptions* options,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALRasterizeOptionsNew(NULL, NULL);
        }
        GDALRasterizeOptionsSetProgress(options, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALRasterize(dest, NULL, srcDS, options, &usageError);
    if( bFreeOptions )
        GDALRasterizeOptionsFree(options);
    return hDSRet;
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_gdal_2ee2b483ca948fbb(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


_gostring_ _wrap_MajorObject_GetDescription_gdal_2ee2b483ca948fbb(GDALMajorObjectShadow *_swig_go_0) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  
  result = (char *)GDALMajorObjectShadow_GetDescription(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_MajorObject_SetDescription_gdal_2ee2b483ca948fbb(GDALMajorObjectShadow *_swig_go_0, _gostring_ _swig_go_1) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  GDALMajorObjectShadow_SetDescription(arg1,(char const *)arg2);
  
}


char **_wrap_MajorObject_GetMetadataDomainList_gdal_2ee2b483ca948fbb(GDALMajorObjectShadow *_swig_go_0) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char **result = 0 ;
  char **_swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  
  result = (char **)GDALMajorObjectShadow_GetMetadataDomainList(arg1);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


_gostring_* _wrap_MajorObject_GetMetadata_Dict_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALMajorObjectShadow *_swig_go_0, _gostring_ _swig_go_1) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) "" ;
  char **result = 0 ;
  _gostring_* _swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (char *)_swig_go_1.p; 
  }
  
  result = (char **)GDALMajorObjectShadow_GetMetadata_Dict(arg1,(char const *)arg2);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


char **_wrap_MajorObject_GetMetadata_List_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALMajorObjectShadow *_swig_go_0, _gostring_ _swig_go_1) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) "" ;
  char **result = 0 ;
  char **_swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (char *)_swig_go_1.p; 
  }
  
  result = (char **)GDALMajorObjectShadow_GetMetadata_List(arg1,(char const *)arg2);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


intgo _wrap_MajorObject_SetMetadata__SWIG_0_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALMajorObjectShadow *_swig_go_0, _gostring_* _swig_go_1, _gostring_ _swig_go_2) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  char *arg3 = (char *) "" ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  arg2 = *(char ***)&_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (char *)_swig_go_2.p; 
  }
  
  result = (CPLErr)GDALMajorObjectShadow_SetMetadata__SWIG_0(arg1,arg2,(char const *)arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_MajorObject_SetMetadata__SWIG_1_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALMajorObjectShadow *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) "" ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  if (_swig_optargc > 0) {
    arg3 = (char *)_swig_go_2.p; 
  }
  
  result = (CPLErr)GDALMajorObjectShadow_SetMetadata__SWIG_1(arg1,arg2,(char const *)arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_MajorObject_GetMetadataItem_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALMajorObjectShadow *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) "" ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  if (_swig_optargc > 0) {
    arg3 = (char *)_swig_go_2.p; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (char *)GDALMajorObjectShadow_GetMetadataItem(arg1,(char const *)arg2,(char const *)arg3);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_MajorObject_SetMetadataItem_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALMajorObjectShadow *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) "" ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALMajorObjectShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (char *)_swig_go_2.p; 
  if (_swig_optargc > 0) {
    arg4 = (char *)_swig_go_3.p; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (CPLErr)GDALMajorObjectShadow_SetMetadataItem(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Driver_ShortName_get_gdal_2ee2b483ca948fbb(GDALDriverShadow *_swig_go_0) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALDriverShadow **)&_swig_go_0; 
  
  result = (char *)GDALDriverShadow_ShortName_get(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_Driver_LongName_get_gdal_2ee2b483ca948fbb(GDALDriverShadow *_swig_go_0) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALDriverShadow **)&_swig_go_0; 
  
  result = (char *)GDALDriverShadow_LongName_get(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_Driver_HelpTopic_get_gdal_2ee2b483ca948fbb(GDALDriverShadow *_swig_go_0) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALDriverShadow **)&_swig_go_0; 
  
  result = (char *)GDALDriverShadow_HelpTopic_get(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


GDALDatasetShadow *_wrap_Driver_Create_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDriverShadow *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, char **_swig_go_6) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 = (int) 1 ;
  GDALDataType arg6 = (GDALDataType) GDT_Byte ;
  char **arg7 = (char **) 0 ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  arg1 = *(GDALDriverShadow **)&_swig_go_0; 
  {
    arg2 = (char *)_swig_go_1.p;       /* From the default swig string typemap. */
    if (!arg2) {
      arg2 = (char *)"";
    }
  }
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  if (_swig_optargc > 0) {
    arg5 = (int)_swig_go_4; 
  }
  if (_swig_optargc > 1) {
    arg6 = (GDALDataType)_swig_go_5; 
  }
  if (_swig_optargc > 2) {
    arg7 = *(char ***)&_swig_go_6; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)GDALDriverShadow_Create(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


GDALDatasetShadow *_wrap_Driver_CreateCopy_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDriverShadow *_swig_go_0, _gostring_ _swig_go_1, GDALDatasetShadow *_swig_go_2, intgo _swig_go_3, char **_swig_go_4, GDALProgressFunc _swig_go_5, void *_swig_go_6) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  GDALDatasetShadow *arg3 = (GDALDatasetShadow *) 0 ;
  int arg4 = (int) 1 ;
  char **arg5 = (char **) 0 ;
  GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
  void *arg7 = (void *) NULL ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  arg1 = *(GDALDriverShadow **)&_swig_go_0; 
  {
    arg2 = (char *)_swig_go_1.p;       /* From the default swig string typemap. */
    if (!arg2) {
      arg2 = (char *)"";
    }
  }
  arg3 = *(GDALDatasetShadow **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = (int)_swig_go_3; 
  }
  if (_swig_optargc > 1) {
    arg5 = *(char ***)&_swig_go_4; 
  }
  if (_swig_optargc > 2) {
    {
      arg6 = _swig_go_5;
    }
  }
  if (_swig_optargc > 3) {
    arg7 = *(void **)&_swig_go_6; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg3) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)GDALDriverShadow_CreateCopy(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Driver_Delete_gdal_2ee2b483ca948fbb(GDALDriverShadow *_swig_go_0, _gostring_ _swig_go_1) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDriverShadow **)&_swig_go_0; 
  {
    arg2 = (char *)_swig_go_1.p;       /* From the default swig string typemap. */
    if (!arg2) {
      arg2 = (char *)"";
    }
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (CPLErr)GDALDriverShadow_Delete(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Driver_Rename_gdal_2ee2b483ca948fbb(GDALDriverShadow *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDriverShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (char *)_swig_go_2.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg3) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (CPLErr)GDALDriverShadow_Rename(arg1,(char const *)arg2,(char const *)arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Driver_CopyFiles_gdal_2ee2b483ca948fbb(GDALDriverShadow *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDriverShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (char *)_swig_go_2.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg3) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (CPLErr)GDALDriverShadow_CopyFiles(arg1,(char const *)arg2,(char const *)arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Driver_Register_gdal_2ee2b483ca948fbb(GDALDriverShadow *_swig_go_0) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDriverShadow **)&_swig_go_0; 
  
  result = (int)GDALDriverShadow_Register(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Driver_Deregister_gdal_2ee2b483ca948fbb(GDALDriverShadow *_swig_go_0) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  
  arg1 = *(GDALDriverShadow **)&_swig_go_0; 
  
  GDALDriverShadow_Deregister(arg1);
  
}


void _wrap_ColorEntry_c1_set_gdal_2ee2b483ca948fbb(GDALColorEntry *_swig_go_0, short _swig_go_1) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  short arg2 ;
  
  arg1 = *(GDALColorEntry **)&_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  
  if (arg1) (arg1)->c1 = arg2;
  
}


short _wrap_ColorEntry_c1_get_gdal_2ee2b483ca948fbb(GDALColorEntry *_swig_go_0) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  short result;
  short _swig_go_result;
  
  arg1 = *(GDALColorEntry **)&_swig_go_0; 
  
  result = (short) ((arg1)->c1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ColorEntry_c2_set_gdal_2ee2b483ca948fbb(GDALColorEntry *_swig_go_0, short _swig_go_1) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  short arg2 ;
  
  arg1 = *(GDALColorEntry **)&_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  
  if (arg1) (arg1)->c2 = arg2;
  
}


short _wrap_ColorEntry_c2_get_gdal_2ee2b483ca948fbb(GDALColorEntry *_swig_go_0) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  short result;
  short _swig_go_result;
  
  arg1 = *(GDALColorEntry **)&_swig_go_0; 
  
  result = (short) ((arg1)->c2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ColorEntry_c3_set_gdal_2ee2b483ca948fbb(GDALColorEntry *_swig_go_0, short _swig_go_1) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  short arg2 ;
  
  arg1 = *(GDALColorEntry **)&_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  
  if (arg1) (arg1)->c3 = arg2;
  
}


short _wrap_ColorEntry_c3_get_gdal_2ee2b483ca948fbb(GDALColorEntry *_swig_go_0) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  short result;
  short _swig_go_result;
  
  arg1 = *(GDALColorEntry **)&_swig_go_0; 
  
  result = (short) ((arg1)->c3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ColorEntry_c4_set_gdal_2ee2b483ca948fbb(GDALColorEntry *_swig_go_0, short _swig_go_1) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  short arg2 ;
  
  arg1 = *(GDALColorEntry **)&_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  
  if (arg1) (arg1)->c4 = arg2;
  
}


short _wrap_ColorEntry_c4_get_gdal_2ee2b483ca948fbb(GDALColorEntry *_swig_go_0) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  short result;
  short _swig_go_result;
  
  arg1 = *(GDALColorEntry **)&_swig_go_0; 
  
  result = (short) ((arg1)->c4);
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALColorEntry *_wrap_new_ColorEntry_gdal_2ee2b483ca948fbb() {
  GDALColorEntry *result = 0 ;
  GDALColorEntry *_swig_go_result;
  
  
  result = (GDALColorEntry *)new GDALColorEntry();
  *(GDALColorEntry **)&_swig_go_result = (GDALColorEntry *)result; 
  return _swig_go_result;
}


void _wrap_delete_ColorEntry_gdal_2ee2b483ca948fbb(GDALColorEntry *_swig_go_0) {
  GDALColorEntry *arg1 = (GDALColorEntry *) 0 ;
  
  arg1 = *(GDALColorEntry **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_GCP_GCPX_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, double _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  GDAL_GCP_GCPX_set(arg1,arg2);
  
}


double _wrap_GCP_GCPX_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  result = (double)GDAL_GCP_GCPX_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GCP_GCPY_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, double _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  GDAL_GCP_GCPY_set(arg1,arg2);
  
}


double _wrap_GCP_GCPY_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  result = (double)GDAL_GCP_GCPY_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GCP_GCPZ_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, double _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  GDAL_GCP_GCPZ_set(arg1,arg2);
  
}


double _wrap_GCP_GCPZ_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  result = (double)GDAL_GCP_GCPZ_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GCP_GCPPixel_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, double _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  GDAL_GCP_GCPPixel_set(arg1,arg2);
  
}


double _wrap_GCP_GCPPixel_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  result = (double)GDAL_GCP_GCPPixel_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GCP_GCPLine_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, double _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  GDAL_GCP_GCPLine_set(arg1,arg2);
  
}


double _wrap_GCP_GCPLine_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  result = (double)GDAL_GCP_GCPLine_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GCP_Info_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, _gostring_ _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  GDAL_GCP_Info_set(arg1,arg2);
  
}


_gostring_ _wrap_GCP_Info_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  result = (char *)GDAL_GCP_Info_get(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_GCP_Id_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, _gostring_ _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  GDAL_GCP_Id_set(arg1,arg2);
  
}


_gostring_ _wrap_GCP_Id_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  result = (char *)GDAL_GCP_Id_get(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


GDAL_GCP *_wrap_new_GCP_gdal_2ee2b483ca948fbb(intgo _swig_optargc, double _swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3, double _swig_go_4, _gostring_ _swig_go_5, _gostring_ _swig_go_6) {
  double arg1 = (double) 0.0 ;
  double arg2 = (double) 0.0 ;
  double arg3 = (double) 0.0 ;
  double arg4 = (double) 0.0 ;
  double arg5 = (double) 0.0 ;
  char *arg6 = (char *) "" ;
  char *arg7 = (char *) "" ;
  GDAL_GCP *result = 0 ;
  GDAL_GCP *_swig_go_result;
  
  if (_swig_optargc > 0) {
    arg1 = (double)_swig_go_0; 
  }
  if (_swig_optargc > 1) {
    arg2 = (double)_swig_go_1; 
  }
  if (_swig_optargc > 2) {
    arg3 = (double)_swig_go_2; 
  }
  if (_swig_optargc > 3) {
    arg4 = (double)_swig_go_3; 
  }
  if (_swig_optargc > 4) {
    arg5 = (double)_swig_go_4; 
  }
  if (_swig_optargc > 5) {
    arg6 = (char *)_swig_go_5.p; 
  }
  if (_swig_optargc > 6) {
    arg7 = (char *)_swig_go_6.p; 
  }
  
  result = (GDAL_GCP *)new_GDAL_GCP(arg1,arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7);
  *(GDAL_GCP **)&_swig_go_result = (GDAL_GCP *)result; 
  return _swig_go_result;
}


void _wrap_delete_GCP_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  delete_GDAL_GCP(arg1);
  
}


double _wrap_GDAL_GCP_GCPX_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (double)GDAL_GCP_GCPX_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GDAL_GCP_GCPX_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, double _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  GDAL_GCP_GCPX_set(arg1,arg2);
  
}


double _wrap_GDAL_GCP_GCPY_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (double)GDAL_GCP_GCPY_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GDAL_GCP_GCPY_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, double _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  GDAL_GCP_GCPY_set(arg1,arg2);
  
}


double _wrap_GDAL_GCP_GCPZ_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (double)GDAL_GCP_GCPZ_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GDAL_GCP_GCPZ_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, double _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  GDAL_GCP_GCPZ_set(arg1,arg2);
  
}


double _wrap_GDAL_GCP_GCPPixel_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (double)GDAL_GCP_GCPPixel_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GDAL_GCP_GCPPixel_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, double _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  GDAL_GCP_GCPPixel_set(arg1,arg2);
  
}


double _wrap_GDAL_GCP_GCPLine_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (double)GDAL_GCP_GCPLine_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GDAL_GCP_GCPLine_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, double _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  GDAL_GCP_GCPLine_set(arg1,arg2);
  
}


_gostring_ _wrap_GDAL_GCP_Info_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (char *)GDAL_GCP_Info_get(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_GDAL_GCP_Info_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, _gostring_ _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  GDAL_GCP_Info_set(arg1,(char const *)arg2);
  
}


_gostring_ _wrap_GDAL_GCP_Id_get_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (char *)GDAL_GCP_Id_get(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_GDAL_GCP_Id_set_gdal_2ee2b483ca948fbb(GDAL_GCP *_swig_go_0, _gostring_ _swig_go_1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(GDAL_GCP **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  GDAL_GCP_Id_set(arg1,(char const *)arg2);
  
}


intgo _wrap_GCPsToGeoTransform_gdal_2ee2b483ca948fbb(intgo _swig_optargc, intgo _swig_go_0, GDAL_GCP *_swig_go_1, double *_swig_go_2, intgo _swig_go_3) {
  int arg1 ;
  GDAL_GCP *arg2 = (GDAL_GCP *) 0 ;
  double *arg3 ;
  int arg4 = (int) 1 ;
  RETURN_NONE result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(GDAL_GCP **)&_swig_go_1; 
  arg3 = *(double **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = (int)_swig_go_3; 
  }
  
  result = (RETURN_NONE)GDALGCPsToGeoTransform(arg1,(GDAL_GCP const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_AsyncReader_gdal_2ee2b483ca948fbb(GDALAsyncReaderShadow *_swig_go_0) {
  GDALAsyncReaderShadow *arg1 = (GDALAsyncReaderShadow *) 0 ;
  
  arg1 = *(GDALAsyncReaderShadow **)&_swig_go_0; 
  
  delete_GDALAsyncReaderShadow(arg1);
  
}


intgo _wrap_AsyncReader_GetNextUpdatedRegion_gdal_2ee2b483ca948fbb(GDALAsyncReaderShadow *_swig_go_0, double _swig_go_1, _goslice_ _swig_go_2, _goslice_ _swig_go_3, _goslice_ _swig_go_4, _goslice_ _swig_go_5) {
  GDALAsyncReaderShadow *arg1 = (GDALAsyncReaderShadow *) 0 ;
  double arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int temp3 ;
  int temp4 ;
  int temp5 ;
  int temp6 ;
  GDALAsyncStatusType result;
  intgo _swig_go_result;
  
  arg1 = *(GDALAsyncReaderShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  {
    if (_swig_go_2.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg3 = &temp3;
  }
  {
    if (_swig_go_3.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg4 = &temp4;
  }
  {
    if (_swig_go_4.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg5 = &temp5;
  }
  {
    if (_swig_go_5.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg6 = &temp6;
  }
  
  result = (GDALAsyncStatusType)GDALAsyncReaderShadow_GetNextUpdatedRegion(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  {
    int* a = (int *) _swig_go_2.array;
    a[0] = temp3;
  }
  {
    int* a = (int *) _swig_go_3.array;
    a[0] = temp4;
  }
  {
    int* a = (int *) _swig_go_4.array;
    a[0] = temp5;
  }
  {
    int* a = (int *) _swig_go_5.array;
    a[0] = temp6;
  }
  
  
  
  
  return _swig_go_result;
}


intgo _wrap_AsyncReader_LockBuffer_gdal_2ee2b483ca948fbb(GDALAsyncReaderShadow *_swig_go_0, double _swig_go_1) {
  GDALAsyncReaderShadow *arg1 = (GDALAsyncReaderShadow *) 0 ;
  double arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALAsyncReaderShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  result = (int)GDALAsyncReaderShadow_LockBuffer(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_AsyncReader_UnlockBuffer_gdal_2ee2b483ca948fbb(GDALAsyncReaderShadow *_swig_go_0) {
  GDALAsyncReaderShadow *arg1 = (GDALAsyncReaderShadow *) 0 ;
  
  arg1 = *(GDALAsyncReaderShadow **)&_swig_go_0; 
  
  GDALAsyncReaderShadow_UnlockBuffer(arg1);
  
}


intgo _wrap_Dataset_RasterXSize_get_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (int)GDALDatasetShadow_RasterXSize_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Dataset_RasterYSize_get_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (int)GDALDatasetShadow_RasterYSize_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Dataset_RasterCount_get_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (int)GDALDatasetShadow_RasterCount_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_Dataset_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  delete_GDALDatasetShadow(arg1);
  
}


void _wrap_Dataset_Close_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  GDALDatasetShadow_Close(arg1);
  
}


GDALDriverShadow *_wrap_Dataset_GetDriver_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDriverShadow *result = 0 ;
  GDALDriverShadow *_swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (GDALDriverShadow *)GDALDatasetShadow_GetDriver(arg1);
  *(GDALDriverShadow **)&_swig_go_result = (GDALDriverShadow *)result; 
  return _swig_go_result;
}


GDALRasterBandShadow *_wrap_Dataset_GetRasterBand_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, intgo _swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  GDALRasterBandShadow *result = 0 ;
  GDALRasterBandShadow *_swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (GDALRasterBandShadow *)GDALDatasetShadow_GetRasterBand(arg1,arg2);
  *(GDALRasterBandShadow **)&_swig_go_result = (GDALRasterBandShadow *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Dataset_GetProjection_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (char *)GDALDatasetShadow_GetProjection(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_Dataset_GetProjectionRef_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (char *)GDALDatasetShadow_GetProjectionRef(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_Dataset_SetProjection_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, _gostring_ _swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (CPLErr)GDALDatasetShadow_SetProjection(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Dataset_GetGeoTransform_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, double *_swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  double *arg2 ;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  
  GDALDatasetShadow_GetGeoTransform(arg1,arg2);
  
}


intgo _wrap_Dataset_SetGeoTransform_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, double *_swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  double *arg2 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  
  result = (CPLErr)GDALDatasetShadow_SetGeoTransform(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Dataset_BuildOverviews_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo *_swig_go_3, GDALProgressFunc _swig_go_4, void *_swig_go_5) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) "NEAREST" ;
  int arg3 = (int) 0 ;
  int *arg4 = (int *) 0 ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (char *)_swig_go_1.p; 
  }
  if (_swig_optargc > 1) {
    arg3 = (int)_swig_go_2; 
  }
  if (_swig_optargc > 2) {
    arg4 = *(int **)&_swig_go_3; 
  }
  if (_swig_optargc > 3) {
    {
      arg5 = _swig_go_4;
    }
  }
  if (_swig_optargc > 4) {
    arg6 = *(void **)&_swig_go_5; 
  }
  
  result = (int)GDALDatasetShadow_BuildOverviews(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Dataset_GetGCPCount_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (int)GDALDatasetShadow_GetGCPCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Dataset_GetGCPProjection_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (char *)GDALDatasetShadow_GetGCPProjection(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_Dataset_GetGCPs_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, intgo *_swig_go_1, GDAL_GCP **_swig_go_2) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int *arg2 = (int *) 0 ;
  GDAL_GCP **arg3 = (GDAL_GCP **) 0 ;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = *(int **)&_swig_go_1; 
  arg3 = *(GDAL_GCP ***)&_swig_go_2; 
  
  GDALDatasetShadow_GetGCPs(arg1,arg2,(GDAL_GCP const **)arg3);
  
}


intgo _wrap_Dataset_SetGCPs_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, intgo _swig_go_1, GDAL_GCP *_swig_go_2, _gostring_ _swig_go_3) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  GDAL_GCP *arg3 = (GDAL_GCP *) 0 ;
  char *arg4 = (char *) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(GDAL_GCP **)&_swig_go_2; 
  arg4 = (char *)_swig_go_3.p; 
  
  result = (CPLErr)GDALDatasetShadow_SetGCPs(arg1,arg2,(GDAL_GCP const *)arg3,(char const *)arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Dataset_FlushCache_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  GDALDatasetShadow_FlushCache(arg1);
  
}


intgo _wrap_Dataset_AddBand_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, intgo _swig_go_1, char **_swig_go_2) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDataType arg2 = (GDALDataType) GDT_Byte ;
  char **arg3 = (char **) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (GDALDataType)_swig_go_1; 
  }
  if (_swig_optargc > 1) {
    arg3 = *(char ***)&_swig_go_2; 
  }
  
  result = (CPLErr)GDALDatasetShadow_AddBand(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Dataset_CreateMaskBand_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, intgo _swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (CPLErr)GDALDatasetShadow_CreateMaskBand(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


char **_wrap_Dataset_GetFileList_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char **result = 0 ;
  char **_swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (char **)GDALDatasetShadow_GetFileList(arg1);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


OGRLayerShadow *_wrap_Dataset_CreateLayer_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, _gostring_ _swig_go_1, OSRSpatialReferenceShadow *_swig_go_2, intgo _swig_go_3, char **_swig_go_4) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OSRSpatialReferenceShadow *arg3 = (OSRSpatialReferenceShadow *) 0 ;
  OGRwkbGeometryType arg4 ;
  char **arg5 = (char **) 0 ;
  OGRLayerShadow *result = 0 ;
  OGRLayerShadow *_swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = *(OSRSpatialReferenceShadow **)&_swig_go_2; 
  arg4 = (OGRwkbGeometryType)_swig_go_3; 
  arg5 = *(char ***)&_swig_go_4; 
  
  result = (OGRLayerShadow *)GDALDatasetShadow_CreateLayer(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(OGRLayerShadow **)&_swig_go_result = (OGRLayerShadow *)result; 
  return _swig_go_result;
}


OGRLayerShadow *_wrap_Dataset_CopyLayer_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, OGRLayerShadow *_swig_go_1, _gostring_ _swig_go_2, char **_swig_go_3) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char **arg4 = (char **) 0 ;
  OGRLayerShadow *result = 0 ;
  OGRLayerShadow *_swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = *(OGRLayerShadow **)&_swig_go_1; 
  arg3 = (char *)_swig_go_2.p; 
  if (_swig_optargc > 0) {
    arg4 = *(char ***)&_swig_go_3; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRLayerShadow *)GDALDatasetShadow_CopyLayer(arg1,arg2,(char const *)arg3,arg4);
  *(OGRLayerShadow **)&_swig_go_result = (OGRLayerShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Dataset_DeleteLayer_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, intgo _swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (OGRErr)GDALDatasetShadow_DeleteLayer(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Dataset_GetLayerCount_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (int)GDALDatasetShadow_GetLayerCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRLayerShadow *_wrap_Dataset_GetLayerByIndex_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, intgo _swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 = (int) 0 ;
  OGRLayerShadow *result = 0 ;
  OGRLayerShadow *_swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  
  result = (OGRLayerShadow *)GDALDatasetShadow_GetLayerByIndex(arg1,arg2);
  *(OGRLayerShadow **)&_swig_go_result = (OGRLayerShadow *)result; 
  return _swig_go_result;
}


OGRLayerShadow *_wrap_Dataset_GetLayerByName_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, _gostring_ _swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRLayerShadow *result = 0 ;
  OGRLayerShadow *_swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (OGRLayerShadow *)GDALDatasetShadow_GetLayerByName(arg1,(char const *)arg2);
  *(OGRLayerShadow **)&_swig_go_result = (OGRLayerShadow *)result; 
  return _swig_go_result;
}


bool _wrap_Dataset_TestCapability_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, _gostring_ _swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (bool)GDALDatasetShadow_TestCapability(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


OGRLayerShadow *_wrap_Dataset_ExecuteSQL_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, _gostring_ _swig_go_1, OGRGeometryShadow *_swig_go_2, _gostring_ _swig_go_3) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRGeometryShadow *arg3 = (OGRGeometryShadow *) NULL ;
  char *arg4 = (char *) "" ;
  OGRLayerShadow *result = 0 ;
  OGRLayerShadow *_swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  if (_swig_optargc > 0) {
    arg3 = *(OGRGeometryShadow **)&_swig_go_2; 
  }
  if (_swig_optargc > 1) {
    arg4 = (char *)_swig_go_3.p; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (OGRLayerShadow *)GDALDatasetShadow_ExecuteSQL(arg1,(char const *)arg2,arg3,(char const *)arg4);
  *(OGRLayerShadow **)&_swig_go_result = (OGRLayerShadow *)result; 
  return _swig_go_result;
}


void _wrap_Dataset_ReleaseResultSet_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, OGRLayerShadow *_swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = *(OGRLayerShadow **)&_swig_go_1; 
  
  GDALDatasetShadow_ReleaseResultSet(arg1,arg2);
  
}


OGRStyleTableShadow *_wrap_Dataset_GetStyleTable_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRStyleTableShadow *result = 0 ;
  OGRStyleTableShadow *_swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (OGRStyleTableShadow *)GDALDatasetShadow_GetStyleTable(arg1);
  *(OGRStyleTableShadow **)&_swig_go_result = (OGRStyleTableShadow *)result; 
  return _swig_go_result;
}


void _wrap_Dataset_SetStyleTable_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, OGRStyleTableShadow *_swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRStyleTableShadow *arg2 = (OGRStyleTableShadow *) 0 ;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = *(OGRStyleTableShadow **)&_swig_go_1; 
  
  GDALDatasetShadow_SetStyleTable(arg1,arg2);
  
}


intgo _wrap_Dataset_StartTransaction_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, intgo _swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 = (int) FALSE ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  
  result = (OGRErr)GDALDatasetShadow_StartTransaction(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Dataset_CommitTransaction_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (OGRErr)GDALDatasetShadow_CommitTransaction(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Dataset_RollbackTransaction_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  
  result = (OGRErr)GDALDatasetShadow_RollbackTransaction(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_XSize_get_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (int)GDALRasterBandShadow_XSize_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_YSize_get_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (int)GDALRasterBandShadow_YSize_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_DataType_get_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALDataType result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (GDALDataType)GDALRasterBandShadow_DataType_get(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALDatasetShadow *_wrap_Band_GetDataset_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (GDALDatasetShadow *)GDALRasterBandShadow_GetDataset(arg1);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Band_GetBand_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (int)GDALRasterBandShadow_GetBand(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Band_GetBlockSize_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, _goslice_ _swig_go_1, _goslice_ _swig_go_2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  {
    if (_swig_go_1.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg2 = &temp2;
  }
  {
    if (_swig_go_2.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg3 = &temp3;
  }
  
  GDALRasterBandShadow_GetBlockSize(arg1,arg2,arg3);
  
  {
    int* a = (int *) _swig_go_1.array;
    a[0] = temp2;
  }
  {
    int* a = (int *) _swig_go_2.array;
    a[0] = temp3;
  }
  
  
}


intgo _wrap_Band_GetColorInterpretation_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorInterp result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (GDALColorInterp)GDALRasterBandShadow_GetColorInterpretation(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_GetRasterColorInterpretation_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorInterp result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (GDALColorInterp)GDALRasterBandShadow_GetRasterColorInterpretation(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_SetColorInterpretation_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, intgo _swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorInterp arg2 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (GDALColorInterp)_swig_go_1; 
  
  result = (CPLErr)GDALRasterBandShadow_SetColorInterpretation(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_SetRasterColorInterpretation_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, intgo _swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorInterp arg2 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (GDALColorInterp)_swig_go_1; 
  
  result = (CPLErr)GDALRasterBandShadow_SetRasterColorInterpretation(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Band_GetNoDataValue_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, double *_swig_go_1, intgo *_swig_go_2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  arg3 = *(int **)&_swig_go_2; 
  
  GDALRasterBandShadow_GetNoDataValue(arg1,arg2,arg3);
  
}


intgo _wrap_Band_SetNoDataValue_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, double _swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  result = (CPLErr)GDALRasterBandShadow_SetNoDataValue(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_DeleteNoDataValue_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (CPLErr)GDALRasterBandShadow_DeleteNoDataValue(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Band_GetUnitType_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (char *)GDALRasterBandShadow_GetUnitType(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_Band_SetUnitType_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, _gostring_ _swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (CPLErr)GDALRasterBandShadow_SetUnitType(arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


char **_wrap_Band_GetRasterCategoryNames_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char **result = 0 ;
  char **_swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (char **)GDALRasterBandShadow_GetRasterCategoryNames(arg1);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


intgo _wrap_Band_SetRasterCategoryNames_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, char **_swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(char ***)&_swig_go_1; 
  
  result = (CPLErr)GDALRasterBandShadow_SetRasterCategoryNames(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Band_GetMinimum_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, double *_swig_go_1, intgo *_swig_go_2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  arg3 = *(int **)&_swig_go_2; 
  
  GDALRasterBandShadow_GetMinimum(arg1,arg2,arg3);
  
}


void _wrap_Band_GetMaximum_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, double *_swig_go_1, intgo *_swig_go_2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  arg3 = *(int **)&_swig_go_2; 
  
  GDALRasterBandShadow_GetMaximum(arg1,arg2,arg3);
  
}


void _wrap_Band_GetOffset_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, double *_swig_go_1, intgo *_swig_go_2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  arg3 = *(int **)&_swig_go_2; 
  
  GDALRasterBandShadow_GetOffset(arg1,arg2,arg3);
  
}


void _wrap_Band_GetScale_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, double *_swig_go_1, intgo *_swig_go_2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  arg3 = *(int **)&_swig_go_2; 
  
  GDALRasterBandShadow_GetScale(arg1,arg2,arg3);
  
}


intgo _wrap_Band_SetOffset_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, double _swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  result = (CPLErr)GDALRasterBandShadow_SetOffset(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_SetScale_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, double _swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  result = (CPLErr)GDALRasterBandShadow_SetScale(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_GetStatistics_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, _goslice_ _swig_go_3, _goslice_ _swig_go_4, _goslice_ _swig_go_5, _goslice_ _swig_go_6) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  double temp7 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  {
    if (_swig_go_3.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg4 = &temp4;
  }
  {
    if (_swig_go_4.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg5 = &temp5;
  }
  {
    if (_swig_go_5.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg6 = &temp6;
  }
  {
    if (_swig_go_6.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg7 = &temp7;
  }
  
  result = (CPLErr)GDALRasterBandShadow_GetStatistics(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  {
    double* a = (double *) _swig_go_3.array;
    a[0] = temp4;
  }
  {
    double* a = (double *) _swig_go_4.array;
    a[0] = temp5;
  }
  {
    double* a = (double *) _swig_go_5.array;
    a[0] = temp6;
  }
  {
    double* a = (double *) _swig_go_6.array;
    a[0] = temp7;
  }
  
  
  
  
  return _swig_go_result;
}


intgo _wrap_Band_ComputeStatistics_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, bool _swig_go_1, _goslice_ _swig_go_2, _goslice_ _swig_go_3, _goslice_ _swig_go_4, _goslice_ _swig_go_5, GDALProgressFunc _swig_go_6, void *_swig_go_7) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  bool arg2 ;
  double *arg3 = (double *) NULL ;
  double *arg4 = (double *) NULL ;
  double *arg5 = (double *) NULL ;
  double *arg6 = (double *) NULL ;
  GDALProgressFunc arg7 = (GDALProgressFunc) NULL ;
  void *arg8 = (void *) NULL ;
  double temp3 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  if (_swig_optargc > 0) {
    {
      if (_swig_go_2.len == 0) {
        _swig_gopanic("array must contain at least 1 element");
      }
      arg3 = &temp3;
    }
  }
  if (_swig_optargc > 1) {
    {
      if (_swig_go_3.len == 0) {
        _swig_gopanic("array must contain at least 1 element");
      }
      arg4 = &temp4;
    }
  }
  if (_swig_optargc > 2) {
    {
      if (_swig_go_4.len == 0) {
        _swig_gopanic("array must contain at least 1 element");
      }
      arg5 = &temp5;
    }
  }
  if (_swig_optargc > 3) {
    {
      if (_swig_go_5.len == 0) {
        _swig_gopanic("array must contain at least 1 element");
      }
      arg6 = &temp6;
    }
  }
  if (_swig_optargc > 4) {
    {
      arg7 = _swig_go_6;
    }
  }
  if (_swig_optargc > 5) {
    arg8 = *(void **)&_swig_go_7; 
  }
  
  result = (CPLErr)GDALRasterBandShadow_ComputeStatistics(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  _swig_go_result = result; 
  {
    double* a = (double *) _swig_go_2.array;
    a[0] = temp3;
  }
  {
    double* a = (double *) _swig_go_3.array;
    a[0] = temp4;
  }
  {
    double* a = (double *) _swig_go_4.array;
    a[0] = temp5;
  }
  {
    double* a = (double *) _swig_go_5.array;
    a[0] = temp6;
  }
  
  
  
  
  return _swig_go_result;
}


intgo _wrap_Band_SetStatistics_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3, double _swig_go_4) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  arg5 = (double)_swig_go_4; 
  
  result = (CPLErr)GDALRasterBandShadow_SetStatistics(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_GetOverviewCount_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (int)GDALRasterBandShadow_GetOverviewCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALRasterBandShadow *_wrap_Band_GetOverview_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, intgo _swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  GDALRasterBandShadow *result = 0 ;
  GDALRasterBandShadow *_swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (GDALRasterBandShadow *)GDALRasterBandShadow_GetOverview(arg1,arg2);
  *(GDALRasterBandShadow **)&_swig_go_result = (GDALRasterBandShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Band_Checksum_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo *_swig_go_3, intgo *_swig_go_4) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  if (_swig_optargc > 1) {
    arg3 = (int)_swig_go_2; 
  }
  if (_swig_optargc > 2) {
    arg4 = *(int **)&_swig_go_3; 
  }
  if (_swig_optargc > 3) {
    arg5 = *(int **)&_swig_go_4; 
  }
  
  result = (int)GDALRasterBandShadow_Checksum(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Band_ComputeRasterMinMax_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, double *_swig_go_1, intgo _swig_go_2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 ;
  int arg3 = (int) 0 ;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (int)_swig_go_2; 
  }
  
  GDALRasterBandShadow_ComputeRasterMinMax(arg1,arg2,arg3);
  
}


void _wrap_Band_ComputeBandStats_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, double *_swig_go_1, intgo _swig_go_2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 ;
  int arg3 = (int) 1 ;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (int)_swig_go_2; 
  }
  
  GDALRasterBandShadow_ComputeBandStats(arg1,arg2,arg3);
  
}


intgo _wrap_Band_Fill_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, double _swig_go_1, double _swig_go_2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 = (double) 0.0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (double)_swig_go_2; 
  }
  
  result = (CPLErr)GDALRasterBandShadow_Fill(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Band_FlushCache_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  GDALRasterBandShadow_FlushCache(arg1);
  
}


GDALColorTableShadow *_wrap_Band_GetRasterColorTable_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *result = 0 ;
  GDALColorTableShadow *_swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (GDALColorTableShadow *)GDALRasterBandShadow_GetRasterColorTable(arg1);
  *(GDALColorTableShadow **)&_swig_go_result = (GDALColorTableShadow *)result; 
  return _swig_go_result;
}


GDALColorTableShadow *_wrap_Band_GetColorTable_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *result = 0 ;
  GDALColorTableShadow *_swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (GDALColorTableShadow *)GDALRasterBandShadow_GetColorTable(arg1);
  *(GDALColorTableShadow **)&_swig_go_result = (GDALColorTableShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Band_SetRasterColorTable_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, GDALColorTableShadow *_swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *arg2 = (GDALColorTableShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(GDALColorTableShadow **)&_swig_go_1; 
  
  result = (int)GDALRasterBandShadow_SetRasterColorTable(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_SetColorTable_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, GDALColorTableShadow *_swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *arg2 = (GDALColorTableShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(GDALColorTableShadow **)&_swig_go_1; 
  
  result = (int)GDALRasterBandShadow_SetColorTable(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALRasterAttributeTableShadow *_wrap_Band_GetDefaultRAT_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterAttributeTableShadow *result = 0 ;
  GDALRasterAttributeTableShadow *_swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (GDALRasterAttributeTableShadow *)GDALRasterBandShadow_GetDefaultRAT(arg1);
  *(GDALRasterAttributeTableShadow **)&_swig_go_result = (GDALRasterAttributeTableShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Band_SetDefaultRAT_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, GDALRasterAttributeTableShadow *_swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterAttributeTableShadow *arg2 = (GDALRasterAttributeTableShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(GDALRasterAttributeTableShadow **)&_swig_go_1; 
  
  result = (int)GDALRasterBandShadow_SetDefaultRAT(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALRasterBandShadow *_wrap_Band_GetMaskBand_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *result = 0 ;
  GDALRasterBandShadow *_swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (GDALRasterBandShadow *)GDALRasterBandShadow_GetMaskBand(arg1);
  *(GDALRasterBandShadow **)&_swig_go_result = (GDALRasterBandShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_Band_GetMaskFlags_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (int)GDALRasterBandShadow_GetMaskFlags(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_CreateMaskBand_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, intgo _swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (CPLErr)GDALRasterBandShadow_CreateMaskBand(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_GetHistogram_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, double _swig_go_1, double _swig_go_2, intgo _swig_go_3, GUIntBig *_swig_go_4, intgo _swig_go_5, intgo _swig_go_6, GDALProgressFunc _swig_go_7, void *_swig_go_8) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 = (double) -0.5 ;
  double arg3 = (double) 255.5 ;
  int arg4 = (int) 256 ;
  GUIntBig *arg5 = (GUIntBig *) NULL ;
  int arg6 = (int) 0 ;
  int arg7 = (int) 1 ;
  GDALProgressFunc arg8 = (GDALProgressFunc) NULL ;
  void *arg9 = (void *) NULL ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (double)_swig_go_1; 
  }
  if (_swig_optargc > 1) {
    arg3 = (double)_swig_go_2; 
  }
  if (_swig_optargc > 2) {
    arg4 = (int)_swig_go_3; 
  }
  if (_swig_optargc > 3) {
    arg5 = *(GUIntBig **)&_swig_go_4; 
  }
  if (_swig_optargc > 4) {
    arg6 = (int)_swig_go_5; 
  }
  if (_swig_optargc > 5) {
    arg7 = (int)_swig_go_6; 
  }
  if (_swig_optargc > 6) {
    {
      arg8 = _swig_go_7;
    }
  }
  if (_swig_optargc > 7) {
    arg9 = *(void **)&_swig_go_8; 
  }
  
  result = (CPLErr)GDALRasterBandShadow_GetHistogram(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_GetDefaultHistogram_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, double *_swig_go_1, double *_swig_go_2, intgo *_swig_go_3, GUIntBig **_swig_go_4, intgo _swig_go_5, GDALProgressFunc _swig_go_6, void *_swig_go_7) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) NULL ;
  double *arg3 = (double *) NULL ;
  int *arg4 = (int *) NULL ;
  GUIntBig **arg5 = (GUIntBig **) NULL ;
  int arg6 = (int) 1 ;
  GDALProgressFunc arg7 = (GDALProgressFunc) NULL ;
  void *arg8 = (void *) NULL ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = *(double **)&_swig_go_1; 
  }
  if (_swig_optargc > 1) {
    arg3 = *(double **)&_swig_go_2; 
  }
  if (_swig_optargc > 2) {
    arg4 = *(int **)&_swig_go_3; 
  }
  if (_swig_optargc > 3) {
    arg5 = *(GUIntBig ***)&_swig_go_4; 
  }
  if (_swig_optargc > 4) {
    arg6 = (int)_swig_go_5; 
  }
  if (_swig_optargc > 5) {
    {
      arg7 = _swig_go_6;
    }
  }
  if (_swig_optargc > 6) {
    arg8 = *(void **)&_swig_go_7; 
  }
  
  result = (CPLErr)GDALRasterBandShadow_GetDefaultHistogram(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Band_SetDefaultHistogram_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, double _swig_go_1, double _swig_go_2, intgo _swig_go_3, GUIntBig *_swig_go_4) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  GUIntBig *arg5 = (GUIntBig *) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = *(GUIntBig **)&_swig_go_4; 
  
  result = (CPLErr)GDALRasterBandShadow_SetDefaultHistogram(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Band_HasArbitraryOverviews_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (bool)GDALRasterBandShadow_HasArbitraryOverviews(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


char **_wrap_Band_GetCategoryNames_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char **result = 0 ;
  char **_swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  
  result = (char **)GDALRasterBandShadow_GetCategoryNames(arg1);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


intgo _wrap_Band_SetCategoryNames_gdal_2ee2b483ca948fbb(GDALRasterBandShadow *_swig_go_0, char **_swig_go_1) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(char ***)&_swig_go_1; 
  
  result = (CPLErr)GDALRasterBandShadow_SetCategoryNames(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALColorTableShadow *_wrap_new_ColorTable_gdal_2ee2b483ca948fbb(intgo _swig_optargc, intgo _swig_go_0) {
  GDALPaletteInterp arg1 = (GDALPaletteInterp) GPI_RGB ;
  GDALColorTableShadow *result = 0 ;
  GDALColorTableShadow *_swig_go_result;
  
  if (_swig_optargc > 0) {
    arg1 = (GDALPaletteInterp)_swig_go_0; 
  }
  
  result = (GDALColorTableShadow *)new_GDALColorTableShadow(arg1);
  *(GDALColorTableShadow **)&_swig_go_result = (GDALColorTableShadow *)result; 
  return _swig_go_result;
}


void _wrap_delete_ColorTable_gdal_2ee2b483ca948fbb(GDALColorTableShadow *_swig_go_0) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  
  arg1 = *(GDALColorTableShadow **)&_swig_go_0; 
  
  delete_GDALColorTableShadow(arg1);
  
}


GDALColorTableShadow *_wrap_ColorTable_Clone_gdal_2ee2b483ca948fbb(GDALColorTableShadow *_swig_go_0) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  GDALColorTableShadow *result = 0 ;
  GDALColorTableShadow *_swig_go_result;
  
  arg1 = *(GDALColorTableShadow **)&_swig_go_0; 
  
  result = (GDALColorTableShadow *)GDALColorTableShadow_Clone(arg1);
  *(GDALColorTableShadow **)&_swig_go_result = (GDALColorTableShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_ColorTable_GetPaletteInterpretation_gdal_2ee2b483ca948fbb(GDALColorTableShadow *_swig_go_0) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  GDALPaletteInterp result;
  intgo _swig_go_result;
  
  arg1 = *(GDALColorTableShadow **)&_swig_go_0; 
  
  result = (GDALPaletteInterp)GDALColorTableShadow_GetPaletteInterpretation(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_ColorTable_GetCount_gdal_2ee2b483ca948fbb(GDALColorTableShadow *_swig_go_0) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALColorTableShadow **)&_swig_go_0; 
  
  result = (int)GDALColorTableShadow_GetColorEntryCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALColorEntry *_wrap_ColorTable_GetColorEntry_gdal_2ee2b483ca948fbb(GDALColorTableShadow *_swig_go_0, intgo _swig_go_1) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int arg2 ;
  GDALColorEntry *result = 0 ;
  GDALColorEntry *_swig_go_result;
  
  arg1 = *(GDALColorTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (GDALColorEntry *)GDALColorTableShadow_GetColorEntry(arg1,arg2);
  *(GDALColorEntry **)&_swig_go_result = (GDALColorEntry *)result; 
  return _swig_go_result;
}


intgo _wrap_ColorTable_GetColorEntryAsRGB_gdal_2ee2b483ca948fbb(GDALColorTableShadow *_swig_go_0, intgo _swig_go_1, GDALColorEntry *_swig_go_2) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int arg2 ;
  GDALColorEntry *arg3 = (GDALColorEntry *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALColorTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(GDALColorEntry **)&_swig_go_2; 
  
  result = (int)GDALColorTableShadow_GetColorEntryAsRGB(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ColorTable_SetColorEntry_gdal_2ee2b483ca948fbb(GDALColorTableShadow *_swig_go_0, intgo _swig_go_1, GDALColorEntry *_swig_go_2) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int arg2 ;
  GDALColorEntry *arg3 = (GDALColorEntry *) 0 ;
  
  arg1 = *(GDALColorTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(GDALColorEntry **)&_swig_go_2; 
  
  GDALColorTableShadow_SetColorEntry(arg1,arg2,(GDALColorEntry const *)arg3);
  
}


void _wrap_ColorTable_CreateColorRamp_gdal_2ee2b483ca948fbb(GDALColorTableShadow *_swig_go_0, intgo _swig_go_1, GDALColorEntry *_swig_go_2, intgo _swig_go_3, GDALColorEntry *_swig_go_4) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int arg2 ;
  GDALColorEntry *arg3 = (GDALColorEntry *) 0 ;
  int arg4 ;
  GDALColorEntry *arg5 = (GDALColorEntry *) 0 ;
  
  arg1 = *(GDALColorTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(GDALColorEntry **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = *(GDALColorEntry **)&_swig_go_4; 
  
  GDALColorTableShadow_CreateColorRamp(arg1,arg2,(GDALColorEntry const *)arg3,arg4,(GDALColorEntry const *)arg5);
  
}


GDALRasterAttributeTableShadow *_wrap_new_RasterAttributeTable_gdal_2ee2b483ca948fbb() {
  GDALRasterAttributeTableShadow *result = 0 ;
  GDALRasterAttributeTableShadow *_swig_go_result;
  
  
  result = (GDALRasterAttributeTableShadow *)new_GDALRasterAttributeTableShadow();
  *(GDALRasterAttributeTableShadow **)&_swig_go_result = (GDALRasterAttributeTableShadow *)result; 
  return _swig_go_result;
}


void _wrap_delete_RasterAttributeTable_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  
  delete_GDALRasterAttributeTableShadow(arg1);
  
}


GDALRasterAttributeTableShadow *_wrap_RasterAttributeTable_Clone_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  GDALRasterAttributeTableShadow *result = 0 ;
  GDALRasterAttributeTableShadow *_swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  
  result = (GDALRasterAttributeTableShadow *)GDALRasterAttributeTableShadow_Clone(arg1);
  *(GDALRasterAttributeTableShadow **)&_swig_go_result = (GDALRasterAttributeTableShadow *)result; 
  return _swig_go_result;
}


intgo _wrap_RasterAttributeTable_GetColumnCount_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  
  result = (int)GDALRasterAttributeTableShadow_GetColumnCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_RasterAttributeTable_GetNameOfCol_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, intgo _swig_go_1) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (char *)GDALRasterAttributeTableShadow_GetNameOfCol(arg1,arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_RasterAttributeTable_GetUsageOfCol_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, intgo _swig_go_1) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  GDALRATFieldUsage result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (GDALRATFieldUsage)GDALRasterAttributeTableShadow_GetUsageOfCol(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RasterAttributeTable_GetTypeOfCol_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, intgo _swig_go_1) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  GDALRATFieldType result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (GDALRATFieldType)GDALRasterAttributeTableShadow_GetTypeOfCol(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RasterAttributeTable_GetColOfUsage_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, intgo _swig_go_1) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  GDALRATFieldUsage arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (GDALRATFieldUsage)_swig_go_1; 
  
  result = (int)GDALRasterAttributeTableShadow_GetColOfUsage(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RasterAttributeTable_GetRowCount_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  
  result = (int)GDALRasterAttributeTableShadow_GetRowCount(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_RasterAttributeTable_GetValueAsString_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (char *)GDALRasterAttributeTableShadow_GetValueAsString(arg1,arg2,arg3);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_RasterAttributeTable_GetValueAsInt_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)GDALRasterAttributeTableShadow_GetValueAsInt(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_RasterAttributeTable_GetValueAsDouble_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (double)GDALRasterAttributeTableShadow_GetValueAsDouble(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RasterAttributeTable_SetValueAsString_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (char *)_swig_go_3.p; 
  
  GDALRasterAttributeTableShadow_SetValueAsString(arg1,arg2,arg3,(char const *)arg4);
  
}


void _wrap_RasterAttributeTable_SetValueAsInt_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  GDALRasterAttributeTableShadow_SetValueAsInt(arg1,arg2,arg3,arg4);
  
}


void _wrap_RasterAttributeTable_SetValueAsDouble_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, double _swig_go_3) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  
  GDALRasterAttributeTableShadow_SetValueAsDouble(arg1,arg2,arg3,arg4);
  
}


void _wrap_RasterAttributeTable_SetRowCount_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, intgo _swig_go_1) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  GDALRasterAttributeTableShadow_SetRowCount(arg1,arg2);
  
}


intgo _wrap_RasterAttributeTable_CreateColumn_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  GDALRATFieldType arg3 ;
  GDALRATFieldUsage arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (GDALRATFieldType)_swig_go_2; 
  arg4 = (GDALRATFieldUsage)_swig_go_3; 
  
  result = (int)GDALRasterAttributeTableShadow_CreateColumn(arg1,(char const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RasterAttributeTable_GetLinearBinning_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, _goslice_ _swig_go_1, _goslice_ _swig_go_2) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double temp2 ;
  double temp3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  {
    if (_swig_go_1.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg2 = &temp2;
  }
  {
    if (_swig_go_2.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg3 = &temp3;
  }
  
  result = (bool)GDALRasterAttributeTableShadow_GetLinearBinning(arg1,arg2,arg3);
  _swig_go_result = result; 
  {
    double* a = (double *) _swig_go_1.array;
    a[0] = temp2;
  }
  {
    double* a = (double *) _swig_go_2.array;
    a[0] = temp3;
  }
  
  
  return _swig_go_result;
}


intgo _wrap_RasterAttributeTable_SetLinearBinning_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, double _swig_go_1, double _swig_go_2) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  result = (int)GDALRasterAttributeTableShadow_SetLinearBinning(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RasterAttributeTable_GetRowOfValue_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0, double _swig_go_1) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  double arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  result = (int)GDALRasterAttributeTableShadow_GetRowOfValue(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RasterAttributeTable_ChangesAreWrittenToFile_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  
  result = (int)GDALRasterAttributeTableShadow_ChangesAreWrittenToFile(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RasterAttributeTable_DumpReadable_gdal_2ee2b483ca948fbb(GDALRasterAttributeTableShadow *_swig_go_0) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  
  arg1 = *(GDALRasterAttributeTableShadow **)&_swig_go_0; 
  
  GDALRasterAttributeTableShadow_DumpReadable(arg1);
  
}


intgo _wrap_TermProgress_nocb_gdal_2ee2b483ca948fbb(intgo _swig_optargc, double _swig_go_0, _gostring_ _swig_go_1, void *_swig_go_2) {
  double arg1 ;
  char *arg2 = (char *) NULL ;
  void *arg3 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (char *)_swig_go_1.p; 
  }
  if (_swig_optargc > 1) {
    arg3 = *(void **)&_swig_go_2; 
  }
  
  result = (int)GDALTermProgress_nocb(arg1,(char const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void* _wrap_TermProgress_gdal_2ee2b483ca948fbb() {
  int (*result)(double,char const *,void *) = 0 ;
  void* _swig_go_result;
  
  
  result = (int (*)(double,char const *,void *))(GDALTermProgress);
  
  *(int (**)(double,char const *,void *))&_swig_go_result = (int (*)(double,char const *,void *))result; 
  return _swig_go_result;
}


intgo _wrap_ComputeMedianCutPCT_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, GDALRasterBandShadow *_swig_go_1, GDALRasterBandShadow *_swig_go_2, intgo _swig_go_3, GDALColorTableShadow *_swig_go_4, GDALProgressFunc _swig_go_5, void *_swig_go_6) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  int arg4 ;
  GDALColorTableShadow *arg5 = (GDALColorTableShadow *) 0 ;
  GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
  void *arg7 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(GDALRasterBandShadow **)&_swig_go_1; 
  arg3 = *(GDALRasterBandShadow **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = *(GDALColorTableShadow **)&_swig_go_4; 
  if (_swig_optargc > 0) {
    {
      arg6 = _swig_go_5;
    }
  }
  if (_swig_optargc > 1) {
    arg7 = *(void **)&_swig_go_6; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg3) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg5) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)ComputeMedianCutPCT(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DitherRGB2PCT_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, GDALRasterBandShadow *_swig_go_1, GDALRasterBandShadow *_swig_go_2, GDALRasterBandShadow *_swig_go_3, GDALColorTableShadow *_swig_go_4, GDALProgressFunc _swig_go_5, void *_swig_go_6) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg4 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *arg5 = (GDALColorTableShadow *) 0 ;
  GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
  void *arg7 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(GDALRasterBandShadow **)&_swig_go_1; 
  arg3 = *(GDALRasterBandShadow **)&_swig_go_2; 
  arg4 = *(GDALRasterBandShadow **)&_swig_go_3; 
  arg5 = *(GDALColorTableShadow **)&_swig_go_4; 
  if (_swig_optargc > 0) {
    {
      arg6 = _swig_go_5;
    }
  }
  if (_swig_optargc > 1) {
    arg7 = *(void **)&_swig_go_6; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg3) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg4) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg5) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)DitherRGB2PCT(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_ReprojectImage_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, GDALDatasetShadow *_swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, double _swig_go_5, double _swig_go_6, GDALProgressFunc _swig_go_7, void *_swig_go_8, char **_swig_go_9) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char *arg3 = (char *) NULL ;
  char *arg4 = (char *) NULL ;
  GDALResampleAlg arg5 = (GDALResampleAlg) GRA_NearestNeighbour ;
  double arg6 = (double) 0.0 ;
  double arg7 = (double) 0.0 ;
  GDALProgressFunc arg8 = (GDALProgressFunc) NULL ;
  void *arg9 = (void *) NULL ;
  char **arg10 = (char **) NULL ;
  CPLErr result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = *(GDALDatasetShadow **)&_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (char *)_swig_go_2.p; 
  }
  if (_swig_optargc > 1) {
    arg4 = (char *)_swig_go_3.p; 
  }
  if (_swig_optargc > 2) {
    arg5 = (GDALResampleAlg)_swig_go_4; 
  }
  if (_swig_optargc > 3) {
    arg6 = (double)_swig_go_5; 
  }
  if (_swig_optargc > 4) {
    arg7 = (double)_swig_go_6; 
  }
  if (_swig_optargc > 5) {
    {
      arg8 = _swig_go_7;
    }
  }
  if (_swig_optargc > 6) {
    arg9 = *(void **)&_swig_go_8; 
  }
  if (_swig_optargc > 7) {
    arg10 = *(char ***)&_swig_go_9; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (CPLErr)ReprojectImage(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_ComputeProximity_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, GDALRasterBandShadow *_swig_go_1, char **_swig_go_2, GDALProgressFunc _swig_go_3, void *_swig_go_4) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  char **arg3 = (char **) NULL ;
  GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
  void *arg5 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(GDALRasterBandShadow **)&_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = *(char ***)&_swig_go_2; 
  }
  if (_swig_optargc > 1) {
    {
      arg4 = _swig_go_3;
    }
  }
  if (_swig_optargc > 2) {
    arg5 = *(void **)&_swig_go_4; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)ComputeProximity(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RasterizeLayer_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, intgo _swig_go_1, intgo *_swig_go_2, OGRLayerShadow *_swig_go_3, void *_swig_go_4, void *_swig_go_5, intgo _swig_go_6, double *_swig_go_7, char **_swig_go_8, GDALProgressFunc _swig_go_9, void *_swig_go_10) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  OGRLayerShadow *arg4 = (OGRLayerShadow *) 0 ;
  void *arg5 = (void *) NULL ;
  void *arg6 = (void *) NULL ;
  int arg7 = (int) 0 ;
  double *arg8 = (double *) NULL ;
  char **arg9 = (char **) NULL ;
  GDALProgressFunc arg10 = (GDALProgressFunc) NULL ;
  void *arg11 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(int **)&_swig_go_2; 
  arg4 = *(OGRLayerShadow **)&_swig_go_3; 
  if (_swig_optargc > 0) {
    arg5 = *(void **)&_swig_go_4; 
  }
  if (_swig_optargc > 1) {
    arg6 = *(void **)&_swig_go_5; 
  }
  if (_swig_optargc > 2) {
    arg7 = (int)_swig_go_6; 
  }
  if (_swig_optargc > 3) {
    arg8 = *(double **)&_swig_go_7; 
  }
  if (_swig_optargc > 4) {
    arg9 = *(char ***)&_swig_go_8; 
  }
  if (_swig_optargc > 5) {
    {
      arg10 = _swig_go_9;
    }
  }
  if (_swig_optargc > 6) {
    arg11 = *(void **)&_swig_go_10; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg4) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)RasterizeLayer(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Polygonize_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, GDALRasterBandShadow *_swig_go_1, OGRLayerShadow *_swig_go_2, intgo _swig_go_3, char **_swig_go_4, GDALProgressFunc _swig_go_5, void *_swig_go_6) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  int arg4 ;
  char **arg5 = (char **) NULL ;
  GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
  void *arg7 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(GDALRasterBandShadow **)&_swig_go_1; 
  arg3 = *(OGRLayerShadow **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  if (_swig_optargc > 0) {
    arg5 = *(char ***)&_swig_go_4; 
  }
  if (_swig_optargc > 1) {
    {
      arg6 = _swig_go_5;
    }
  }
  if (_swig_optargc > 2) {
    arg7 = *(void **)&_swig_go_6; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg3) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)Polygonize(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_FPolygonize_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, GDALRasterBandShadow *_swig_go_1, OGRLayerShadow *_swig_go_2, intgo _swig_go_3, char **_swig_go_4, GDALProgressFunc _swig_go_5, void *_swig_go_6) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  int arg4 ;
  char **arg5 = (char **) NULL ;
  GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
  void *arg7 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(GDALRasterBandShadow **)&_swig_go_1; 
  arg3 = *(OGRLayerShadow **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  if (_swig_optargc > 0) {
    arg5 = *(char ***)&_swig_go_4; 
  }
  if (_swig_optargc > 1) {
    {
      arg6 = _swig_go_5;
    }
  }
  if (_swig_optargc > 2) {
    arg7 = *(void **)&_swig_go_6; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg3) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)FPolygonize(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_FillNodata_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, GDALRasterBandShadow *_swig_go_1, double _swig_go_2, intgo _swig_go_3, char **_swig_go_4, GDALProgressFunc _swig_go_5, void *_swig_go_6) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  double arg3 ;
  int arg4 ;
  char **arg5 = (char **) NULL ;
  GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
  void *arg7 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(GDALRasterBandShadow **)&_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  if (_swig_optargc > 0) {
    arg5 = *(char ***)&_swig_go_4; 
  }
  if (_swig_optargc > 1) {
    {
      arg6 = _swig_go_5;
    }
  }
  if (_swig_optargc > 2) {
    arg7 = *(void **)&_swig_go_6; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)FillNodata(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_SieveFilter_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, GDALRasterBandShadow *_swig_go_1, GDALRasterBandShadow *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, char **_swig_go_5, GDALProgressFunc _swig_go_6, void *_swig_go_7) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  int arg4 ;
  int arg5 = (int) 4 ;
  char **arg6 = (char **) NULL ;
  GDALProgressFunc arg7 = (GDALProgressFunc) NULL ;
  void *arg8 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(GDALRasterBandShadow **)&_swig_go_1; 
  arg3 = *(GDALRasterBandShadow **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  if (_swig_optargc > 0) {
    arg5 = (int)_swig_go_4; 
  }
  if (_swig_optargc > 1) {
    arg6 = *(char ***)&_swig_go_5; 
  }
  if (_swig_optargc > 2) {
    {
      arg7 = _swig_go_6;
    }
  }
  if (_swig_optargc > 3) {
    arg8 = *(void **)&_swig_go_7; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg3) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)SieveFilter(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RegenerateOverviews_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, intgo _swig_go_1, GDALRasterBandShadow **_swig_go_2, _gostring_ _swig_go_3, GDALProgressFunc _swig_go_4, void *_swig_go_5) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  GDALRasterBandShadow **arg3 = (GDALRasterBandShadow **) 0 ;
  char *arg4 = (char *) "average" ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(GDALRasterBandShadow ***)&_swig_go_2; 
  if (_swig_optargc > 0) {
    arg4 = (char *)_swig_go_3.p; 
  }
  if (_swig_optargc > 1) {
    {
      arg5 = _swig_go_4;
    }
  }
  if (_swig_optargc > 2) {
    arg6 = *(void **)&_swig_go_5; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)RegenerateOverviews(arg1,arg2,arg3,(char const *)arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RegenerateOverview_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, GDALRasterBandShadow *_swig_go_1, _gostring_ _swig_go_2, GDALProgressFunc _swig_go_3, void *_swig_go_4) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  char *arg3 = (char *) "average" ;
  GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
  void *arg5 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = *(GDALRasterBandShadow **)&_swig_go_1; 
  if (_swig_optargc > 0) {
    arg3 = (char *)_swig_go_2.p; 
  }
  if (_swig_optargc > 1) {
    {
      arg4 = _swig_go_3;
    }
  }
  if (_swig_optargc > 2) {
    arg5 = *(void **)&_swig_go_4; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)RegenerateOverview(arg1,arg2,(char const *)arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_ContourGenerate_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALRasterBandShadow *_swig_go_0, double _swig_go_1, double _swig_go_2, intgo _swig_go_3, double *_swig_go_4, intgo _swig_go_5, double _swig_go_6, OGRLayerShadow *_swig_go_7, intgo _swig_go_8, intgo _swig_go_9, GDALProgressFunc _swig_go_10, void *_swig_go_11) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double arg7 ;
  OGRLayerShadow *arg8 = (OGRLayerShadow *) 0 ;
  int arg9 ;
  int arg10 ;
  GDALProgressFunc arg11 = (GDALProgressFunc) NULL ;
  void *arg12 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALRasterBandShadow **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = *(double **)&_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (double)_swig_go_6; 
  arg8 = *(OGRLayerShadow **)&_swig_go_7; 
  arg9 = (int)_swig_go_8; 
  arg10 = (int)_swig_go_9; 
  if (_swig_optargc > 0) {
    {
      arg11 = _swig_go_10;
    }
  }
  if (_swig_optargc > 1) {
    arg12 = *(void **)&_swig_go_11; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg8) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)ContourGenerate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALDatasetShadow *_wrap_AutoCreateWarpedVRT_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3, double _swig_go_4) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  GDALResampleAlg arg4 = (GDALResampleAlg) GRA_NearestNeighbour ;
  double arg5 = (double) 0.0 ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (char *)_swig_go_1.p; 
  }
  if (_swig_optargc > 1) {
    arg3 = (char *)_swig_go_2.p; 
  }
  if (_swig_optargc > 2) {
    arg4 = (GDALResampleAlg)_swig_go_3; 
  }
  if (_swig_optargc > 3) {
    arg5 = (double)_swig_go_4; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)AutoCreateWarpedVRT(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


GDALDatasetShadow *_wrap_CreatePansharpenedVRT_gdal_2ee2b483ca948fbb(_gostring_ _swig_go_0, GDALRasterBandShadow *_swig_go_1, intgo _swig_go_2, GDALRasterBandShadow **_swig_go_3) {
  char *arg1 = (char *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  int arg3 ;
  GDALRasterBandShadow **arg4 = (GDALRasterBandShadow **) 0 ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  arg2 = *(GDALRasterBandShadow **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = *(GDALRasterBandShadow ***)&_swig_go_3; 
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)CreatePansharpenedVRT((char const *)arg1,arg2,arg3,arg4);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


GDALTransformerInfoShadow *_wrap_new_Transformer_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, GDALDatasetShadow *_swig_go_1, char **_swig_go_2) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char **arg3 = (char **) 0 ;
  GDALTransformerInfoShadow *result = 0 ;
  GDALTransformerInfoShadow *_swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = *(GDALDatasetShadow **)&_swig_go_1; 
  arg3 = *(char ***)&_swig_go_2; 
  
  result = (GDALTransformerInfoShadow *)new_GDALTransformerInfoShadow(arg1,arg2,arg3);
  *(GDALTransformerInfoShadow **)&_swig_go_result = (GDALTransformerInfoShadow *)result; 
  return _swig_go_result;
}


void _wrap_delete_Transformer_gdal_2ee2b483ca948fbb(GDALTransformerInfoShadow *_swig_go_0) {
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  
  arg1 = *(GDALTransformerInfoShadow **)&_swig_go_0; 
  
  delete_GDALTransformerInfoShadow(arg1);
  
}


intgo _wrap_Transformer_TransformPoint__SWIG_0_gdal_2ee2b483ca948fbb(GDALTransformerInfoShadow *_swig_go_0, intgo _swig_go_1, double *_swig_go_2) {
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  int arg2 ;
  double *arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALTransformerInfoShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(double **)&_swig_go_2; 
  
  result = (int)GDALTransformerInfoShadow_TransformPoint__SWIG_0(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Transformer_TransformPoint__SWIG_1_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALTransformerInfoShadow *_swig_go_0, double *_swig_go_1, intgo _swig_go_2, double _swig_go_3, double _swig_go_4, double _swig_go_5) {
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  double *arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 = (double) 0.0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALTransformerInfoShadow **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  arg5 = (double)_swig_go_4; 
  if (_swig_optargc > 0) {
    arg6 = (double)_swig_go_5; 
  }
  
  result = (int)GDALTransformerInfoShadow_TransformPoint__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Transformer_TransformPoints_gdal_2ee2b483ca948fbb(GDALTransformerInfoShadow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, double *_swig_go_3, double *_swig_go_4, double *_swig_go_5, intgo *_swig_go_6) {
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int *arg7 = (int *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALTransformerInfoShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = *(double **)&_swig_go_3; 
  arg5 = *(double **)&_swig_go_4; 
  arg6 = *(double **)&_swig_go_5; 
  arg7 = *(int **)&_swig_go_6; 
  
  result = (int)GDALTransformerInfoShadow_TransformPoints(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Transformer_TransformGeolocations_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALTransformerInfoShadow *_swig_go_0, GDALRasterBandShadow *_swig_go_1, GDALRasterBandShadow *_swig_go_2, GDALRasterBandShadow *_swig_go_3, GDALProgressFunc _swig_go_4, void *_swig_go_5, char **_swig_go_6) {
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg4 = (GDALRasterBandShadow *) 0 ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  char **arg7 = (char **) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALTransformerInfoShadow **)&_swig_go_0; 
  arg2 = *(GDALRasterBandShadow **)&_swig_go_1; 
  arg3 = *(GDALRasterBandShadow **)&_swig_go_2; 
  arg4 = *(GDALRasterBandShadow **)&_swig_go_3; 
  if (_swig_optargc > 0) {
    {
      arg5 = _swig_go_4;
    }
  }
  if (_swig_optargc > 1) {
    arg6 = *(void **)&_swig_go_5; 
  }
  if (_swig_optargc > 2) {
    arg7 = *(char ***)&_swig_go_6; 
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg3) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg4) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)GDALTransformerInfoShadow_TransformGeolocations(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ApplyGeoTransform_gdal_2ee2b483ca948fbb(double *_swig_go_0, double _swig_go_1, double _swig_go_2, _goslice_ _swig_go_3, _goslice_ _swig_go_4) {
  double *arg1 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double temp4 ;
  double temp5 ;
  
  arg1 = *(double **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  {
    if (_swig_go_3.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg4 = &temp4;
  }
  {
    if (_swig_go_4.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg5 = &temp5;
  }
  
  GDALApplyGeoTransform(arg1,arg2,arg3,arg4,arg5);
  
  {
    double* a = (double *) _swig_go_3.array;
    a[0] = temp4;
  }
  {
    double* a = (double *) _swig_go_4.array;
    a[0] = temp5;
  }
  
  
}


intgo _wrap_InvGeoTransform_gdal_2ee2b483ca948fbb(double *_swig_go_0, double *_swig_go_1) {
  double *arg1 ;
  double *arg2 ;
  RETURN_NONE result;
  intgo _swig_go_result;
  
  arg1 = *(double **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  
  result = (RETURN_NONE)GDALInvGeoTransform(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_VersionInfo_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0) {
  char *arg1 = (char *) "VERSION_NUM" ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  if (_swig_optargc > 0) {
    arg1 = (char *)_swig_go_0.p; 
  }
  
  result = (char *)GDALVersionInfo((char const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_AllRegister_gdal_2ee2b483ca948fbb() {
  GDALAllRegister();
  
}


void _wrap_GDALDestroyDriverManager_gdal_2ee2b483ca948fbb() {
  GDALDestroyDriverManager();
  
}


intgo _wrap_GetCacheMax_gdal_2ee2b483ca948fbb() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)wrapper_GDALGetCacheMax();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GetCacheUsed_gdal_2ee2b483ca948fbb() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)wrapper_GDALGetCacheUsed();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetCacheMax_gdal_2ee2b483ca948fbb(intgo _swig_go_0) {
  int arg1 ;
  
  arg1 = (int)_swig_go_0; 
  
  wrapper_GDALSetCacheMax(arg1);
  
}


intgo _wrap_GetDataTypeSize_gdal_2ee2b483ca948fbb(intgo _swig_go_0) {
  GDALDataType arg1 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (GDALDataType)_swig_go_0; 
  
  result = (int)GDALGetDataTypeSize(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DataTypeIsComplex_gdal_2ee2b483ca948fbb(intgo _swig_go_0) {
  GDALDataType arg1 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (GDALDataType)_swig_go_0; 
  
  result = (int)GDALDataTypeIsComplex(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_GetDataTypeName_gdal_2ee2b483ca948fbb(intgo _swig_go_0) {
  GDALDataType arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (GDALDataType)_swig_go_0; 
  
  result = (char *)GDALGetDataTypeName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_GetDataTypeByName_gdal_2ee2b483ca948fbb(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  GDALDataType result;
  intgo _swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  
  result = (GDALDataType)GDALGetDataTypeByName((char const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_GetColorInterpretationName_gdal_2ee2b483ca948fbb(intgo _swig_go_0) {
  GDALColorInterp arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (GDALColorInterp)_swig_go_0; 
  
  result = (char *)GDALGetColorInterpretationName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_GetPaletteInterpretationName_gdal_2ee2b483ca948fbb(intgo _swig_go_0) {
  GDALPaletteInterp arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (GDALPaletteInterp)_swig_go_0; 
  
  result = (char *)GDALGetPaletteInterpretationName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_DecToDMS_gdal_2ee2b483ca948fbb(intgo _swig_optargc, double _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 2 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  if (_swig_optargc > 0) {
    arg3 = (int)_swig_go_2; 
  }
  
  result = (char *)GDALDecToDMS(arg1,(char const *)arg2,arg3);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


double _wrap_PackedDMSToDec_gdal_2ee2b483ca948fbb(double _swig_go_0) {
  double arg1 ;
  double result;
  double _swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  
  result = (double)GDALPackedDMSToDec(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_DecToPackedDMS_gdal_2ee2b483ca948fbb(double _swig_go_0) {
  double arg1 ;
  double result;
  double _swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  
  result = (double)GDALDecToPackedDMS(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


CPLXMLNode *_wrap_ParseXMLString_gdal_2ee2b483ca948fbb(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  CPLXMLNode *result = 0 ;
  CPLXMLNode *_swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  
  result = (CPLXMLNode *)CPLParseXMLString(arg1);
  *(CPLXMLNode **)&_swig_go_result = (CPLXMLNode *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_SerializeXMLTree_gdal_2ee2b483ca948fbb(CPLXMLNode *_swig_go_0) {
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(CPLXMLNode **)&_swig_go_0; 
  
  result = (char *)CPLSerializeXMLTree(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_GetJPEG2000StructureAsString_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0, char **_swig_go_1) {
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) NULL ;
  retStringAndCPLFree *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  if (_swig_optargc > 0) {
    arg2 = *(char ***)&_swig_go_1; 
  }
  
  result = (retStringAndCPLFree *)GetJPEG2000StructureAsString((char const *)arg1,arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_GetDriverCount_gdal_2ee2b483ca948fbb() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)GetDriverCount();
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALDriverShadow *_wrap_GetDriverByName_gdal_2ee2b483ca948fbb(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  GDALDriverShadow *result = 0 ;
  GDALDriverShadow *_swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDriverShadow *)GetDriverByName((char const *)arg1);
  *(GDALDriverShadow **)&_swig_go_result = (GDALDriverShadow *)result; 
  return _swig_go_result;
}


GDALDriverShadow *_wrap_GetDriver_gdal_2ee2b483ca948fbb(intgo _swig_go_0) {
  int arg1 ;
  GDALDriverShadow *result = 0 ;
  GDALDriverShadow *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (GDALDriverShadow *)GetDriver(arg1);
  *(GDALDriverShadow **)&_swig_go_result = (GDALDriverShadow *)result; 
  return _swig_go_result;
}


GDALDatasetShadow *_wrap_Open_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  GDALAccess arg2 = (GDALAccess) GA_ReadOnly ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  if (_swig_optargc > 0) {
    arg2 = (GDALAccess)_swig_go_1; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)Open((char const *)arg1,arg2);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


GDALDatasetShadow *_wrap_OpenEx_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0, intgo _swig_go_1, char **_swig_go_2, char **_swig_go_3, char **_swig_go_4) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 = (unsigned int) 0 ;
  char **arg3 = (char **) NULL ;
  char **arg4 = (char **) NULL ;
  char **arg5 = (char **) NULL ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  if (_swig_optargc > 0) {
    arg2 = (unsigned int)_swig_go_1; 
  }
  if (_swig_optargc > 1) {
    arg3 = *(char ***)&_swig_go_2; 
  }
  if (_swig_optargc > 2) {
    arg4 = *(char ***)&_swig_go_3; 
  }
  if (_swig_optargc > 3) {
    arg5 = *(char ***)&_swig_go_4; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)OpenEx((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


GDALDatasetShadow *_wrap_OpenShared_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  GDALAccess arg2 = (GDALAccess) GA_ReadOnly ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  if (_swig_optargc > 0) {
    arg2 = (GDALAccess)_swig_go_1; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)OpenShared((char const *)arg1,arg2);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


GDALDriverShadow *_wrap_IdentifyDriver_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0, char **_swig_go_1) {
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) NULL ;
  GDALDriverShadow *result = 0 ;
  GDALDriverShadow *_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  if (_swig_optargc > 0) {
    arg2 = *(char ***)&_swig_go_1; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDriverShadow *)IdentifyDriver((char const *)arg1,arg2);
  *(GDALDriverShadow **)&_swig_go_result = (GDALDriverShadow *)result; 
  return _swig_go_result;
}


char **_wrap_GeneralCmdLineProcessor_gdal_2ee2b483ca948fbb(intgo _swig_optargc, char **_swig_go_0, intgo _swig_go_1) {
  char **arg1 = (char **) 0 ;
  int arg2 = (int) 0 ;
  char **result = 0 ;
  char **_swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  if (_swig_optargc > 0) {
    arg2 = (int)_swig_go_1; 
  }
  
  result = (char **)GeneralCmdLineProcessor(arg1,arg2);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


GDALInfoOptions *_wrap_new_GDALInfoOptions_gdal_2ee2b483ca948fbb(char **_swig_go_0) {
  char **arg1 = (char **) 0 ;
  GDALInfoOptions *result = 0 ;
  GDALInfoOptions *_swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  
  result = (GDALInfoOptions *)new_GDALInfoOptions(arg1);
  *(GDALInfoOptions **)&_swig_go_result = (GDALInfoOptions *)result; 
  return _swig_go_result;
}


void _wrap_delete_GDALInfoOptions_gdal_2ee2b483ca948fbb(GDALInfoOptions *_swig_go_0) {
  GDALInfoOptions *arg1 = (GDALInfoOptions *) 0 ;
  
  arg1 = *(GDALInfoOptions **)&_swig_go_0; 
  
  delete_GDALInfoOptions(arg1);
  
}


_gostring_ _wrap_GDALInfo_gdal_2ee2b483ca948fbb(GDALDatasetShadow *_swig_go_0, GDALInfoOptions *_swig_go_1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALInfoOptions *arg2 = (GDALInfoOptions *) 0 ;
  retStringAndCPLFree *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = *(GDALInfoOptions **)&_swig_go_1; 
  
  result = (retStringAndCPLFree *)GDALInfo(arg1,arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


GDALTranslateOptions *_wrap_new_GDALTranslateOptions_gdal_2ee2b483ca948fbb(char **_swig_go_0) {
  char **arg1 = (char **) 0 ;
  GDALTranslateOptions *result = 0 ;
  GDALTranslateOptions *_swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  
  result = (GDALTranslateOptions *)new_GDALTranslateOptions(arg1);
  *(GDALTranslateOptions **)&_swig_go_result = (GDALTranslateOptions *)result; 
  return _swig_go_result;
}


void _wrap_delete_GDALTranslateOptions_gdal_2ee2b483ca948fbb(GDALTranslateOptions *_swig_go_0) {
  GDALTranslateOptions *arg1 = (GDALTranslateOptions *) 0 ;
  
  arg1 = *(GDALTranslateOptions **)&_swig_go_0; 
  
  delete_GDALTranslateOptions(arg1);
  
}


GDALDatasetShadow *_wrap_wrapper_GDALTranslate_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0, GDALDatasetShadow *_swig_go_1, GDALTranslateOptions *_swig_go_2, GDALProgressFunc _swig_go_3, void *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALTranslateOptions *arg3 = (GDALTranslateOptions *) 0 ;
  GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
  void *arg5 = (void *) NULL ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  arg2 = *(GDALDatasetShadow **)&_swig_go_1; 
  arg3 = *(GDALTranslateOptions **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    {
      arg4 = _swig_go_3;
    }
  }
  if (_swig_optargc > 1) {
    arg5 = *(void **)&_swig_go_4; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)wrapper_GDALTranslate((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


GDALWarpAppOptions *_wrap_new_GDALWarpAppOptions_gdal_2ee2b483ca948fbb(char **_swig_go_0) {
  char **arg1 = (char **) 0 ;
  GDALWarpAppOptions *result = 0 ;
  GDALWarpAppOptions *_swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  
  result = (GDALWarpAppOptions *)new_GDALWarpAppOptions(arg1);
  *(GDALWarpAppOptions **)&_swig_go_result = (GDALWarpAppOptions *)result; 
  return _swig_go_result;
}


void _wrap_delete_GDALWarpAppOptions_gdal_2ee2b483ca948fbb(GDALWarpAppOptions *_swig_go_0) {
  GDALWarpAppOptions *arg1 = (GDALWarpAppOptions *) 0 ;
  
  arg1 = *(GDALWarpAppOptions **)&_swig_go_0; 
  
  delete_GDALWarpAppOptions(arg1);
  
}


intgo _wrap_wrapper_GDALWarpDestDS_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, intgo _swig_go_1, GDALDatasetShadow **_swig_go_2, GDALWarpAppOptions *_swig_go_3, GDALProgressFunc _swig_go_4, void *_swig_go_5) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  GDALDatasetShadow **arg3 = (GDALDatasetShadow **) 0 ;
  GDALWarpAppOptions *arg4 = (GDALWarpAppOptions *) 0 ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(GDALDatasetShadow ***)&_swig_go_2; 
  arg4 = *(GDALWarpAppOptions **)&_swig_go_3; 
  if (_swig_optargc > 0) {
    {
      arg5 = _swig_go_4;
    }
  }
  if (_swig_optargc > 1) {
    arg6 = *(void **)&_swig_go_5; 
  }
  
  result = (int)wrapper_GDALWarpDestDS(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALDatasetShadow *_wrap_wrapper_GDALWarpDestName_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0, intgo _swig_go_1, GDALDatasetShadow **_swig_go_2, GDALWarpAppOptions *_swig_go_3, GDALProgressFunc _swig_go_4, void *_swig_go_5) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  GDALDatasetShadow **arg3 = (GDALDatasetShadow **) 0 ;
  GDALWarpAppOptions *arg4 = (GDALWarpAppOptions *) 0 ;
  GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
  void *arg6 = (void *) NULL ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  arg2 = (int)_swig_go_1; 
  arg3 = *(GDALDatasetShadow ***)&_swig_go_2; 
  arg4 = *(GDALWarpAppOptions **)&_swig_go_3; 
  if (_swig_optargc > 0) {
    {
      arg5 = _swig_go_4;
    }
  }
  if (_swig_optargc > 1) {
    arg6 = *(void **)&_swig_go_5; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)wrapper_GDALWarpDestName((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


GDALVectorTranslateOptions *_wrap_new_GDALVectorTranslateOptions_gdal_2ee2b483ca948fbb(char **_swig_go_0) {
  char **arg1 = (char **) 0 ;
  GDALVectorTranslateOptions *result = 0 ;
  GDALVectorTranslateOptions *_swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  
  result = (GDALVectorTranslateOptions *)new_GDALVectorTranslateOptions(arg1);
  *(GDALVectorTranslateOptions **)&_swig_go_result = (GDALVectorTranslateOptions *)result; 
  return _swig_go_result;
}


void _wrap_delete_GDALVectorTranslateOptions_gdal_2ee2b483ca948fbb(GDALVectorTranslateOptions *_swig_go_0) {
  GDALVectorTranslateOptions *arg1 = (GDALVectorTranslateOptions *) 0 ;
  
  arg1 = *(GDALVectorTranslateOptions **)&_swig_go_0; 
  
  delete_GDALVectorTranslateOptions(arg1);
  
}


intgo _wrap_wrapper_GDALVectorTranslateDestDS_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, GDALDatasetShadow *_swig_go_1, GDALVectorTranslateOptions *_swig_go_2, GDALProgressFunc _swig_go_3, void *_swig_go_4) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALVectorTranslateOptions *arg3 = (GDALVectorTranslateOptions *) 0 ;
  GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
  void *arg5 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = *(GDALDatasetShadow **)&_swig_go_1; 
  arg3 = *(GDALVectorTranslateOptions **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    {
      arg4 = _swig_go_3;
    }
  }
  if (_swig_optargc > 1) {
    arg5 = *(void **)&_swig_go_4; 
  }
  
  result = (int)wrapper_GDALVectorTranslateDestDS(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALDatasetShadow *_wrap_wrapper_GDALVectorTranslateDestName_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0, GDALDatasetShadow *_swig_go_1, GDALVectorTranslateOptions *_swig_go_2, GDALProgressFunc _swig_go_3, void *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALVectorTranslateOptions *arg3 = (GDALVectorTranslateOptions *) 0 ;
  GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
  void *arg5 = (void *) NULL ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  arg2 = *(GDALDatasetShadow **)&_swig_go_1; 
  arg3 = *(GDALVectorTranslateOptions **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    {
      arg4 = _swig_go_3;
    }
  }
  if (_swig_optargc > 1) {
    arg5 = *(void **)&_swig_go_4; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)wrapper_GDALVectorTranslateDestName((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


GDALDEMProcessingOptions *_wrap_new_GDALDEMProcessingOptions_gdal_2ee2b483ca948fbb(char **_swig_go_0) {
  char **arg1 = (char **) 0 ;
  GDALDEMProcessingOptions *result = 0 ;
  GDALDEMProcessingOptions *_swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  
  result = (GDALDEMProcessingOptions *)new_GDALDEMProcessingOptions(arg1);
  *(GDALDEMProcessingOptions **)&_swig_go_result = (GDALDEMProcessingOptions *)result; 
  return _swig_go_result;
}


void _wrap_delete_GDALDEMProcessingOptions_gdal_2ee2b483ca948fbb(GDALDEMProcessingOptions *_swig_go_0) {
  GDALDEMProcessingOptions *arg1 = (GDALDEMProcessingOptions *) 0 ;
  
  arg1 = *(GDALDEMProcessingOptions **)&_swig_go_0; 
  
  delete_GDALDEMProcessingOptions(arg1);
  
}


GDALDatasetShadow *_wrap_wrapper_GDALDEMProcessing_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0, GDALDatasetShadow *_swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, GDALDEMProcessingOptions *_swig_go_4, GDALProgressFunc _swig_go_5, void *_swig_go_6) {
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  GDALDEMProcessingOptions *arg5 = (GDALDEMProcessingOptions *) 0 ;
  GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
  void *arg7 = (void *) NULL ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  arg2 = *(GDALDatasetShadow **)&_swig_go_1; 
  arg3 = (char *)_swig_go_2.p; 
  arg4 = (char *)_swig_go_3.p; 
  arg5 = *(GDALDEMProcessingOptions **)&_swig_go_4; 
  if (_swig_optargc > 0) {
    {
      arg6 = _swig_go_5;
    }
  }
  if (_swig_optargc > 1) {
    arg7 = *(void **)&_swig_go_6; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg3) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)wrapper_GDALDEMProcessing((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


GDALNearblackOptions *_wrap_new_GDALNearblackOptions_gdal_2ee2b483ca948fbb(char **_swig_go_0) {
  char **arg1 = (char **) 0 ;
  GDALNearblackOptions *result = 0 ;
  GDALNearblackOptions *_swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  
  result = (GDALNearblackOptions *)new_GDALNearblackOptions(arg1);
  *(GDALNearblackOptions **)&_swig_go_result = (GDALNearblackOptions *)result; 
  return _swig_go_result;
}


void _wrap_delete_GDALNearblackOptions_gdal_2ee2b483ca948fbb(GDALNearblackOptions *_swig_go_0) {
  GDALNearblackOptions *arg1 = (GDALNearblackOptions *) 0 ;
  
  arg1 = *(GDALNearblackOptions **)&_swig_go_0; 
  
  delete_GDALNearblackOptions(arg1);
  
}


intgo _wrap_wrapper_GDALNearblackDestDS_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, GDALDatasetShadow *_swig_go_1, GDALNearblackOptions *_swig_go_2, GDALProgressFunc _swig_go_3, void *_swig_go_4) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALNearblackOptions *arg3 = (GDALNearblackOptions *) 0 ;
  GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
  void *arg5 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = *(GDALDatasetShadow **)&_swig_go_1; 
  arg3 = *(GDALNearblackOptions **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    {
      arg4 = _swig_go_3;
    }
  }
  if (_swig_optargc > 1) {
    arg5 = *(void **)&_swig_go_4; 
  }
  
  result = (int)wrapper_GDALNearblackDestDS(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALDatasetShadow *_wrap_wrapper_GDALNearblackDestName_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0, GDALDatasetShadow *_swig_go_1, GDALNearblackOptions *_swig_go_2, GDALProgressFunc _swig_go_3, void *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALNearblackOptions *arg3 = (GDALNearblackOptions *) 0 ;
  GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
  void *arg5 = (void *) NULL ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  arg2 = *(GDALDatasetShadow **)&_swig_go_1; 
  arg3 = *(GDALNearblackOptions **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    {
      arg4 = _swig_go_3;
    }
  }
  if (_swig_optargc > 1) {
    arg5 = *(void **)&_swig_go_4; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)wrapper_GDALNearblackDestName((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


GDALGridOptions *_wrap_new_GDALGridOptions_gdal_2ee2b483ca948fbb(char **_swig_go_0) {
  char **arg1 = (char **) 0 ;
  GDALGridOptions *result = 0 ;
  GDALGridOptions *_swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  
  result = (GDALGridOptions *)new_GDALGridOptions(arg1);
  *(GDALGridOptions **)&_swig_go_result = (GDALGridOptions *)result; 
  return _swig_go_result;
}


void _wrap_delete_GDALGridOptions_gdal_2ee2b483ca948fbb(GDALGridOptions *_swig_go_0) {
  GDALGridOptions *arg1 = (GDALGridOptions *) 0 ;
  
  arg1 = *(GDALGridOptions **)&_swig_go_0; 
  
  delete_GDALGridOptions(arg1);
  
}


GDALDatasetShadow *_wrap_wrapper_GDALGrid_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0, GDALDatasetShadow *_swig_go_1, GDALGridOptions *_swig_go_2, GDALProgressFunc _swig_go_3, void *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALGridOptions *arg3 = (GDALGridOptions *) 0 ;
  GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
  void *arg5 = (void *) NULL ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  arg2 = *(GDALDatasetShadow **)&_swig_go_1; 
  arg3 = *(GDALGridOptions **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    {
      arg4 = _swig_go_3;
    }
  }
  if (_swig_optargc > 1) {
    arg5 = *(void **)&_swig_go_4; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  {
    if (!arg2) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)wrapper_GDALGrid((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


GDALRasterizeOptions *_wrap_new_GDALRasterizeOptions_gdal_2ee2b483ca948fbb(char **_swig_go_0) {
  char **arg1 = (char **) 0 ;
  GDALRasterizeOptions *result = 0 ;
  GDALRasterizeOptions *_swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  
  result = (GDALRasterizeOptions *)new_GDALRasterizeOptions(arg1);
  *(GDALRasterizeOptions **)&_swig_go_result = (GDALRasterizeOptions *)result; 
  return _swig_go_result;
}


void _wrap_delete_GDALRasterizeOptions_gdal_2ee2b483ca948fbb(GDALRasterizeOptions *_swig_go_0) {
  GDALRasterizeOptions *arg1 = (GDALRasterizeOptions *) 0 ;
  
  arg1 = *(GDALRasterizeOptions **)&_swig_go_0; 
  
  delete_GDALRasterizeOptions(arg1);
  
}


intgo _wrap_wrapper_GDALRasterizeDestDS_gdal_2ee2b483ca948fbb(intgo _swig_optargc, GDALDatasetShadow *_swig_go_0, GDALDatasetShadow *_swig_go_1, GDALRasterizeOptions *_swig_go_2, GDALProgressFunc _swig_go_3, void *_swig_go_4) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALRasterizeOptions *arg3 = (GDALRasterizeOptions *) 0 ;
  GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
  void *arg5 = (void *) NULL ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(GDALDatasetShadow **)&_swig_go_0; 
  arg2 = *(GDALDatasetShadow **)&_swig_go_1; 
  arg3 = *(GDALRasterizeOptions **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    {
      arg4 = _swig_go_3;
    }
  }
  if (_swig_optargc > 1) {
    arg5 = *(void **)&_swig_go_4; 
  }
  
  result = (int)wrapper_GDALRasterizeDestDS(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


GDALDatasetShadow *_wrap_wrapper_GDALRasterizeDestName_gdal_2ee2b483ca948fbb(intgo _swig_optargc, _gostring_ _swig_go_0, GDALDatasetShadow *_swig_go_1, GDALRasterizeOptions *_swig_go_2, GDALProgressFunc _swig_go_3, void *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALRasterizeOptions *arg3 = (GDALRasterizeOptions *) 0 ;
  GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
  void *arg5 = (void *) NULL ;
  GDALDatasetShadow *result = 0 ;
  GDALDatasetShadow *_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  arg2 = *(GDALDatasetShadow **)&_swig_go_1; 
  arg3 = *(GDALRasterizeOptions **)&_swig_go_2; 
  if (_swig_optargc > 0) {
    {
      arg4 = _swig_go_3;
    }
  }
  if (_swig_optargc > 1) {
    arg5 = *(void **)&_swig_go_4; 
  }
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (GDALDatasetShadow *)wrapper_GDALRasterizeDestName((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&_swig_go_result = (GDALDatasetShadow *)result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

