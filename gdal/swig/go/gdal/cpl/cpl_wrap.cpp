/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ../include/go/cpl_go.i

#define SWIGMODULE github.com/geo-data/go-gdal/gdal/swig/go/gdal/cpl

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


#define SWIG_exception(code, msg) _swig_gopanic(msg)


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}


#include "cpl_vsi.h"
#include "cpl_multiproc.h"
#include "cpl_http.h"


typedef char retStringAndCPLFree;

/* return value that is used for VSI methods that return -1 on error (and set errno) */
typedef int VSI_RETVAL;


  void Debug( const char *msg_class, const char *message ) {
    CPLDebug( msg_class, "%s", message );
  }


  CPLErr SetErrorHandler( CPLErrorHandler pfnErrorHandler, void* user_data)
  {
    if( pfnErrorHandler == NULL ) {
      CPLSetErrorHandler(NULL); /* Set the default handler. */
    } else {
      CPLSetErrorHandlerEx(pfnErrorHandler, user_data);
    }
    return CE_None;
  }


  CPLErr PushErrorHandler( CPLErrorHandler pfnErrorHandler, void* user_data)
  {
     CPLPushErrorHandlerEx(pfnErrorHandler, user_data);
     return CE_None;
  }


  void Error( CPLErr msg_class, int err_code, const char* msg ) {
    CPLError( msg_class, err_code, "%s", msg );
  }


char* EscapeString(int len, char *bin_string , int scheme=CPLES_SQL) {
    return CPLEscapeString(bin_string, len, scheme);
} 


char **wrapper_VSIReadDirEx( const char * utf8_path, int nMaxFiles = 0 )
{
    return VSIReadDirEx(utf8_path, nMaxFiles);
}


const char *wrapper_CPLGetConfigOption( const char * pszKey, const char * pszDefault = NULL )
{
    return CPLGetConfigOption( pszKey, pszDefault );
}


void wrapper_VSIFileFromMemBuffer( const char* utf8_path, int nBytes, const GByte *pabyData)
{
    GByte* pabyDataDup = (GByte*)VSIMalloc(nBytes);
    if (pabyDataDup == NULL)
            return;
    memcpy(pabyDataDup, pabyData, nBytes);
    VSIFCloseL(VSIFileFromMemBuffer(utf8_path, (GByte*) pabyDataDup, nBytes, TRUE));
}



int wrapper_HasThreadSupport()
{
    return strcmp(CPLGetThreadingModel(), "stub") != 0;
}


VSILFILE   *wrapper_VSIFOpenL( const char *utf8_path, const char *pszMode )
{
    if (!pszMode) /* would lead to segfault */
        pszMode = "r";
    return VSIFOpenL( utf8_path, pszMode );
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_cpl_47a89855fc1adaf7(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void _wrap_Debug_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)_swig_go_0.p; 
  arg2 = (char *)_swig_go_1.p; 
  
  Debug((char const *)arg1,(char const *)arg2);
  
}


intgo _wrap_SetErrorHandler_cpl_47a89855fc1adaf7(CPLErrorHandler _swig_go_0, void *_swig_go_1) {
  CPLErrorHandler arg1 ;
  void *arg2 = (void *) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  {
    arg1 = _swig_go_0;
  }
  arg2 = *(void **)&_swig_go_1; 
  
  result = (CPLErr)SetErrorHandler(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PushErrorHandler_cpl_47a89855fc1adaf7(CPLErrorHandler _swig_go_0, void *_swig_go_1) {
  CPLErrorHandler arg1 ;
  void *arg2 = (void *) 0 ;
  CPLErr result;
  intgo _swig_go_result;
  
  {
    arg1 = _swig_go_0;
  }
  arg2 = *(void **)&_swig_go_1; 
  
  result = (CPLErr)PushErrorHandler(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Error_cpl_47a89855fc1adaf7(intgo _swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  CPLErr arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (CPLErr)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (char *)_swig_go_2.p; 
  
  Error(arg1,arg2,(char const *)arg3);
  
}


_gostring_ _wrap_GOA2GetAuthorizationURL_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  retStringAndCPLFree *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  
  result = (retStringAndCPLFree *)GOA2GetAuthorizationURL((char const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_GOA2GetRefreshToken_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  retStringAndCPLFree *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (retStringAndCPLFree *)GOA2GetRefreshToken((char const *)arg1,(char const *)arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_GOA2GetAccessToken_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  retStringAndCPLFree *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (retStringAndCPLFree *)GOA2GetAccessToken((char const *)arg1,(char const *)arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_PopErrorHandler_cpl_47a89855fc1adaf7() {
  CPLPopErrorHandler();
  
}


void _wrap_ErrorReset_cpl_47a89855fc1adaf7() {
  CPLErrorReset();
  
}


_gostring_ _wrap_EscapeString__SWIG_0_cpl_47a89855fc1adaf7(intgo _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  arg3 = (int)_swig_go_2; 
  
  result = (char *)EscapeString(arg1,arg2,arg3);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_EscapeString__SWIG_1_cpl_47a89855fc1adaf7(intgo _swig_go_0, _gostring_ _swig_go_1) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (char *)_swig_go_1.p; 
  
  result = (char *)EscapeString(arg1,arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_GetLastErrorNo_cpl_47a89855fc1adaf7() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)CPLGetLastErrorNo();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GetLastErrorType_cpl_47a89855fc1adaf7() {
  CPLErr result;
  intgo _swig_go_result;
  
  
  result = (CPLErr)CPLGetLastErrorType();
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_GetLastErrorMsg_cpl_47a89855fc1adaf7() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = (char *)CPLGetLastErrorMsg();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_PushFinderLocation_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  
  CPLPushFinderLocation((char const *)arg1);
  
}


void _wrap_PopFinderLocation_cpl_47a89855fc1adaf7() {
  CPLPopFinderLocation();
  
}


void _wrap_FinderClean_cpl_47a89855fc1adaf7() {
  CPLFinderClean();
  
}


_gostring_ _wrap_FindFile_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  {
    arg2 = (char *)_swig_go_1.p;       /* From the default swig string typemap. */
    if (!arg2) {
      arg2 = (char *)"";
    }
  }
  
  result = (char *)CPLFindFile((char const *)arg1,(char const *)arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


char **_wrap_ReadDir__SWIG_0_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char **result = 0 ;
  char **_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  arg2 = (int)_swig_go_1; 
  
  result = (char **)wrapper_VSIReadDirEx((char const *)arg1,arg2);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


char **_wrap_ReadDir__SWIG_1_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  char **result = 0 ;
  char **_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  
  result = (char **)wrapper_VSIReadDirEx((char const *)arg1);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


char **_wrap_ReadDirRecursive_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  char **result = 0 ;
  char **_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  
  result = (char **)VSIReadDirRecursive((char const *)arg1);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


void _wrap_SetConfigOption_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)_swig_go_0.p; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  CPLSetConfigOption((char const *)arg1,(char const *)arg2);
  
}


_gostring_ _wrap_GetConfigOption__SWIG_0_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  arg2 = (char *)_swig_go_1.p; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (char *)wrapper_CPLGetConfigOption((char const *)arg1,(char const *)arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_GetConfigOption__SWIG_1_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (char *)wrapper_CPLGetConfigOption((char const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_CPLBinaryToHex_cpl_47a89855fc1adaf7(intgo _swig_go_0, GByte *_swig_go_1) {
  int arg1 ;
  GByte *arg2 = (GByte *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(GByte **)&_swig_go_1; 
  
  result = (char *)CPLBinaryToHex(arg1,(GByte const *)arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


GByte *_wrap_CPLHexToBinary_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  GByte *result = 0 ;
  GByte *_swig_go_result;
  
  arg1 = (char *)_swig_go_0.p; 
  arg2 = *(int **)&_swig_go_1; 
  
  result = (GByte *)CPLHexToBinary((char const *)arg1,arg2);
  *(GByte **)&_swig_go_result = (GByte *)result; 
  return _swig_go_result;
}


void _wrap_FileFromMemBuffer_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0, intgo _swig_go_1, GByte *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  GByte *arg3 = (GByte *) 0 ;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  arg2 = (int)_swig_go_1; 
  arg3 = *(GByte **)&_swig_go_2; 
  
  wrapper_VSIFileFromMemBuffer((char const *)arg1,arg2,(GByte const *)arg3);
  
}


intgo _wrap_Unlink_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  VSI_RETVAL result;
  intgo _swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  
  result = (VSI_RETVAL)VSIUnlink((char const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_HasThreadSupport_cpl_47a89855fc1adaf7() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)wrapper_HasThreadSupport();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Mkdir_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  VSI_RETVAL result;
  intgo _swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  arg2 = (int)_swig_go_1; 
  
  result = (VSI_RETVAL)VSIMkdir((char const *)arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Rmdir_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  VSI_RETVAL result;
  intgo _swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  
  result = (VSI_RETVAL)VSIRmdir((char const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Rename_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  VSI_RETVAL result;
  intgo _swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  {
    arg2 = (char *)_swig_go_1.p;       /* From the default swig string typemap. */
    if (!arg2) {
      arg2 = (char *)"";
    }
  }
  
  result = (VSI_RETVAL)VSIRename((char const *)arg1,(char const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


VSILFILE *_wrap_VSIFOpenL_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  VSILFILE *result = 0 ;
  VSILFILE *_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  arg2 = (char *)_swig_go_1.p; 
  
  result = (VSILFILE *)wrapper_VSIFOpenL((char const *)arg1,(char const *)arg2);
  *(VSILFILE **)&_swig_go_result = (VSILFILE *)result; 
  return _swig_go_result;
}


intgo _wrap_VSIFCloseL_cpl_47a89855fc1adaf7(VSILFILE *_swig_go_0) {
  VSILFILE *arg1 = (VSILFILE *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(VSILFILE **)&_swig_go_0; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)VSIFCloseL(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_VSIFSeekL_cpl_47a89855fc1adaf7(VSILFILE *_swig_go_0, long long _swig_go_1, intgo _swig_go_2) {
  VSILFILE *arg1 = (VSILFILE *) 0 ;
  long arg2 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(VSILFILE **)&_swig_go_0; 
  arg2 = (long)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)VSIFSeekL(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VSIFTellL_cpl_47a89855fc1adaf7(VSILFILE *_swig_go_0) {
  VSILFILE *arg1 = (VSILFILE *) 0 ;
  long result;
  long long _swig_go_result;
  
  arg1 = *(VSILFILE **)&_swig_go_0; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (long)VSIFTellL(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_VSIFTruncateL_cpl_47a89855fc1adaf7(VSILFILE *_swig_go_0, long long _swig_go_1) {
  VSILFILE *arg1 = (VSILFILE *) 0 ;
  long arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(VSILFILE **)&_swig_go_0; 
  arg2 = (long)_swig_go_1; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)VSIFTruncateL(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_VSIFEofL_cpl_47a89855fc1adaf7(VSILFILE *_swig_go_0) {
  VSILFILE *arg1 = (VSILFILE *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(VSILFILE **)&_swig_go_0; 
  
  {
    if (!arg1) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = (int)VSIFEofL(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VSIFWriteL_cpl_47a89855fc1adaf7(void *_swig_go_0, long long _swig_go_1, long long _swig_go_2, VSILFILE *_swig_go_3) {
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  VSILFILE *arg4 = (VSILFILE *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(void **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  arg4 = *(VSILFILE **)&_swig_go_3; 
  
  {
    if (!arg4) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = VSIFWriteL((void const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VSIFReadL_cpl_47a89855fc1adaf7(void *_swig_go_0, long long _swig_go_1, long long _swig_go_2, VSILFILE *_swig_go_3) {
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  VSILFILE *arg4 = (VSILFILE *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(void **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  arg4 = *(VSILFILE **)&_swig_go_3; 
  
  {
    if (!arg4) {
      SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
    }
  }
  
  result = VSIFReadL(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


char **_wrap_ParseCommandLine_cpl_47a89855fc1adaf7(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  char **result = 0 ;
  char **_swig_go_result;
  
  {
    arg1 = (char *)_swig_go_0.p;       /* From the default swig string typemap. */
    if (!arg1) {
      arg1 = (char *)"";
    }
  }
  
  result = (char **)CSLParseCommandLine((char const *)arg1);
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

