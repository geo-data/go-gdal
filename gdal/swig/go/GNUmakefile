##
# Build the Golang GDAL bindings.
#

# Provide a default if the GOPATH environment variable isn't set.
GOPATH ?= /tmp/go

# The name of the Go package.
PKG_REPO := github.com/geo-data/go-gdal
PKG_DIR := gdal/swig/go/gdal
PKG_NAME := $(PKG_REPO)/$(PKG_DIR)

# Include GDAL options.
include ../../GDALmake.opt

# Base Swig command.
BINDING = go
SWIG_CMD := swig -Wall -I../include -I../include/$(BINDING) $(SWIGDEFINES) -I$(GDAL_ROOT) -c++ -$(BINDING) -cgo -intgosize 64

# Location of temporary build files.
BUILD_DIR := ./build
PKG_BUILD_DIR := $(BUILD_DIR)/$(PKG_NAME)

# Swig generated source files.
CPL_GO := gdal/cpl/cpl.go
CPL_CPP := gdal/cpl/cpl_wrap.cpp
CONSTANT_GO := gdal/constant/constant.go
CONSTANT_CPP := gdal/constant/constant_wrap.cpp
OSR_GO := gdal/osr/osr.go
OSR_CPP := gdal/osr/osr_wrap.cpp
OGR_GO := gdal/ogr/ogr.go
OGR_CPP := gdal/ogr/ogr_wrap.cpp
GDAL_GO := gdal/gdal.go
GDAL_CPP := gdal/gdal_wrap.cpp

# The morph tool.
MORPH_SRC := ./tools/morph/morph.go
MORPH_BIN := $(BUILD_DIR)/morph

# Input files to morph.
MORPH_MODS_GDAL := ./morph/gdal.json
MORPH_MERGE_GDAL := ./morph/gdal.go

MORPH_MODS_OGR := ./morph/ogr.json
MORPH_MERGE_OGR := ./morph/ogr.go

MORPH_MODS_CPL := ./morph/cpl.json

# Files representing the final Go package.
SRC_FILES := $(CONSTANT_GO) \
$(CONSTANT_CPP) \
$(CPL_GO) \
$(CPL_CPP) \
gdal/cpl/error.go \
gdal/cpl/vsi.go \
gdal/cpl/wrap.go \
gdal/apps.go \
gdal/dataset.go \
gdal/dem-processing.go \
gdal/driver.go \
gdal/grid.go \
gdal/info.go \
$(GDAL_GO) \
$(GDAL_CPP) \
$(OGR_GO) \
$(OGR_CPP) \
gdal/ogr/feature.go \
gdal/ogr/geometry.go \
gdal/ogr/layer.go \
gdal/ogr/errors/errors.go \
$(OSR_GO) \
$(OSR_CPP) \
gdal/nearblack.go \
gdal/progress/progress.go \
gdal/raster/mem/mem.go \
gdal/rasterize.go \
gdal/translate.go \
gdal/vector-translate.go \
gdal/warp.go \
gdal/wrap.go

# The test files are in a separate package: they only affect the test target.
TEST_FILES := gdal/cpl/cpl_test.go \
gdal/cpl/vsi_test.go \
gdal/concurrency_test.go \
gdal/progress_test.go \
gdal/dataset_test.go \
gdal/gdal_test.go \
gdal/common_test.go

# Install locations for the source package files.
INSTALL_FILES := $(addprefix $(dir $(GOPATH)/src/$(PKG_NAME)), $(SRC_FILES))
INSTALL_TEST_FILES := $(addprefix $(dir $(GOPATH)/src/$(PKG_NAME)), $(TEST_FILES))

# Swig output files that will be run through $(MORPH_BIN).
CONSTANT_GO_BUILD := $(PKG_BUILD_DIR)/constant.go
CPL_GO_BUILD := $(PKG_BUILD_DIR)/cpl.go
OSR_GO_BUILD := $(PKG_BUILD_DIR)/osr.go
OGR_GO_BUILD := $(PKG_BUILD_DIR)/ogr.go
GDAL_GO_BUILD := $(PKG_BUILD_DIR).go

# Output generated by running swig.
SWIG_OUTPUT_CONSTANT := $(CONSTANT_GO_BUILD) $(CONSTANT_CPP)
SWIG_OUTPUT_CPL := $(CPL_GO_BUILD) $(CPL_CPP)
SWIG_OUTPUT_OSR := $(OSR_GO_BUILD) $(OSR_CPP)
SWIG_OUTPUT_OGR := $(OGR_GO_BUILD) $(OGR_CPP)
SWIG_OUTPUT_GDAL := $(GDAL_GO_BUILD) $(GDAL_CPP)

# Swig include files defining modules.
SWIG_MOD_CONSTANT := ../include/gdalconst.i
SWIG_MOD_CPL := ../include/go/cpl_go.i
SWIG_MOD_OSR := ../include/osr.i
SWIG_MOD_OGR := ../include/ogr.i
SWIG_MOD_GDAL := ../include/gdal.i

# Swig include dependencies for defining modules.
SWIG_SRC_CPL := ../include/cpl.i $(SWIG_MOD_CPL)
SWIG_SRC_OSR := ../include/go/osr_go.i $(SWIG_MOD_OSR)
SWIG_SRC_OGR := ../include/go/ogr_go.i ../include/go/typemaps_go.i $(SWIG_MOD_OGR) $(SWIG_SRC_OSR) $(SWIG_I_TYPEMAPS_GO)
SWIG_SRC_GDAL := ../include/go/gdal_go.i $(SWIG_MOD_GDAL) $(SWIG_SRC_OGR) $(SWIG_SRC_CPL)

# Specify the examples.
EX_BIN_READ_VECTOR := $(BUILD_DIR)/read-vector
EX_SRC_READ_VECTOR := ./examples/read-vector/read-vector.go

EX_BIN_WRITE_VECTOR := $(BUILD_DIR)/write-vector
EX_SRC_WRITE_VECTOR := ./examples/write-vector/write-vector.go

EX_BIN_COPY_RASTER := $(BUILD_DIR)/copy-raster
EX_SRC_COPY_RASTER := ./examples/copy-raster/copy-raster.go

EX_BIN_OPEN_MEM := $(BUILD_DIR)/open-mem
EX_SRC_OPEN_MEM := ./examples/open-mem/open-mem.go

EX_BIN_GDAL_PROCESS := $(BUILD_DIR)/gdal-process
EX_SRC_GDAL_PROCESS := ./examples/gdal-process/gdal-process.go

EXAMPLES := $(EX_BIN_COPY_RASTER) $(EX_BIN_READ_VECTOR) $(EX_BIN_WRITE_VECTOR) $(EX_BIN_OPEN_MEM) $(EX_BIN_GDAL_PROCESS)

# Files tracking otherwise phony targets.
TRK_INSTALL := $(BUILD_DIR)/.install

##
# The primary targets for installing, testing and removing the bindings.
#

# Generate the bindings by default.
all: generate

# Install the go gdal bindings.
install: $(TRK_INSTALL) $(INSTALL_TEST_FILES)

# Remove installed files.
uninstall:
	rm -rf $(GOPATH)/src/$(PKG_REPO)

# Remove temporary build files.
clean:
	rm -rf $(BUILD_DIR)

# Run the unit tests and example programs.
test: $(TRK_INSTALL) $(INSTALL_TEST_FILES) $(EXAMPLES)
	GOPATH=$(GOPATH) go test $(PKG_NAME)...
	$(EX_BIN_OPEN_MEM)
	$(EX_BIN_COPY_RASTER) $(GDAL_ROOT)/../autotest/gcore/data/rgba.tif
	$(EX_BIN_READ_VECTOR) $(GDAL_ROOT)/../autotest/ogr/data/poly.shp
	$(EX_BIN_GDAL_PROCESS) warp $(GDAL_ROOT)/../autotest/gcore/data/byte.tif /vsimem/byte.tif
	$(EX_BIN_GDAL_PROCESS) warp -options "-of VRT" $(GDAL_ROOT)/../autotest/gcore/data/byte.tif /vsimem/byte.vrt
	$(EX_BIN_GDAL_PROCESS) translate -options "-ot Int16" $(GDAL_ROOT)/../autotest/gcore/data/byte.tif /vsimem/int16.tif
	$(EX_BIN_GDAL_PROCESS) vector-translate -options "-spat 479609 4764629 479764 4764817" $(GDAL_ROOT)/../autotest/ogr/data/poly.shp /vsimem/poly.shp
	$(EX_BIN_GDAL_PROCESS) nearblack -options "-nb 0 -of GTiff" $(GDAL_ROOT)/../autotest/gdrivers/data/rgbsmall.tif /vsimem/nearblack.tif
	$(EX_BIN_GDAL_PROCESS) grid -options "-txe 440720.0 441920.0 -tye 3751320.0 3750120.0 -outsize 20 20 -ot Byte -l grid -a nearest:radius1=0.0:radius2=0.0:angle=0.0:nodata=0.0" $(GDAL_ROOT)/../autotest/utilities/data/grid.vrt /vsimem/grid-near.tif
	$(EX_BIN_GDAL_PROCESS) dem-hillshade -options "-s 111120 -z 30" $(GDAL_ROOT)/../autotest/gdrivers/data/n43.dt0 /vsimem/hillshade.tif
	$(EX_BIN_GDAL_PROCESS) dem-slope -options "-s 111120" $(GDAL_ROOT)/../autotest/gdrivers/data/n43.dt0 /vsimem/slope.tif
	$(EX_BIN_GDAL_PROCESS) dem-aspect $(GDAL_ROOT)/../autotest/gdrivers/data/n43.dt0 /vsimem/aspect.tif
	$(EX_BIN_GDAL_PROCESS) dem-color-relief -color-filename $(GDAL_ROOT)/../autotest/utilities/data/color_file.txt $(GDAL_ROOT)/../autotest/gdrivers/data/n43.dt0 /vsimem/color-relief.tif
	for i in 1 2 3; do j=`expr $$i + 1`; echo "$$i,$$j,field$$i"; done | $(EX_BIN_WRITE_VECTOR)

# Build the examples.
examples: $(EXAMPLES)

# go install.
$(TRK_INSTALL): $(INSTALL_FILES)
	GOPATH=$(GOPATH) go install -x $(PKG_NAME)/constant $(PKG_NAME)/osr $(PKG_NAME)/ogr $(PKG_NAME) && \
	touch $(TRK_INSTALL)

# go get equivalent.
$(INSTALL_FILES): $(SRC_FILES)
	install -D --compare $(subst $(dir $(GOPATH)/src/$(PKG_NAME)),,$@) $@
$(INSTALL_TEST_FILES): $(TEST_FILES)
	install -D --compare $(subst $(dir $(GOPATH)/src/$(PKG_NAME)),,$@) $@

# Create the source files.
generate: $(SRC_FILES)

##
# Build the examples.
#

$(EX_BIN_COPY_RASTER): $(TRK_INSTALL) $(EX_SRC_COPY_RASTER)
	GOPATH=$(GOPATH) go get github.com/cheggaaa/pb
	GOPATH=$(GOPATH) go	build -o $(EX_BIN_COPY_RASTER) $(EX_SRC_COPY_RASTER)
$(EX_BIN_READ_VECTOR): $(TRK_INSTALL) $(EX_SRC_READ_VECTOR)
	GOPATH=$(GOPATH) go	build -o $(EX_BIN_READ_VECTOR) $(EX_SRC_READ_VECTOR)
$(EX_BIN_WRITE_VECTOR): $(TRK_INSTALL) $(EX_SRC_WRITE_VECTOR)
	GOPATH=$(GOPATH) go	build -o $(EX_BIN_WRITE_VECTOR) $(EX_SRC_WRITE_VECTOR)
$(EX_BIN_OPEN_MEM): $(TRK_INSTALL) $(EX_SRC_OPEN_MEM)
	GOPATH=$(GOPATH) go	build -o $(EX_BIN_OPEN_MEM) $(EX_SRC_OPEN_MEM)
$(EX_BIN_GDAL_PROCESS): $(TRK_INSTALL) $(EX_SRC_GDAL_PROCESS)
	GOPATH=$(GOPATH) go	build -o $(EX_BIN_GDAL_PROCESS) $(EX_SRC_GDAL_PROCESS)

##
# Morph the swig generated module files.
#
# Morph modifies and augments the swig generated module files in the build
# directory and saves the output to the appropriate package directory.
#

$(GDAL_GO): $(SWIG_OUTPUT_GDAL) $(MORPH_MERGE_GDAL) $(MORPH_MODS_GDAL) $(MORPH_BIN)
	$(MORPH_BIN) -mods $(MORPH_MODS_GDAL) -merge $(MORPH_MERGE_GDAL) -in $(GDAL_GO_BUILD) -out $(GDAL_GO)

$(OGR_GO): $(SWIG_OUTPUT_OGR) $(MORPH_MERGE_OGR) $(MORPH_MODS_OGR) $(MORPH_BIN)
	$(MORPH_BIN) -mods $(MORPH_MODS_OGR) -merge $(MORPH_MERGE_OGR) -in $(OGR_GO_BUILD) -out $(OGR_GO)

$(CPL_GO): $(SWIG_OUTPUT_CPL) $(MORPH_MODS_CPL) $(MORPH_BIN)
	$(MORPH_BIN) -mods $(MORPH_MODS_CPL) -in $(CPL_GO_BUILD) -out $(CPL_GO)

$(OSR_GO): $(SWIG_OUTPUT_OSR)
	cp $(OSR_GO_BUILD) $(OSR_GO)

$(CONSTANT_GO): $(SWIG_OUTPUT_CONSTANT)
	cp $(CONSTANT_GO_BUILD) $(CONSTANT_GO)

# Build the morph tool.
$(MORPH_BIN): $(MORPH_SRC) | $(BUILD_DIR)
	GOPATH=$(GOPATH) go build -o $(MORPH_BIN) $(MORPH_SRC)

###
# Generate the swig wrappers.
#

$(SWIG_OUTPUT_GDAL): $(SWIG_SRC_GDAL) | $(PKG_BUILD_DIR)
	$(SWIG_CMD) -outdir "$(BUILD_DIR)" -o $(GDAL_CPP) $(SWIG_MOD_GDAL)

$(SWIG_OUTPUT_OGR): $(SWIG_SRC_OGR) | $(PKG_BUILD_DIR)
	$(SWIG_CMD) -outdir "$(BUILD_DIR)" -o $(OGR_CPP) $(SWIG_MOD_OGR)

$(SWIG_OUTPUT_OSR): $(SWIG_SRC_OSR) | $(PKG_BUILD_DIR)
	$(SWIG_CMD) -outdir "$(BUILD_DIR)" -o $(OSR_CPP) $(SWIG_MOD_OSR)

$(SWIG_OUTPUT_CPL): $(SWIG_SRC_CPL) | $(PKG_BUILD_DIR)
	$(SWIG_CMD) -outdir "$(BUILD_DIR)" -o $(CPL_CPP) $(SWIG_MOD_CPL)

$(SWIG_OUTPUT_CONSTANT): $(SWIG_MOD_CONSTANT) | $(PKG_BUILD_DIR)
	$(SWIG_CMD) -outdir "$(PKG_BUILD_DIR)" -o $(CONSTANT_CPP) -module constant $(SWIG_MOD_CONSTANT)

$(PKG_BUILD_DIR): $(BUILD_DIR)
	@mkdir -p $(PKG_BUILD_DIR)

$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)

# Targets without filesystem representations.
.PHONY: generate test examples install uninstall clean
