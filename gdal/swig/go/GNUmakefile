##
# Build the Golang GDAL bindings.
#

# Provide a default if the GOPATH environment variable isn't set.
GOPATH ?= /tmp/go

# The name of the Go package.
PKG_REPO := github.com/geo-data/go-gdal
PKG_DIR := gdal/swig/go/gdal
PKG_NAME := $(PKG_REPO)/$(PKG_DIR)

# Include GDAL options.
include ../../GDALmake.opt

# Base Swig command.
BINDING = go
SWIG_CMD := swig -Wall -I../include -I../include/$(BINDING) $(SWIGDEFINES) -I$(GDAL_ROOT) -c++ -$(BINDING) -cgo -intgosize 64

# Location of temporary build files.
BUILD_DIR := ./build
PKG_BUILD_DIR := $(BUILD_DIR)/$(PKG_NAME)

# Swig generated source files.
CONSTANT_GO := gdal/constant/constant.go
CONSTANT_CPP := gdal/constant/constant_wrap.cpp
OSR_GO := gdal/osr/osr.go
OSR_CPP := gdal/osr/osr_wrap.cpp
OGR_GO := gdal/ogr/ogr.go
OGR_CPP := gdal/ogr/ogr_wrap.cpp
GDAL_GO := gdal/gdal.go
GDAL_CPP := gdal/gdal_wrap.cpp

# The morph tool.
MORPH_SRC := ./tools/morph/morph.go
MORPH_BIN := $(BUILD_DIR)/morph

# Input files to morph.
MORPH_MODS_GDAL := ./morph/gdal.json
MORPH_MERGE_GDAL := ./morph/gdal.go

# Files representing the final Go package.
SRC_FILES := $(CONSTANT_GO) \
$(CONSTANT_CPP) \
gdal/dataset.go \
gdal/driver.go \
gdal/error.go \
$(GDAL_GO) \
$(GDAL_CPP) \
$(OGR_GO) \
$(OGR_CPP) \
$(OSR_GO) \
$(OSR_CPP) \
gdal/progress/progress.go \
gdal/vsi.go \
gdal/wrap.go

# The test files are in a separate package: they only affect the test target.
TEST_FILES := gdal/vsi_test.go \
gdal/progress/progress_test.go \
gdal/dataset_test.go \
gdal/gdal_test.go \
gdal/common_test.go

# Install locations for the source package files.
INSTALL_FILES := $(addprefix $(dir $(GOPATH)/src/$(PKG_NAME)), $(SRC_FILES))
INSTALL_TEST_FILES := $(addprefix $(dir $(GOPATH)/src/$(PKG_NAME)), $(TEST_FILES))

# Swig output files that will be run through $(MORPH_BIN).
CONSTANT_GO_BUILD := $(PKG_BUILD_DIR)/constant.go
OSR_GO_BUILD := $(PKG_BUILD_DIR)/osr.go
OGR_GO_BUILD := $(PKG_BUILD_DIR)/ogr.go
GDAL_GO_BUILD := $(PKG_BUILD_DIR).go

# Output generated by running swig.
SWIG_OUTPUT_CONSTANT := $(CONSTANT_GO_BUILD) $(CONSTANT_CPP)
SWIG_OUTPUT_OSR := $(OSR_GO_BUILD) $(OSR_CPP)
SWIG_OUTPUT_OGR := $(OGR_GO_BUILD) $(OGR_CPP)
SWIG_OUTPUT_GDAL := $(GDAL_GO_BUILD) $(GDAL_CPP)

# Swig include files defining modules.
SWIG_MOD_CONSTANT := ../include/gdalconst.i
SWIG_MOD_OSR := ../include/osr.i
SWIG_MOD_OGR := ../include/ogr.i
SWIG_MOD_GDAL := ../include/gdal.i

# Swig include dependencies for defining modules.
SWIG_SRC_OSR := ../include/go/osr_go.i $(SWIG_MOD_OSR)
SWIG_SRC_OGR := ../include/go/ogr_go.i ../include/go/typemaps_go.i $(SWIG_MOD_OGR) $(SWIG_SRC_OSR) $(SWIG_I_TYPEMAPS_GO)
SWIG_SRC_GDAL := ../include/go/gdal_go.i $(SWIG_MOD_GDAL) $(SWIG_SRC_OGR)

# Specify the examples.
EX_BIN_READ_VECTOR_DATASET := $(BUILD_DIR)/read-vector-dataset
EX_SRC_READ_VECTOR_DATASET := ./examples/read-vector-dataset/read-vector-dataset.go

EX_BIN_CREATE_RASTER_COPY := $(BUILD_DIR)/create-raster-copy
EX_SRC_CREATE_RASTER_COPY := ./examples/create-raster-copy/create-raster-copy.go

EX_BIN_OPEN_MEM_DATASET := $(BUILD_DIR)/open-mem-dataset
EX_SRC_OPEN_MEM_DATASET := ./examples/open-mem-dataset/open-mem-dataset.go

EXAMPLES := $(EX_BIN_CREATE_RASTER_COPY) $(EX_BIN_READ_VECTOR_DATASET) $(EX_BIN_OPEN_MEM_DATASET)

# Files tracking otherwise phony targets.
TRK_INSTALL := $(BUILD_DIR)/.install

##
# The primary targets for installing, testing and removing the bindings.
#

# Generate the bindings by default.
all: generate

# Install the go gdal bindings.
install: $(TRK_INSTALL) $(INSTALL_TEST_FILES)

# Remove installed files.
uninstall:
	rm -rf $(GOPATH)/src/$(PKG_REPO)

# Remove temporary build files.
clean:
	rm -rf $(BUILD_DIR)

# Run the unit tests and example programs.
test: $(TRK_INSTALL) $(INSTALL_TEST_FILES) $(EXAMPLES)
	GOPATH=$(GOPATH) go test -cover $(PKG_NAME)...
	$(EX_BIN_OPEN_MEM_DATASET)
	$(EX_BIN_CREATE_RASTER_COPY) $(GDAL_ROOT)/../autotest/gcore/data/rgba.tif
	$(EX_BIN_READ_VECTOR_DATASET) $(GDAL_ROOT)/../autotest/ogr/data/poly.shp

# Build the examples.
examples: $(EXAMPLES)

# go install.
$(TRK_INSTALL): $(INSTALL_FILES)
	GOPATH=$(GOPATH) go install -x $(PKG_NAME)/constant $(PKG_NAME)/osr $(PKG_NAME)/ogr $(PKG_NAME) && \
	touch $(TRK_INSTALL)

# go get equivalent.
$(INSTALL_FILES): $(SRC_FILES)
	install -D --compare $(subst $(dir $(GOPATH)/src/$(PKG_NAME)),,$@) $@
$(INSTALL_TEST_FILES): $(TEST_FILES)
	install -D --compare $(subst $(dir $(GOPATH)/src/$(PKG_NAME)),,$@) $@

# Create the source files.
generate: $(SRC_FILES)

##
# Build the examples.
#

$(EX_BIN_CREATE_RASTER_COPY): $(TRK_INSTALL) $(EX_SRC_CREATE_RASTER_COPY)
	GOPATH=$(GOPATH) go get github.com/cheggaaa/pb
	GOPATH=$(GOPATH) go	build -o $(EX_BIN_CREATE_RASTER_COPY) $(EX_SRC_CREATE_RASTER_COPY)
$(EX_BIN_READ_VECTOR_DATASET): $(TRK_INSTALL) $(EX_SRC_READ_VECTOR_DATASET)
	GOPATH=$(GOPATH) go	build -o $(EX_BIN_READ_VECTOR_DATASET) $(EX_SRC_READ_VECTOR_DATASET)
$(EX_BIN_OPEN_MEM_DATASET): $(TRK_INSTALL) $(EX_SRC_OPEN_MEM_DATASET)
	GOPATH=$(GOPATH) go	build -o $(EX_BIN_OPEN_MEM_DATASET) $(EX_SRC_OPEN_MEM_DATASET)

##
# Morph the swig generated module files.
#
# Morph modifies and augments the swig generated module files in the build
# directory and saves the output to the appropriate package directory.
#

$(GDAL_GO): $(SWIG_OUTPUT_GDAL) $(MORPH_MERGE_GDAL) $(MORPH_MODS_GDAL) $(MORPH_BIN)
	$(MORPH_BIN) -mods $(MORPH_MODS_GDAL) -merge $(MORPH_MERGE_GDAL) -in $(GDAL_GO_BUILD) -out $(GDAL_GO)

$(OGR_GO): $(SWIG_OUTPUT_OGR)
	$(MORPH_BIN) -in $(OGR_GO_BUILD) -out $(OGR_GO)

$(OSR_GO): $(SWIG_OUTPUT_OSR)
	cp $(OSR_GO_BUILD) $(OSR_GO)

$(CONSTANT_GO): $(SWIG_OUTPUT_CONSTANT)
	cp $(CONSTANT_GO_BUILD) $(CONSTANT_GO)

# Build the morph tool.
$(MORPH_BIN): $(MORPH_SRC) | $(BUILD_DIR)
	GOPATH=$(GOPATH) go build -o $(MORPH_BIN) $(MORPH_SRC)

###
# Generate the swig wrappers.
#

$(SWIG_OUTPUT_GDAL): $(SWIG_SRC_GDAL) | $(PKG_BUILD_DIR)
	$(SWIG_CMD) -outdir "$(BUILD_DIR)" -o $(GDAL_CPP) $(SWIG_MOD_GDAL)

$(SWIG_OUTPUT_OGR): $(SWIG_SRC_OGR) | $(PKG_BUILD_DIR)
	$(SWIG_CMD) -outdir "$(BUILD_DIR)" -o $(OGR_CPP) $(SWIG_MOD_OGR)

$(SWIG_OUTPUT_OSR): $(SWIG_SRC_OSR) | $(PKG_BUILD_DIR)
	$(SWIG_CMD) -outdir "$(BUILD_DIR)" -o $(OSR_CPP) $(SWIG_MOD_OSR)

$(SWIG_OUTPUT_CONSTANT): $(SWIG_MOD_CONSTANT) | $(PKG_BUILD_DIR)
	$(SWIG_CMD) -outdir "$(PKG_BUILD_DIR)" -o $(CONSTANT_CPP) -module constant $(SWIG_MOD_CONSTANT)

$(PKG_BUILD_DIR): $(BUILD_DIR)
	@mkdir -p $(PKG_BUILD_DIR)

$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)

# Targets without filesystem representations.
.PHONY: generate test examples install uninstall clean
